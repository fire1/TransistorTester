
TransistorTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00003f02  00003fb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f02  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  00800102  00800102  00003fb8  2**0
                  ALLOC
  3 .eeprom       000001d4  00810000  00810000  00003fb8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00000dbc  00000000  00000000  0000418c  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000001d2  00000000  00000000  00004f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000000c0  00000000  00000000  0000511a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000783  00000000  00000000  000051da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002ebb  00000000  00000000  0000595d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000008ad  00000000  00000000  00008818  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00003473  00000000  00000000  000090c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  000002c0  00000000  00000000  0000c538  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000964  00000000  00000000  0000c7f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001958  00000000  00000000  0000d15c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 0000021f  00000000  00000000  0000eab4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 88 00 	jmp	0x110	; 0x110 <__ctors_end>
       4:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
       8:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
       c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      10:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      14:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      18:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      1c:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_7>
      20:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      24:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      28:	0c 94 dc 17 	jmp	0x2fb8	; 0x2fb8 <__vector_10>
      2c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      30:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      34:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <__vector_13>
      38:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      3c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      40:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      44:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      48:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      4c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      50:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      54:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_21>
      58:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      5c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      60:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      64:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>

00000068 <LogTab>:
      68:	00 00 14 00 29 00 3e 00 53 00 69 00 80 00 97 00     ....).>.S.i.....
      78:	ae 00 c6 00 df 00 f8 00 12 01 2d 01 49 01 65 01     ..........-.I.e.
      88:	82 01 a0 01 be 01 de 01 ff 01 21 02 44 02 68 02     ..........!.D.h.
      98:	8e 02 b5 02 de 02 09 03 35 03 64 03 94 03 c8 03     ........5.d.....
      a8:	fe 03 37 04 73 04 b4 04 f9 04 43 05 93 05 ea 05     ..7.s.....C.....
      b8:	49 06 b3 06 29 07 ae 07 48 08 ff 08 de 09           I...)...H.....

000000c6 <RHtab>:
      c6:	ba 03 87 03 58 03 2e 03 07 03 e4 02 c3 02 a4 02     ....X...........
      d6:	88 02                                               ..

000000d8 <VERSION_str>:
      d8:	56 65 72 73 69 6f 6e 20 31 2e 30 38 6b 00           Version 1.08k.

000000e6 <URefT>:
      e6:	52 65 66 3d 00                                      Ref=.

000000eb <RHfakt>:
      eb:	52 48 66 3d 00                                      RHf=.

000000f0 <R0_str>:
      f0:	52 30 3d 00                                         R0=.

000000f4 <MinCap_str>:
      f4:	20 3e 31 30 30 6e 46 00                              >100nF.

000000fc <REF_C_str>:
      fc:	52 45 46 5f 43 3d 00                                REF_C=.

00000103 <REF_R_str>:
     103:	52 45 46 5f 52 3d 00                                REF_R=.

0000010a <PinRLtab>:
     10a:	01 04 10                                            ...

0000010d <PinADCtab>:
     10d:	01 02 04                                            ...

00000110 <__ctors_end>:
     110:	11 24       	eor	r1, r1
     112:	1f be       	out	0x3f, r1	; 63
     114:	cf ef       	ldi	r28, 0xFF	; 255
     116:	d4 e0       	ldi	r29, 0x04	; 4
     118:	de bf       	out	0x3e, r29	; 62
     11a:	cd bf       	out	0x3d, r28	; 61

0000011c <__do_copy_data>:
     11c:	11 e0       	ldi	r17, 0x01	; 1
     11e:	a0 e0       	ldi	r26, 0x00	; 0
     120:	b1 e0       	ldi	r27, 0x01	; 1
     122:	e2 e0       	ldi	r30, 0x02	; 2
     124:	ff e3       	ldi	r31, 0x3F	; 63
     126:	02 c0       	rjmp	.+4      	; 0x12c <__do_copy_data+0x10>
     128:	05 90       	lpm	r0, Z+
     12a:	0d 92       	st	X+, r0
     12c:	a2 30       	cpi	r26, 0x02	; 2
     12e:	b1 07       	cpc	r27, r17
     130:	d9 f7       	brne	.-10     	; 0x128 <__do_copy_data+0xc>

00000132 <__do_clear_bss>:
     132:	11 e0       	ldi	r17, 0x01	; 1
     134:	a2 e0       	ldi	r26, 0x02	; 2
     136:	b1 e0       	ldi	r27, 0x01	; 1
     138:	01 c0       	rjmp	.+2      	; 0x13c <.do_clear_bss_start>

0000013a <.do_clear_bss_loop>:
     13a:	1d 92       	st	X+, r1

0000013c <.do_clear_bss_start>:
     13c:	a0 39       	cpi	r26, 0x90	; 144
     13e:	b1 07       	cpc	r27, r17
     140:	e1 f7       	brne	.-8      	; 0x13a <.do_clear_bss_loop>
     142:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <main>
     146:	0c 94 7f 1f 	jmp	0x3efe	; 0x3efe <_exit>

0000014a <__bad_interrupt>:
     14a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014e <lcd_data>:
void lcd_space(void) {
   lcd_data(' ');
}

// sends data byte to the LCD 
void lcd_data(unsigned char temp1) {
     14e:	1f 93       	push	r17
     150:	18 2f       	mov	r17, r24
 lcd_write_data(temp1);		// set RS to 1
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	61 2f       	mov	r22, r17
     156:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
     15a:	0e 94 52 14 	call	0x28a4	; 0x28a4 <wait50us>
#ifdef WITH_UART
 switch(temp1) {
     15e:	18 30       	cpi	r17, 0x08	; 8
     160:	48 f4       	brcc	.+18     	; 0x174 <lcd_data+0x26>
     162:	16 30       	cpi	r17, 0x06	; 6
     164:	c0 f4       	brcc	.+48     	; 0x196 <lcd_data+0x48>
     166:	12 30       	cpi	r17, 0x02	; 2
     168:	61 f0       	breq	.+24     	; 0x182 <lcd_data+0x34>
     16a:	13 30       	cpi	r17, 0x03	; 3
     16c:	79 f0       	breq	.+30     	; 0x18c <lcd_data+0x3e>
     16e:	11 30       	cpi	r17, 0x01	; 1
     170:	f1 f4       	brne	.+60     	; 0x1ae <lcd_data+0x60>
     172:	05 c0       	rjmp	.+10     	; 0x17e <lcd_data+0x30>
     174:	14 3e       	cpi	r17, 0xE4	; 228
     176:	89 f0       	breq	.+34     	; 0x19a <lcd_data+0x4c>
     178:	14 3f       	cpi	r17, 0xF4	; 244
     17a:	c9 f4       	brne	.+50     	; 0x1ae <lcd_data+0x60>
     17c:	10 c0       	rjmp	.+32     	; 0x19e <lcd_data+0x50>
    case LCD_CHAR_DIODE1:
    	uart_putc('>');
     17e:	8e e3       	ldi	r24, 0x3E	; 62
     180:	06 c0       	rjmp	.+12     	; 0x18e <lcd_data+0x40>
    	uart_putc('|');
    	break;
    case LCD_CHAR_DIODE2:
    	uart_putc('|');
     182:	8c e7       	ldi	r24, 0x7C	; 124
     184:	0e 94 23 14 	call	0x2846	; 0x2846 <uart_putc>
    	uart_putc('<');
     188:	8c e3       	ldi	r24, 0x3C	; 60
     18a:	12 c0       	rjmp	.+36     	; 0x1b0 <lcd_data+0x62>
    	break;
    case LCD_CHAR_CAP:
    	uart_putc('|');
     18c:	8c e7       	ldi	r24, 0x7C	; 124
     18e:	0e 94 23 14 	call	0x2846	; 0x2846 <uart_putc>
    	uart_putc('|');
     192:	8c e7       	ldi	r24, 0x7C	; 124
     194:	0d c0       	rjmp	.+26     	; 0x1b0 <lcd_data+0x62>
    	break;
    case LCD_CHAR_RESIS1:
    case LCD_CHAR_RESIS2:
    	uart_putc('R');
     196:	82 e5       	ldi	r24, 0x52	; 82
     198:	0b c0       	rjmp	.+22     	; 0x1b0 <lcd_data+0x62>
//    case LCD_CHAR_DEGREE:	// degree sign
//    	uart_putc(0xf8);	// codepage 437 or 850 has degree
//    	break;
    case LCD_CHAR_U:		//µ
//    	uart_putc(0xe6);	// codepage 437 or 850 has my
    	uart_putc('u');		// better use the ASCII u
     19a:	85 e7       	ldi	r24, 0x75	; 117
     19c:	09 c0       	rjmp	.+18     	; 0x1b0 <lcd_data+0x62>
    	break;
    case LCD_CHAR_OMEGA:	//Omega
//	uart_putc(0xea);	// only codepage 437 has Omega
        uart_putc('O');
     19e:	8f e4       	ldi	r24, 0x4F	; 79
     1a0:	0e 94 23 14 	call	0x2846	; 0x2846 <uart_putc>
        uart_putc('h');
     1a4:	88 e6       	ldi	r24, 0x68	; 104
     1a6:	0e 94 23 14 	call	0x2846	; 0x2846 <uart_putc>
        uart_putc('m');
     1aa:	8d e6       	ldi	r24, 0x6D	; 109
     1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <lcd_data+0x62>
    	break;
    default:
    	uart_putc(temp1);
     1ae:	81 2f       	mov	r24, r17
     1b0:	0e 94 23 14 	call	0x2846	; 0x2846 <uart_putc>
 }
#endif
}
     1b4:	1f 91       	pop	r17
     1b6:	08 95       	ret

000001b8 <lcd_space>:
   lcd_data(temp + '1');
}

// send space character to LCD
void lcd_space(void) {
   lcd_data(' ');
     1b8:	80 e2       	ldi	r24, 0x20	; 32
     1ba:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
}
     1be:	08 95       	ret

000001c0 <lcd_testpin>:
 

// sends numeric character (Pin Number) to the LCD 
// from binary 0 we send ASCII 1 ....
void lcd_testpin(unsigned char temp) {
   lcd_data(temp + '1');
     1c0:	8f 5c       	subi	r24, 0xCF	; 207
     1c2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
}
     1c6:	08 95       	ret

000001c8 <uart_newline>:
}


#ifdef WITH_UART
void uart_newline(void) {
   uart_putc('\r');
     1c8:	8d e0       	ldi	r24, 0x0D	; 13
     1ca:	0e 94 23 14 	call	0x2846	; 0x2846 <uart_putc>
   uart_putc('\n');
     1ce:	8a e0       	ldi	r24, 0x0A	; 10
     1d0:	0e 94 23 14 	call	0x2846	; 0x2846 <uart_putc>
}
     1d4:	08 95       	ret

000001d6 <lcd_command>:
#endif
}
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
     1d6:	1f 93       	push	r17
     1d8:	18 2f       	mov	r17, r24
        lcd_write_cmd(temp1);		// set RS to 0
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	61 2f       	mov	r22, r17
     1de:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
     1e2:	0e 94 52 14 	call	0x28a4	; 0x28a4 <wait50us>
#ifdef WITH_UART
	if((temp1 == 0x80) || (temp1 == 0xC0)) {
     1e6:	10 38       	cpi	r17, 0x80	; 128
     1e8:	11 f0       	breq	.+4      	; 0x1ee <lcd_command+0x18>
     1ea:	10 3c       	cpi	r17, 0xC0	; 192
     1ec:	11 f4       	brne	.+4      	; 0x1f2 <lcd_command+0x1c>
		uart_newline();
     1ee:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_newline>
	}
#endif
}
     1f2:	1f 91       	pop	r17
     1f4:	08 95       	ret

000001f6 <lcd_clear>:
}
 
// send the command to clear the display 
 
void lcd_clear(void) {
   lcd_command(CLEAR_DISPLAY);
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
   wait_about10ms();
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
#ifdef WITH_UART
   uart_newline();
     204:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_newline>
#endif
   lcd_line1();			// set cursor to Line1 Column 1, (only for OLED-Display)
     208:	80 e8       	ldi	r24, 0x80	; 128
     20a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
}
     20e:	08 95       	ret

00000210 <lcd_init>:
 
// Initialise: 
// Must be called first .
 
void lcd_init(void) {
   wait_about30ms();
     210:	86 e0       	ldi	r24, 0x06	; 6
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
   // to initialise, send 3 times to be shure to be in 8 Bit mode
   lcd_write_init(1);
     218:	80 e8       	ldi	r24, 0x80	; 128
     21a:	60 e3       	ldi	r22, 0x30	; 48
     21c:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
   wait_about5ms();
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
   
   lcd_write_init(1);
     228:	80 e8       	ldi	r24, 0x80	; 128
     22a:	60 e3       	ldi	r22, 0x30	; 48
     22c:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
   wait1ms();
     230:	0e 94 4c 14 	call	0x2898	; 0x2898 <wait1ms>

   lcd_write_init(1);
     234:	80 e8       	ldi	r24, 0x80	; 128
     236:	60 e3       	ldi	r22, 0x30	; 48
     238:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
   wait1ms();
     23c:	0e 94 4c 14 	call	0x2898	; 0x2898 <wait1ms>

   lcd_write_init(0);		// switch to 4 Bit mode
     240:	80 e8       	ldi	r24, 0x80	; 128
     242:	60 e2       	ldi	r22, 0x20	; 32
     244:	0e 94 80 01 	call	0x300	; 0x300 <_lcd_hw_write>
   wait_about10ms();
     248:	82 e0       	ldi	r24, 0x02	; 2
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
   lcd_command(CMD1_SetBias | 0x0c);		// 1/4 bias     (5V)
   lcd_command(CMD1_PowerControl | 0x02);	// booster off / set contrast C5:C4 = 2
   lcd_command(CMD1_FollowerControl | 0x09);	// Follower on / Rab2:0 = 1
   lcd_command(CMD1_SetContrast | 0x04);	// set contrast C3:0 = 4
#endif
   lcd_command(CMD_SetIFOptions | 0x08);	// 4Bit / 2 rows / 5x7
     250:	88 e2       	ldi	r24, 0x28	; 40
     252:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>

   lcd_command(CMD_SetDisplayAndCursor | 0x04); // Display on / Cursor off / no Blinking
     256:	8c e0       	ldi	r24, 0x0C	; 12
     258:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>

   lcd_command(CMD_SetEntryMode | 0x02);	// increment / no Scroll    
     25c:	86 e0       	ldi	r24, 0x06	; 6
     25e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
   lcd_clear();
     262:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
}
     266:	08 95       	ret

00000268 <lcd_string>:
#endif
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
     268:	ef 92       	push	r14
     26a:	ff 92       	push	r15
     26c:	cf 93       	push	r28
     26e:	df 93       	push	r29
     270:	e8 2e       	mov	r14, r24
     272:	e7 01       	movw	r28, r14
     274:	7e 01       	movw	r14, r28
     276:	f9 2e       	mov	r15, r25
     278:	e7 01       	movw	r28, r14
    while(*data) {
     27a:	02 c0       	rjmp	.+4      	; 0x280 <lcd_string+0x18>
        lcd_data(*data);
     27c:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
 
 
// writes a string to the LCD 
 
void lcd_string(char *data) {
    while(*data) {
     280:	89 91       	ld	r24, Y+
     282:	88 23       	and	r24, r24
     284:	d9 f7       	brne	.-10     	; 0x27c <lcd_string+0x14>
        lcd_data(*data);
        data++;
    }
}
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	ff 90       	pop	r15
     28c:	ef 90       	pop	r14
     28e:	08 95       	ret

00000290 <lcd_pgm_string>:

#ifdef use_lcd_pgm
//Load string from PGM  and send to LCD 
void lcd_pgm_string(const unsigned char *data) {
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = pgm_read_byte(data);
     296:	fe 01       	movw	r30, r28
     298:	84 91       	lpm	r24, Z+
      if((cc==0) || (cc==128)) {
     29a:	88 23       	and	r24, r24
     29c:	31 f0       	breq	.+12     	; 0x2aa <lcd_pgm_string+0x1a>
     29e:	80 38       	cpi	r24, 0x80	; 128
     2a0:	21 f0       	breq	.+8      	; 0x2aa <lcd_pgm_string+0x1a>
         return;
      }
      lcd_data(cc);
     2a2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
      data++;
     2a6:	21 96       	adiw	r28, 0x01	; 1
   }
     2a8:	f6 cf       	rjmp	.-20     	; 0x296 <lcd_pgm_string+0x6>
}
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret

000002b0 <lcd_fix_string>:
#endif

//Load string from PGM or EEprom and send to LCD 
void lcd_fix_string(const unsigned char *data) {
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	ec 01       	movw	r28, r24
   unsigned char cc;
   while(1) {
      cc = MEM_read_byte(data);
     2b6:	ce 01       	movw	r24, r28
     2b8:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <__eerd_byte_m168>
      if((cc==0) || (cc==128)) {
     2bc:	88 23       	and	r24, r24
     2be:	31 f0       	breq	.+12     	; 0x2cc <lcd_fix_string+0x1c>
     2c0:	80 38       	cpi	r24, 0x80	; 128
     2c2:	21 f0       	breq	.+8      	; 0x2cc <lcd_fix_string+0x1c>
         return;
      }
      lcd_data(cc);
     2c4:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
      data++;
     2c8:	21 96       	adiw	r28, 0x01	; 1
   }
     2ca:	f5 cf       	rjmp	.-22     	; 0x2b6 <lcd_fix_string+0x6>
}
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <lcd_fix_customchar>:

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
     2d2:	0f 93       	push	r16
     2d4:	1f 93       	push	r17
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	8c 01       	movw	r16, r24
     2dc:	c0 e0       	ldi	r28, 0x00	; 0
     2de:	d0 e0       	ldi	r29, 0x00	; 0
    for(uint8_t i=0;i<8;i++) {
        lcd_data(MEM_read_byte(chardata));
     2e0:	c8 01       	movw	r24, r16
     2e2:	8c 0f       	add	r24, r28
     2e4:	9d 1f       	adc	r25, r29
     2e6:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <__eerd_byte_m168>
     2ea:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
     2ee:	21 96       	adiw	r28, 0x01	; 1
   }
}

// load custom character from PGM or EEprom and send to LCD
void lcd_fix_customchar(const unsigned char *chardata) {	
    for(uint8_t i=0;i<8;i++) {
     2f0:	c8 30       	cpi	r28, 0x08	; 8
     2f2:	d1 05       	cpc	r29, r1
     2f4:	a9 f7       	brne	.-22     	; 0x2e0 <lcd_fix_customchar+0xe>
        lcd_data(MEM_read_byte(chardata));
        chardata++;
    }
}
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	0f 91       	pop	r16
     2fe:	08 95       	ret

00000300 <_lcd_hw_write>:
     300:	80 fd       	sbrc	r24, 0
     302:	5c 9a       	sbi	0x0b, 4	; 11
     304:	80 ff       	sbrs	r24, 0
     306:	5c 98       	cbi	0x0b, 4	; 11
     308:	54 9a       	sbi	0x0a, 4	; 10
     30a:	00 00       	nop
     30c:	5d 9a       	sbi	0x0b, 5	; 11
     30e:	55 9a       	sbi	0x0a, 5	; 10
     310:	58 98       	cbi	0x0b, 0	; 11
     312:	59 98       	cbi	0x0b, 1	; 11
     314:	5a 98       	cbi	0x0b, 2	; 11
     316:	5b 98       	cbi	0x0b, 3	; 11
     318:	64 fd       	sbrc	r22, 4
     31a:	58 9a       	sbi	0x0b, 0	; 11
     31c:	50 9a       	sbi	0x0a, 0	; 10
     31e:	65 fd       	sbrc	r22, 5
     320:	59 9a       	sbi	0x0b, 1	; 11
     322:	51 9a       	sbi	0x0a, 1	; 10
     324:	66 fd       	sbrc	r22, 6
     326:	5a 9a       	sbi	0x0b, 2	; 11
     328:	52 9a       	sbi	0x0a, 2	; 10
     32a:	67 fd       	sbrc	r22, 7
     32c:	5b 9a       	sbi	0x0b, 3	; 11
     32e:	53 9a       	sbi	0x0a, 3	; 10
     330:	00 00       	nop
     332:	5d 98       	cbi	0x0b, 5	; 11
     334:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <wait1us>
     338:	87 fd       	sbrc	r24, 7
     33a:	11 c0       	rjmp	.+34     	; 0x35e <_lcd_hw_write_exit>
     33c:	5d 9a       	sbi	0x0b, 5	; 11
     33e:	58 98       	cbi	0x0b, 0	; 11
     340:	59 98       	cbi	0x0b, 1	; 11
     342:	5a 98       	cbi	0x0b, 2	; 11
     344:	5b 98       	cbi	0x0b, 3	; 11
     346:	60 fd       	sbrc	r22, 0
     348:	58 9a       	sbi	0x0b, 0	; 11
     34a:	61 fd       	sbrc	r22, 1
     34c:	59 9a       	sbi	0x0b, 1	; 11
     34e:	62 fd       	sbrc	r22, 2
     350:	5a 9a       	sbi	0x0b, 2	; 11
     352:	63 fd       	sbrc	r22, 3
     354:	5b 9a       	sbi	0x0b, 3	; 11
     356:	00 00       	nop
     358:	5d 98       	cbi	0x0b, 5	; 11
     35a:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <wait1us>

0000035e <_lcd_hw_write_exit>:
     35e:	08 95       	ret

00000360 <__vector_7>:
#define MAIN_C
#include "Transistortester.h"

#ifndef INHIBIT_SLEEP_MODE
  // prepare sleep mode
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
     360:	18 95       	reti

00000362 <__vector_21>:
  EMPTY_INTERRUPT(ADC_vect);
     362:	18 95       	reti

00000364 <EntladePins>:
   R_DDR &= ~PinToCharge;	// switch back to input
   R_PORT &= ~PinToCharge;	// no Pull up
}

// first discharge any charge of capacitors
void EntladePins() {
     364:	af 92       	push	r10
     366:	bf 92       	push	r11
     368:	cf 92       	push	r12
     36a:	df 92       	push	r13
     36c:	ef 92       	push	r14
     36e:	ff 92       	push	r15
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	3a e0       	ldi	r19, 0x0A	; 10
     37a:	c3 2e       	mov	r12, r19
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     37c:	28 e0       	ldi	r18, 0x08	; 8
     37e:	d2 2e       	mov	r13, r18
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     380:	9a e2       	ldi	r25, 0x2A	; 42
     382:	a9 2e       	mov	r10, r25
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     384:	85 e1       	ldi	r24, 0x15	; 21
     386:	b8 2e       	mov	r11, r24
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     388:	d7 b8       	out	0x07, r13	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     38a:	d8 b8       	out	0x08, r13	; 8
     R_PORT = 0;			// R-outputs auf 0
     38c:	15 b8       	out	0x05, r1	; 5
     R_DDR = (2<<(PC2*2)) | (2<<(PC1*2)) | (2<<(PC0*2)); // R_H for all Pins to GND
     38e:	a4 b8       	out	0x04, r10	; 4
     adcmv[0] = W5msReadADC(PC0);	// which voltage has Pin 1?
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
     396:	8c 01       	movw	r16, r24
     adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
     39e:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     3a0:	82 e0       	ldi	r24, 0x02	; 2
     3a2:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
     if ((PartFound == PART_CELL) || (adcmv[0] < CAP_EMPTY_LEVEL) & (adcmv[1] < CAP_EMPTY_LEVEL) & (adcmv[2] < CAP_EMPTY_LEVEL)) {
     3a6:	20 91 07 01 	lds	r18, 0x0107
     3aa:	28 30       	cpi	r18, 0x08	; 8
     3ac:	c1 f0       	breq	.+48     	; 0x3de <EntladePins+0x7a>
     3ae:	41 e0       	ldi	r20, 0x01	; 1
     3b0:	c4 30       	cpi	r28, 0x04	; 4
     3b2:	d1 05       	cpc	r29, r1
     3b4:	08 f0       	brcs	.+2      	; 0x3b8 <EntladePins+0x54>
     3b6:	40 e0       	ldi	r20, 0x00	; 0
     3b8:	21 e0       	ldi	r18, 0x01	; 1
     3ba:	04 30       	cpi	r16, 0x04	; 4
     3bc:	11 05       	cpc	r17, r1
     3be:	08 f0       	brcs	.+2      	; 0x3c2 <EntladePins+0x5e>
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	42 23       	and	r20, r18
     3c4:	50 e0       	ldi	r21, 0x00	; 0
     3c6:	21 e0       	ldi	r18, 0x01	; 1
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	84 30       	cpi	r24, 0x04	; 4
     3cc:	91 05       	cpc	r25, r1
     3ce:	10 f0       	brcs	.+4      	; 0x3d4 <EntladePins+0x70>
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	24 23       	and	r18, r20
     3d6:	35 23       	and	r19, r21
     3d8:	21 15       	cp	r18, r1
     3da:	31 05       	cpc	r19, r1
     3dc:	21 f0       	breq	.+8      	; 0x3e6 <EntladePins+0x82>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
     3de:	88 e0       	ldi	r24, 0x08	; 8
     3e0:	87 b9       	out	0x07, r24	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
     3e2:	14 b8       	out	0x04, r1	; 4
        return;			// all is discharged
     3e4:	4f c0       	rjmp	.+158    	; 0x484 <EntladePins+0x120>
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
     3e6:	23 e0       	ldi	r18, 0x03	; 3
     3e8:	08 3e       	cpi	r16, 0xE8	; 232
     3ea:	12 07       	cpc	r17, r18
     3ec:	10 f0       	brcs	.+4      	; 0x3f2 <EntladePins+0x8e>
  uint8_t lop_cnt;		// loop counter
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     adc_gnd = TXD_MSK;		// put all ADC to Input
     3ee:	28 e0       	ldi	r18, 0x08	; 8
     3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <EntladePins+0x90>
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
        return;			// all is discharged
     }
     // all Pins with voltage lower than 1V can be connected directly to GND (ADC-Port)
     if (adcmv[0] < 1000) {
        adc_gnd |= (1<<PC0);	//Pin 1 directly to GND
     3f2:	29 e0       	ldi	r18, 0x09	; 9
     }
     if (adcmv[1] < 1000) {
     3f4:	33 e0       	ldi	r19, 0x03	; 3
     3f6:	c8 3e       	cpi	r28, 0xE8	; 232
     3f8:	d3 07       	cpc	r29, r19
     3fa:	08 f4       	brcc	.+2      	; 0x3fe <EntladePins+0x9a>
        adc_gnd |= (1<<PC1);	//Pin 2 directly to GND
     3fc:	22 60       	ori	r18, 0x02	; 2
     }
     if (adcmv[2] < 1000) {
     3fe:	33 e0       	ldi	r19, 0x03	; 3
     400:	88 3e       	cpi	r24, 0xE8	; 232
     402:	93 07       	cpc	r25, r19
     404:	08 f4       	brcc	.+2      	; 0x408 <EntladePins+0xa4>
        adc_gnd |= (1<<PC2);	//Pin 3 directly to  GND
     406:	24 60       	ori	r18, 0x04	; 4
     }
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
     408:	27 b9       	out	0x07, r18	; 7

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     40a:	b4 b8       	out	0x04, r11	; 4
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     40c:	c0 e0       	ldi	r28, 0x00	; 0
     40e:	d0 e0       	ldi	r29, 0x00	; 0
        wdt_reset();
     410:	a8 95       	wdr
        adcmv[0] = W20msReadADC(PC0);	// which voltage has Pin 1?
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	0e 94 94 1a 	call	0x3528	; 0x3528 <W20msReadADC>
     418:	7c 01       	movw	r14, r24
        adcmv[1] = ReadADC(PC1);	// which voltage has Pin 2?
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
     420:	8c 01       	movw	r16, r24
        adcmv[2] = ReadADC(PC2);	// which voltage has Pin 3?
     422:	82 e0       	ldi	r24, 0x02	; 2
     424:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
        if (adcmv[0] < 1300) {
     428:	24 e1       	ldi	r18, 0x14	; 20
     42a:	e2 16       	cp	r14, r18
     42c:	25 e0       	ldi	r18, 0x05	; 5
     42e:	f2 06       	cpc	r15, r18
     430:	08 f4       	brcc	.+2      	; 0x434 <EntladePins+0xd0>
           ADC_DDR |= (1<<PC0);	// below 1.3V , switch directly with ADC-Port to GND
     432:	38 9a       	sbi	0x07, 0	; 7
        }
        if (adcmv[1] < 1300) {
     434:	35 e0       	ldi	r19, 0x05	; 5
     436:	04 31       	cpi	r16, 0x14	; 20
     438:	13 07       	cpc	r17, r19
     43a:	08 f4       	brcc	.+2      	; 0x43e <EntladePins+0xda>
           ADC_DDR |= (1<<PC1);	// below 1.3V, switch directly with ADC-Port to GND
     43c:	39 9a       	sbi	0x07, 1	; 7
        }
        if (adcmv[2] < 1300) {
     43e:	25 e0       	ldi	r18, 0x05	; 5
     440:	84 31       	cpi	r24, 0x14	; 20
     442:	92 07       	cpc	r25, r18
     444:	08 f4       	brcc	.+2      	; 0x448 <EntladePins+0xe4>
           ADC_DDR |= (1<<PC2);	// below 1.3V, switch directly with ADC-Port to GND
     446:	3a 9a       	sbi	0x07, 2	; 7
        }
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
     448:	36 e0       	ldi	r19, 0x06	; 6
     44a:	e3 16       	cp	r14, r19
     44c:	f1 04       	cpc	r15, r1
     44e:	30 f4       	brcc	.+12     	; 0x45c <EntladePins+0xf8>
     450:	06 30       	cpi	r16, 0x06	; 6
     452:	11 05       	cpc	r17, r1
     454:	18 f4       	brcc	.+6      	; 0x45c <EntladePins+0xf8>
     456:	86 30       	cpi	r24, 0x06	; 6
     458:	91 05       	cpc	r25, r1
     45a:	38 f0       	brcs	.+14     	; 0x46a <EntladePins+0x106>

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     45c:	21 96       	adiw	r28, 0x01	; 1
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	c4 3f       	cpi	r28, 0xF4	; 244
     462:	d8 07       	cpc	r29, r24
     464:	a9 f6       	brne	.-86     	; 0x410 <EntladePins+0xac>
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
     466:	d0 92 07 01 	sts	0x0107, r13

     // additionally switch the leaving Ports with R_L to GND.
     // since there is no disadvantage for the already directly switched pins, we can
     // simply switch all  R_L resistors to GND
     R_DDR = (1<<(PC2*2)) | (1<<(PC1*2)) | (1<<(PC0*2));	// Pins across R_L resistors to GND
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
     46a:	00 e0       	ldi	r16, 0x00	; 0
     46c:	10 e0       	ldi	r17, 0x00	; 0
     46e:	04 c0       	rjmp	.+8      	; 0x478 <EntladePins+0x114>
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     470:	0e 94 4c 14 	call	0x2898	; 0x2898 <wait1ms>
     474:	0f 5f       	subi	r16, 0xFF	; 255
     476:	1f 4f       	sbci	r17, 0xFF	; 255
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
        // there is charge on capacitor, warn later!
     }
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
     478:	0c 17       	cp	r16, r28
     47a:	1d 07       	cpc	r17, r29
     47c:	c8 f3       	brcs	.-14     	; 0x470 <EntladePins+0x10c>
     47e:	ca 94       	dec	r12
  unsigned int clr_cnt;		// Clear Counter
  uint8_t lop_cnt;		// loop counter
// max. time of discharge in ms  (10000/20) == 10s
#define MAX_ENTLADE_ZEIT  (10000/20)

  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
     480:	09 f0       	breq	.+2      	; 0x484 <EntladePins+0x120>
     482:	82 cf       	rjmp	.-252    	; 0x388 <EntladePins+0x24>
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
        // for safety, discharge 5% of discharge  time
        wait1ms();
     }
  } // end for lop_cnt
 }
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	ff 90       	pop	r15
     48e:	ef 90       	pop	r14
     490:	df 90       	pop	r13
     492:	cf 90       	pop	r12
     494:	bf 90       	pop	r11
     496:	af 90       	pop	r10
     498:	08 95       	ret

0000049a <RefVoltage>:
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;

  #ifdef AUTO_CAL
  referenz = ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset));
     49a:	87 ec       	ldi	r24, 0xC7	; 199
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <__eerd_word_m168>
     4a2:	20 91 44 01 	lds	r18, 0x0144
     4a6:	30 91 45 01 	lds	r19, 0x0145
     4aa:	28 0f       	add	r18, r24
     4ac:	39 1f       	adc	r19, r25
  #else
  referenz = ref_mv + REF_C_KORR;
  #endif
  if (referenz >= Ref_Tab_Beginn) {
     4ae:	83 e0       	ldi	r24, 0x03	; 3
     4b0:	28 3e       	cpi	r18, 0xE8	; 232
     4b2:	38 07       	cpc	r19, r24
     4b4:	20 f0       	brcs	.+8      	; 0x4be <RefVoltage+0x24>
     referenz -= Ref_Tab_Beginn;
     4b6:	c9 01       	movw	r24, r18
     4b8:	88 5e       	subi	r24, 0xE8	; 232
     4ba:	93 40       	sbci	r25, 0x03	; 3
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <RefVoltage+0x28>
  } else  {
     referenz = 0;		// limit to begin of table
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = referenz / Ref_Tab_Abstand;
     4c2:	62 e3       	ldi	r22, 0x32	; 50
     4c4:	70 e0       	ldi	r23, 0x00	; 0
     4c6:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
  tabres = Ref_Tab_Abstand-tabres;
  if (tabind > 7) {
     tabind = 7;		// limit to end of table
  }
  // interpolate the table of factors
  y1 = pgm_read_word(&RHtab[tabind]);
     4ca:	68 30       	cpi	r22, 0x08	; 8
     4cc:	08 f0       	brcs	.+2      	; 0x4d0 <RefVoltage+0x36>
     4ce:	67 e0       	ldi	r22, 0x07	; 7
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	fb 01       	movw	r30, r22
     4d4:	ee 0f       	add	r30, r30
     4d6:	ff 1f       	adc	r31, r31
     4d8:	ea 53       	subi	r30, 0x3A	; 58
     4da:	ff 4f       	sbci	r31, 0xFF	; 255
     4dc:	45 91       	lpm	r20, Z+
     4de:	54 91       	lpm	r21, Z+
  y2 = pgm_read_word(&RHtab[tabind+1]);
     4e0:	fb 01       	movw	r30, r22
     4e2:	ee 0f       	add	r30, r30
     4e4:	ff 1f       	adc	r31, r31
     4e6:	e8 53       	subi	r30, 0x38	; 56
     4e8:	ff 4f       	sbci	r31, 0xFF	; 255
     4ea:	25 91       	lpm	r18, Z+
     4ec:	34 91       	lpm	r19, Z+
  } else  {
     referenz = 0;		// limit to begin of table
  }
  tabind = referenz / Ref_Tab_Abstand;
  tabres = referenz % Ref_Tab_Abstand;
  tabres = Ref_Tab_Abstand-tabres;
     4ee:	62 e3       	ldi	r22, 0x32	; 50
     4f0:	68 1b       	sub	r22, r24
  }
  // interpolate the table of factors
  y1 = pgm_read_word(&RHtab[tabind]);
  y2 = pgm_read_word(&RHtab[tabind+1]);
  // RHmultip is the interpolated factor to compute capacity from load time with 470k
  RHmultip = ((y1 - y2) * tabres + (Ref_Tab_Abstand/2)) / Ref_Tab_Abstand + y2;
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	42 1b       	sub	r20, r18
     4f6:	53 0b       	sbc	r21, r19
     4f8:	64 9f       	mul	r22, r20
     4fa:	c0 01       	movw	r24, r0
     4fc:	65 9f       	mul	r22, r21
     4fe:	90 0d       	add	r25, r0
     500:	74 9f       	mul	r23, r20
     502:	90 0d       	add	r25, r0
     504:	11 24       	eor	r1, r1
     506:	49 96       	adiw	r24, 0x19	; 25
     508:	62 e3       	ldi	r22, 0x32	; 50
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
     510:	62 0f       	add	r22, r18
     512:	73 1f       	adc	r23, r19
     514:	70 93 01 01 	sts	0x0101, r23
     518:	60 93 00 01 	sts	0x0100, r22
 }
     51c:	08 95       	ret

0000051e <lcd_clear_line>:
#endif

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
     51e:	1f 93       	push	r17
     520:	14 e1       	ldi	r17, 0x14	; 20
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
    lcd_space();
     522:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
     526:	11 50       	subi	r17, 0x01	; 1

#ifdef LCD_CLEAR
void lcd_clear_line(void) {
 // writes 20 spaces to LCD-Display, Cursor must be positioned to first column
 unsigned char ll;
 for (ll=0;ll<20;ll++) {
     528:	e1 f7       	brne	.-8      	; 0x522 <lcd_clear_line+0x4>
    lcd_space();
 }
}
     52a:	1f 91       	pop	r17
     52c:	08 95       	ret

0000052e <DisplayValue>:
 *    e.g: p = 10^-12 -> -12
 *  - unit character (0 = none)
 *  digits = 2, 3 or 4
 */
void DisplayValue(unsigned long Value, int8_t Exponent, unsigned char Unit, unsigned char digits)
{
     52e:	2f 92       	push	r2
     530:	3f 92       	push	r3
     532:	4f 92       	push	r4
     534:	5f 92       	push	r5
     536:	7f 92       	push	r7
     538:	8f 92       	push	r8
     53a:	9f 92       	push	r9
     53c:	af 92       	push	r10
     53e:	bf 92       	push	r11
     540:	cf 92       	push	r12
     542:	df 92       	push	r13
     544:	ef 92       	push	r14
     546:	ff 92       	push	r15
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	df 93       	push	r29
     54e:	cf 93       	push	r28
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
     554:	2f 97       	sbiw	r28, 0x0f	; 15
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	cd bf       	out	0x3d, r28	; 61
     560:	6b 01       	movw	r12, r22
     562:	7c 01       	movw	r14, r24
     564:	14 2f       	mov	r17, r20
     566:	72 2e       	mov	r7, r18
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
     568:	03 30       	cpi	r16, 0x03	; 3
     56a:	29 f0       	breq	.+10     	; 0x576 <DisplayValue+0x48>
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
     56c:	04 30       	cpi	r16, 0x04	; 4
     56e:	31 f0       	breq	.+12     	; 0x57c <DisplayValue+0x4e>
  uint8_t           Offset;		/* exponent of offset to next 10^3 step */
  uint8_t           Index;		/* index ID */
  uint8_t           Length;		/* string length */


  Limit = 100;				/* scale value down to 2 digits */
     570:	84 e6       	ldi	r24, 0x64	; 100
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	14 c0       	rjmp	.+40     	; 0x59e <DisplayValue+0x70>
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
     576:	88 ee       	ldi	r24, 0xE8	; 232
     578:	93 e0       	ldi	r25, 0x03	; 3
     57a:	11 c0       	rjmp	.+34     	; 0x59e <DisplayValue+0x70>
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
     57c:	80 e1       	ldi	r24, 0x10	; 16
     57e:	97 e2       	ldi	r25, 0x27	; 39
     580:	0e c0       	rjmp	.+28     	; 0x59e <DisplayValue+0x70>
  while (Value >= Limit)
  {
    Value += 5;				/* for automatic rounding */
     582:	c7 01       	movw	r24, r14
     584:	b6 01       	movw	r22, r12
     586:	6b 5f       	subi	r22, 0xFB	; 251
     588:	7f 4f       	sbci	r23, 0xFF	; 255
     58a:	8f 4f       	sbci	r24, 0xFF	; 255
     58c:	9f 4f       	sbci	r25, 0xFF	; 255
    Value = Value / 10;			/* scale down by 10^1 */
     58e:	a5 01       	movw	r20, r10
     590:	94 01       	movw	r18, r8
     592:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
     596:	69 01       	movw	r12, r18
     598:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
     59a:	1f 5f       	subi	r17, 0xFF	; 255
     59c:	08 c0       	rjmp	.+16     	; 0x5ae <DisplayValue+0x80>


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
  while (Value >= Limit)
     59e:	1c 01       	movw	r2, r24
     5a0:	44 24       	eor	r4, r4
     5a2:	55 24       	eor	r5, r5
  {
    Value += 5;				/* for automatic rounding */
    Value = Value / 10;			/* scale down by 10^1 */
     5a4:	ba e0       	ldi	r27, 0x0A	; 10
     5a6:	8b 2e       	mov	r8, r27
     5a8:	91 2c       	mov	r9, r1
     5aa:	a1 2c       	mov	r10, r1
     5ac:	b1 2c       	mov	r11, r1


  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
  while (Value >= Limit)
     5ae:	c2 14       	cp	r12, r2
     5b0:	d3 04       	cpc	r13, r3
     5b2:	e4 04       	cpc	r14, r4
     5b4:	f5 04       	cpc	r15, r5
     5b6:	28 f7       	brcc	.-54     	; 0x582 <DisplayValue+0x54>


  /*
   *  determine prefix
   */
  Length = Exponent + 12;
     5b8:	81 2f       	mov	r24, r17
     5ba:	84 5f       	subi	r24, 0xF4	; 244
  if ((int8_t)Length <  0) Length = 0;		/* Limit to minimum prefix */
     5bc:	87 fd       	sbrc	r24, 7
     5be:	03 c0       	rjmp	.+6      	; 0x5c6 <DisplayValue+0x98>
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
     5c0:	83 31       	cpi	r24, 0x13	; 19
     5c2:	18 f4       	brcc	.+6      	; 0x5ca <DisplayValue+0x9c>
     5c4:	03 c0       	rjmp	.+6      	; 0x5cc <DisplayValue+0x9e>

  /*
   *  determine prefix
   */
  Length = Exponent + 12;
  if ((int8_t)Length <  0) Length = 0;		/* Limit to minimum prefix */
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	01 c0       	rjmp	.+2      	; 0x5cc <DisplayValue+0x9e>
  if (Length > 18) Length = 18;		/* Limit to maximum prefix */
     5ca:	82 e1       	ldi	r24, 0x12	; 18
  Index = Length / 3;
     5cc:	23 e0       	ldi	r18, 0x03	; 3
  Offset = Length % 3;
     5ce:	62 2f       	mov	r22, r18
     5d0:	0e 94 aa 1e 	call	0x3d54	; 0x3d54 <__udivmodqi4>
     5d4:	19 2f       	mov	r17, r25
  if (Offset > 0)
     5d6:	99 23       	and	r25, r25
     5d8:	19 f0       	breq	.+6      	; 0x5e0 <DisplayValue+0xb2>
    {
      Index++;				/* adjust index for exponent offset, take next prefix */
     5da:	8f 5f       	subi	r24, 0xFF	; 255
      Offset = 3 - Offset;		/* reverse value (1 or 2) */
     5dc:	29 1b       	sub	r18, r25
     5de:	12 2f       	mov	r17, r18
    { /* use no nano */
      Index++;				/* use mikro instead of nano */
      Offset += 3;			/* can be 3,4 or 5 */
    }
#endif
  Prefix = MEM_read_byte((uint8_t *)(&PrefixTab[Index]));   /* look up prefix in table */
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	80 54       	subi	r24, 0x40	; 64
     5e4:	9e 4f       	sbci	r25, 0xFE	; 254
     5e6:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <__eerd_byte_m168>
     5ea:	b8 2e       	mov	r11, r24
  /*
   *  display value
   */

  /* convert value into string */
  utoa((unsigned int)Value, OutBuffer, 10);
     5ec:	c6 01       	movw	r24, r12
     5ee:	6e 01       	movw	r12, r28
     5f0:	08 94       	sec
     5f2:	c1 1c       	adc	r12, r1
     5f4:	d1 1c       	adc	r13, r1
     5f6:	b6 01       	movw	r22, r12
     5f8:	4a e0       	ldi	r20, 0x0A	; 10
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <utoa>
  Length = strlen(OutBuffer);
     600:	f6 01       	movw	r30, r12
     602:	01 90       	ld	r0, Z+
     604:	00 20       	and	r0, r0
     606:	e9 f7       	brne	.-6      	; 0x602 <DisplayValue+0xd4>
     608:	31 97       	sbiw	r30, 0x01	; 1
     60a:	2e 2e       	mov	r2, r30
     60c:	2c 18       	sub	r2, r12

  /* position of dot */
  Exponent = Length - Offset;		/* calculate position */
     60e:	82 2c       	mov	r8, r2
     610:	81 1a       	sub	r8, r17

  if (Exponent <= 0)			/* we have to prepend "0." */
     612:	18 14       	cp	r1, r8
     614:	44 f0       	brlt	.+16     	; 0x626 <DisplayValue+0xf8>
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
     616:	8e e2       	ldi	r24, 0x2E	; 46
     618:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
      {
       lcd_data('0');	/* extra 0 for factor 10 */
       Exponent++;
      }
#else
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
     61c:	88 20       	and	r8, r8
     61e:	19 f0       	breq	.+6      	; 0x626 <DisplayValue+0xf8>
     620:	80 e3       	ldi	r24, 0x30	; 48
     622:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
#endif
  }

  if (Offset == 0) Exponent = -1;	/* disable dot if not needed */
     626:	11 23       	and	r17, r17
     628:	11 f4       	brne	.+4      	; 0x62e <DisplayValue+0x100>
     62a:	88 24       	eor	r8, r8
     62c:	8a 94       	dec	r8
     62e:	6e 01       	movw	r12, r28
     630:	08 94       	sec
     632:	c1 1c       	adc	r12, r1
     634:	d1 1c       	adc	r13, r1
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     636:	00 e0       	ldi	r16, 0x00	; 0
     638:	10 e0       	ldi	r17, 0x00	; 0
  {
    lcd_data(OutBuffer[Index]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
     63a:	99 24       	eor	r9, r9
     63c:	87 fc       	sbrc	r8, 7
     63e:	90 94       	com	r9
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     640:	0d c0       	rjmp	.+26     	; 0x65c <DisplayValue+0x12e>
  {
    lcd_data(OutBuffer[Index]);		/* display char */
     642:	0f 5f       	subi	r16, 0xFF	; 255
     644:	1f 4f       	sbci	r17, 0xFF	; 255
     646:	f6 01       	movw	r30, r12
     648:	81 91       	ld	r24, Z+
     64a:	6f 01       	movw	r12, r30
     64c:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
    Index++;				/* next one */
    if (Index == Exponent) {
     650:	08 15       	cp	r16, r8
     652:	19 05       	cpc	r17, r9
     654:	19 f4       	brne	.+6      	; 0x65c <DisplayValue+0x12e>
      lcd_data('.');			/* display dot */
     656:	8e e2       	ldi	r24, 0x2E	; 46
     658:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
  /* adjust position to array or disable dot if set to 0 */
//  Exponent--;

  /* display value and add dot if requested */
  Index = 0;
  while (Index < Length)		/* loop through string */
     65c:	02 15       	cp	r16, r2
     65e:	88 f3       	brcs	.-30     	; 0x642 <DisplayValue+0x114>
      lcd_data('.');			/* display dot */
    }
  }

  /* display prefix and unit */
  if (Prefix != 0) lcd_data(Prefix);
     660:	bb 20       	and	r11, r11
     662:	19 f0       	breq	.+6      	; 0x66a <DisplayValue+0x13c>
     664:	8b 2d       	mov	r24, r11
     666:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
  if (Unit) lcd_data(Unit);
     66a:	77 20       	and	r7, r7
     66c:	19 f0       	breq	.+6      	; 0x674 <DisplayValue+0x146>
     66e:	87 2d       	mov	r24, r7
     670:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
}
     674:	2f 96       	adiw	r28, 0x0f	; 15
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	f8 94       	cli
     67a:	de bf       	out	0x3e, r29	; 62
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	cd bf       	out	0x3d, r28	; 61
     680:	cf 91       	pop	r28
     682:	df 91       	pop	r29
     684:	1f 91       	pop	r17
     686:	0f 91       	pop	r16
     688:	ff 90       	pop	r15
     68a:	ef 90       	pop	r14
     68c:	df 90       	pop	r13
     68e:	cf 90       	pop	r12
     690:	bf 90       	pop	r11
     692:	af 90       	pop	r10
     694:	9f 90       	pop	r9
     696:	8f 90       	pop	r8
     698:	7f 90       	pop	r7
     69a:	5f 90       	pop	r5
     69c:	4f 90       	pop	r4
     69e:	3f 90       	pop	r3
     6a0:	2f 90       	pop	r2
     6a2:	08 95       	ret

000006a4 <RvalOut>:
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
      lcd_space();
   }
}

void RvalOut(uint8_t ii) {	
     6a4:	0f 93       	push	r16
   // output of resistor value
#if FLASHEND > 0x1fff
   uint16_t rr;
   if ((resis[ii].rx < 100) && (resis[0].lx == 0)) {
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	fc 01       	movw	r30, r24
     6aa:	ee 0f       	add	r30, r30
     6ac:	ff 1f       	adc	r31, r31
     6ae:	e8 0f       	add	r30, r24
     6b0:	f9 1f       	adc	r31, r25
     6b2:	ee 0f       	add	r30, r30
     6b4:	ff 1f       	adc	r31, r31
     6b6:	ee 0f       	add	r30, r30
     6b8:	ff 1f       	adc	r31, r31
     6ba:	e8 5e       	subi	r30, 0xE8	; 232
     6bc:	fe 4f       	sbci	r31, 0xFE	; 254
     6be:	60 81       	ld	r22, Z
     6c0:	71 81       	ldd	r23, Z+1	; 0x01
     6c2:	82 81       	ldd	r24, Z+2	; 0x02
     6c4:	93 81       	ldd	r25, Z+3	; 0x03
     6c6:	64 36       	cpi	r22, 0x64	; 100
     6c8:	71 05       	cpc	r23, r1
     6ca:	81 05       	cpc	r24, r1
     6cc:	91 05       	cpc	r25, r1
     6ce:	c0 f4       	brcc	.+48     	; 0x700 <RvalOut+0x5c>
     6d0:	20 91 1c 01 	lds	r18, 0x011C
     6d4:	30 91 1d 01 	lds	r19, 0x011D
     6d8:	40 91 1e 01 	lds	r20, 0x011E
     6dc:	50 91 1f 01 	lds	r21, 0x011F
     6e0:	21 15       	cp	r18, r1
     6e2:	31 05       	cpc	r19, r1
     6e4:	41 05       	cpc	r20, r1
     6e6:	51 05       	cpc	r21, r1
     6e8:	59 f4       	brne	.+22     	; 0x700 <RvalOut+0x5c>
      rr = GetESR(resis[ii].ra,resis[ii].rb);
     6ea:	81 85       	ldd	r24, Z+9	; 0x09
     6ec:	62 85       	ldd	r22, Z+10	; 0x0a
     6ee:	0e 94 06 1b 	call	0x360c	; 0x360c <GetESR>
      DisplayValue(rr,-2,LCD_CHAR_OMEGA,3);
     6f2:	bc 01       	movw	r22, r24
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	4e ef       	ldi	r20, 0xFE	; 254
     6fa:	24 ef       	ldi	r18, 0xF4	; 244
     6fc:	03 e0       	ldi	r16, 0x03	; 3
     6fe:	03 c0       	rjmp	.+6      	; 0x706 <RvalOut+0x62>
   } else {
      DisplayValue(resis[ii].rx,-1,LCD_CHAR_OMEGA,4);
     700:	4f ef       	ldi	r20, 0xFF	; 255
     702:	24 ef       	ldi	r18, 0xF4	; 244
     704:	04 e0       	ldi	r16, 0x04	; 4
     706:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
   }
#else
   DisplayValue(resis[ii].rx,-1,LCD_CHAR_OMEGA,4);
#endif
   lcd_space();
     70a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
 }
     70e:	0f 91       	pop	r16
     710:	08 95       	ret

00000712 <mVAusgabe>:
   lcd_line2(); 				//2. row
   lcd_fix_string(Uf_str);			//"Uf="
   mVAusgabe(bcdnum >> 4);
   mVAusgabe(bcdnum & 0x0f);
}
void mVAusgabe(uint8_t nn) {
     712:	0f 93       	push	r16
   if (nn < 3) {
     714:	83 30       	cpi	r24, 0x03	; 3
     716:	98 f4       	brcc	.+38     	; 0x73e <mVAusgabe+0x2c>
      // Output in mV units
      DisplayValue(diodes[nn].Voltage,-3,'V',3);
     718:	e8 2f       	mov	r30, r24
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	ee 0f       	add	r30, r30
     71e:	ff 1f       	adc	r31, r31
     720:	ee 0f       	add	r30, r30
     722:	ff 1f       	adc	r31, r31
     724:	e8 58       	subi	r30, 0x88	; 136
     726:	fe 4f       	sbci	r31, 0xFE	; 254
     728:	62 81       	ldd	r22, Z+2	; 0x02
     72a:	73 81       	ldd	r23, Z+3	; 0x03
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	4d ef       	ldi	r20, 0xFD	; 253
     732:	26 e5       	ldi	r18, 0x56	; 86
     734:	03 e0       	ldi	r16, 0x03	; 3
     736:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
      lcd_space();
     73a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
   }
}
     73e:	0f 91       	pop	r16
     740:	08 95       	ret

00000742 <UfAusgabe>:
// output of flux voltage for 1-2 diodes in row 2
// bcdnum = Numbers of both Diodes:
// higher 4 Bit  number of first Diode
// lower 4 Bit  number of second Diode (Structure diodes[nn])
// if number >= 3  no output is done
void UfAusgabe(uint8_t bcdnum) {
     742:	1f 93       	push	r17
     744:	18 2f       	mov	r17, r24

   lcd_line2(); 				//2. row
     746:	80 ec       	ldi	r24, 0xC0	; 192
     748:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
   lcd_fix_string(Uf_str);			//"Uf="
     74c:	8e e0       	ldi	r24, 0x0E	; 14
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
   mVAusgabe(bcdnum >> 4);
     754:	81 2f       	mov	r24, r17
     756:	82 95       	swap	r24
     758:	8f 70       	andi	r24, 0x0F	; 15
     75a:	0e 94 89 03 	call	0x712	; 0x712 <mVAusgabe>
   mVAusgabe(bcdnum & 0x0f);
     75e:	81 2f       	mov	r24, r17
     760:	8f 70       	andi	r24, 0x0F	; 15
     762:	0e 94 89 03 	call	0x712	; 0x712 <mVAusgabe>
}
     766:	1f 91       	pop	r17
     768:	08 95       	ret

0000076a <sleep_5ms>:
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
      pause = 0;
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     76a:	42 e0       	ldi	r20, 0x02	; 2
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     76c:	1c c0       	rjmp	.+56     	; 0x7a6 <sleep_5ms+0x3c>
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     76e:	82 30       	cpi	r24, 0x02	; 2
     770:	91 05       	cpc	r25, r1
     772:	18 f0       	brcs	.+6      	; 0x77a <sleep_5ms+0x10>
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
      pause -= 2;
     774:	02 97       	sbiw	r24, 0x02	; 2
  {
 #if 3000 > RESTART_DELAY_US
   if (pause > 1)
     {
      // Startup time is too long with 1MHz Clock!!!!
      t2_offset =  (10000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 10ms above the actual counter */
     776:	3e e3       	ldi	r19, 0x3E	; 62
     778:	03 c0       	rjmp	.+6      	; 0x780 <sleep_5ms+0x16>
      pause -= 2;
     } else {
      t2_offset =  (5000 - RESTART_DELAY_US) / T2_PERIOD;	/* set to 5ms above the actual counter */
     77a:	37 e1       	ldi	r19, 0x17	; 23
      pause = 0;
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e0       	ldi	r25, 0x00	; 0
     }
   
   OCR2A = TCNT2 + t2_offset;	/* set the compare value */
     780:	20 91 b2 00 	lds	r18, 0x00B2
     784:	23 0f       	add	r18, r19
     786:	20 93 b3 00 	sts	0x00B3, r18
   TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     78a:	40 93 70 00 	sts	0x0070, r20
   set_sleep_mode(SLEEP_MODE_PWR_SAVE);
     78e:	23 b7       	in	r18, 0x33	; 51
     790:	21 7f       	andi	r18, 0xF1	; 241
     792:	26 60       	ori	r18, 0x06	; 6
     794:	23 bf       	out	0x33, r18	; 51
//   set_sleep_mode(SLEEP_MODE_IDLE);
   sleep_mode();
     796:	23 b7       	in	r18, 0x33	; 51
     798:	21 60       	ori	r18, 0x01	; 1
     79a:	23 bf       	out	0x33, r18	; 51
     79c:	88 95       	sleep
     79e:	23 b7       	in	r18, 0x33	; 51
     7a0:	2e 7f       	andi	r18, 0xFE	; 254
     7a2:	23 bf       	out	0x33, r18	; 51
// wake up after output compare match interrupt
 #else
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
     7a4:	a8 95       	wdr
// pause is the delay in 5ms units
uint8_t t2_offset;
#define RESTART_DELAY_US (RESTART_DELAY_TICS/(F_CPU/1000000UL))
// for 8 MHz crystal the Restart delay is 16384/8 = 2048us

while (pause > 0)
     7a6:	00 97       	sbiw	r24, 0x00	; 0
     7a8:	11 f7       	brne	.-60     	; 0x76e <sleep_5ms+0x4>
   // restart delay ist too long, use normal delay of 5ms
   wait5ms();
 #endif
   wdt_reset();
  }
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
     7aa:	10 92 70 00 	sts	0x0070, r1
}
     7ae:	08 95       	ret

000007b0 <ChargePin10ms>:
 }

//******************************************************************
#include "CheckPins.c"

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
     7b0:	1f 93       	push	r17
     7b2:	18 2f       	mov	r17, r24
   //Will be used by discharge of MOSFET Gates or to load big capacities.
   //Parameters:
   //PinToCharge: specifies the pin as mask for R-Port
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
     7b4:	60 ff       	sbrs	r22, 0
     7b6:	03 c0       	rjmp	.+6      	; 0x7be <ChargePin10ms+0xe>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
     7b8:	85 b1       	in	r24, 0x05	; 5
     7ba:	81 2b       	or	r24, r17
     7bc:	03 c0       	rjmp	.+6      	; 0x7c4 <ChargePin10ms+0x14>
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
     7be:	95 b1       	in	r25, 0x05	; 5
     7c0:	80 95       	com	r24
     7c2:	89 23       	and	r24, r25
     7c4:	85 b9       	out	0x05, r24	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
     7c6:	84 b1       	in	r24, 0x04	; 4
     7c8:	81 2b       	or	r24, r17
     7ca:	84 b9       	out	0x04, r24	; 4
   wait_about10ms();			// wait about 10ms
     7cc:	82 e0       	ldi	r24, 0x02	; 2
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
     7d4:	84 b1       	in	r24, 0x04	; 4
     7d6:	10 95       	com	r17
     7d8:	81 23       	and	r24, r17
     7da:	84 b9       	out	0x04, r24	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
     7dc:	85 b1       	in	r24, 0x05	; 5
     7de:	81 23       	and	r24, r17
     7e0:	85 b9       	out	0x05, r24	; 5
}
     7e2:	1f 91       	pop	r17
     7e4:	08 95       	ret

000007e6 <CheckPins>:
//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
     7e6:	2f 92       	push	r2
     7e8:	3f 92       	push	r3
     7ea:	4f 92       	push	r4
     7ec:	5f 92       	push	r5
     7ee:	6f 92       	push	r6
     7f0:	7f 92       	push	r7
     7f2:	8f 92       	push	r8
     7f4:	9f 92       	push	r9
     7f6:	af 92       	push	r10
     7f8:	bf 92       	push	r11
     7fa:	cf 92       	push	r12
     7fc:	df 92       	push	r13
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	df 93       	push	r29
     808:	cf 93       	push	r28
     80a:	cd b7       	in	r28, 0x3d	; 61
     80c:	de b7       	in	r29, 0x3e	; 62
     80e:	2f 97       	sbiw	r28, 0x0f	; 15
     810:	0f b6       	in	r0, 0x3f	; 63
     812:	f8 94       	cli
     814:	de bf       	out	0x3e, r29	; 62
     816:	0f be       	out	0x3f, r0	; 63
     818:	cd bf       	out	0x3d, r28	; 61
     81a:	18 2f       	mov	r17, r24
     81c:	76 2e       	mov	r7, r22
     81e:	64 2e       	mov	r6, r20
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
     820:	a8 95       	wdr
//  #define RR680MI resis680mi
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// instruction for LowPin R_L
     822:	86 2f       	mov	r24, r22
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	fc 01       	movw	r30, r24
     828:	e6 5f       	subi	r30, 0xF6	; 246
     82a:	fe 4f       	sbci	r31, 0xFE	; 254
     82c:	24 91       	lpm	r18, Z+
     82e:	2a 83       	std	Y+2, r18	; 0x02
  LoPinRH = LoPinRL + LoPinRL;				// instruction for LowPin R_H
  TriPinRL = pgm_read_byte(&PinRLtab[TristatePin]);	// instruction for TristatePin R_L
     830:	e4 2f       	mov	r30, r20
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	e6 5f       	subi	r30, 0xF6	; 246
     836:	fe 4f       	sbci	r31, 0xFE	; 254
     838:	04 91       	lpm	r16, Z+
  TriPinRH = TriPinRL + TriPinRL;			// instruction for TristatePin R_H
     83a:	30 2f       	mov	r19, r16
     83c:	33 0f       	add	r19, r19
     83e:	3b 83       	std	Y+3, r19	; 0x03
  HiPinRL = pgm_read_byte(&PinRLtab[HighPin]);		// instruction for HighPin R_L
     840:	21 2f       	mov	r18, r17
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	f9 01       	movw	r30, r18
     846:	e6 5f       	subi	r30, 0xF6	; 246
     848:	fe 4f       	sbci	r31, 0xFE	; 254
     84a:	c4 90       	lpm	r12, Z+
  HiPinRH = HiPinRL + HiPinRL;				// instruction for HighPin R_H
     84c:	4c 2d       	mov	r20, r12
     84e:	44 0f       	add	r20, r20
     850:	4c 83       	std	Y+4, r20	; 0x04

  HiADCp = pgm_read_byte(&PinADCtab[HighPin]);		// instruction for ADC High-Pin 
     852:	23 5f       	subi	r18, 0xF3	; 243
     854:	3e 4f       	sbci	r19, 0xFE	; 254
     856:	f9 01       	movw	r30, r18
     858:	d4 90       	lpm	r13, Z+
  LoADCp = pgm_read_byte(&PinADCtab[LowPin]);		// instruction for ADC Low-Pin
     85a:	83 5f       	subi	r24, 0xF3	; 243
     85c:	9e 4f       	sbci	r25, 0xFE	; 254
     85e:	fc 01       	movw	r30, r24
     860:	f4 91       	lpm	r31, Z+
  HiADCm = HiADCp | TXD_MSK;
     862:	28 e0       	ldi	r18, 0x08	; 8
     864:	d2 2a       	or	r13, r18
  HiADCp |= TXD_VAL;
  LoADCm = LoADCp | TXD_MSK;
     866:	f8 60       	ori	r31, 0x08	; 8
     868:	f9 83       	std	Y+1, r31	; 0x01
  LoADCp |= TXD_VAL;

  //setting of Pins 
  R_PORT = 0;				//resistor-Port outputs to 0
     86a:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//Low-Pin to output and across R_L to GND
     86c:	3a 81       	ldd	r19, Y+2	; 0x02
     86e:	34 b9       	out	0x04, r19	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
     870:	d7 b8       	out	0x07, r13	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
     872:	d8 b8       	out	0x08, r13	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  ChargePin10ms(TriPinRL,0);		//discharge for N-Kanal
     874:	80 2f       	mov	r24, r16
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ChargePin10ms>
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin 
     87c:	87 2d       	mov	r24, r7
     87e:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
     882:	9e 83       	std	Y+6, r25	; 0x06
     884:	8d 83       	std	Y+5, r24	; 0x05
  if(adc.lp_otr >= 977) {		//no current now? 
     886:	43 e0       	ldi	r20, 0x03	; 3
     888:	81 3d       	cpi	r24, 0xD1	; 209
     88a:	94 07       	cpc	r25, r20
     88c:	48 f0       	brcs	.+18     	; 0x8a0 <CheckPins+0xba>
     ChargePin10ms(TriPinRL,1);	 	//else: discharge for P-channel (Gate to VCC)
     88e:	80 2f       	mov	r24, r16
     890:	61 e0       	ldi	r22, 0x01	; 1
     892:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ChargePin10ms>
     adc.lp_otr = ReadADC(LowPin);	//read voltage of Low-Pin again
     896:	87 2d       	mov	r24, r7
     898:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
     89c:	9e 83       	std	Y+6, r25	; 0x06
     89e:	8d 83       	std	Y+5, r24	; 0x05
  lcd_clear_line();
  lcd_line2();
#endif

//  if(adc.lp_otr > 92) {  //there is some current without TristatePin current 
  if(adc.lp_otr > 455) {  //there is more than 650uA current without TristatePin current 
     8a0:	8d 81       	ldd	r24, Y+5	; 0x05
     8a2:	9e 81       	ldd	r25, Y+6	; 0x06
     8a4:	a1 e0       	ldi	r26, 0x01	; 1
     8a6:	88 3c       	cpi	r24, 0xC8	; 200
     8a8:	9a 07       	cpc	r25, r26
     8aa:	08 f4       	brcc	.+2      	; 0x8ae <CheckPins+0xc8>
     8ac:	b4 c0       	rjmp	.+360    	; 0xa16 <CheckPins+0x230>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test if N-JFET or if self-conducting N-MOSFET
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
     8ae:	8b 81       	ldd	r24, Y+3	; 0x03
     8b0:	ba 81       	ldd	r27, Y+2	; 0x02
     8b2:	8b 2b       	or	r24, r27
     8b4:	84 b9       	out	0x04, r24	; 4
     adc.lp1 = W20msReadADC(LowPin);	//measure voltage at the assumed Source 
     8b6:	87 2d       	mov	r24, r7
     8b8:	0e 94 94 1a 	call	0x3528	; 0x3528 <W20msReadADC>
     8bc:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     8be:	86 2d       	mov	r24, r6
     8c0:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
     8c4:	7c 01       	movw	r14, r24
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
     8c6:	eb 81       	ldd	r30, Y+3	; 0x03
     8c8:	e5 b9       	out	0x05, r30	; 5
     adc.lp2 = W20msReadADC(LowPin);	//measure voltage at the assumed Source again
     8ca:	87 2d       	mov	r24, r7
     8cc:	0e 94 94 1a 	call	0x3528	; 0x3528 <W20msReadADC>
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+488)) {
     8d0:	95 01       	movw	r18, r10
     8d2:	28 51       	subi	r18, 0x18	; 24
     8d4:	3e 4f       	sbci	r19, 0xFE	; 254
     8d6:	28 17       	cp	r18, r24
     8d8:	39 07       	cpc	r19, r25
     8da:	08 f0       	brcs	.+2      	; 0x8de <CheckPins+0xf8>
     8dc:	45 c0       	rjmp	.+138    	; 0x968 <CheckPins+0x182>
        if (PartFound != PART_FET) {
     8de:	80 91 07 01 	lds	r24, 0x0107
     8e2:	83 30       	cpi	r24, 0x03	; 3
     8e4:	09 f4       	brne	.+2      	; 0x8e8 <CheckPins+0x102>
     8e6:	40 c0       	rjmp	.+128    	; 0x968 <CheckPins+0x182>
           //measure voltage at the  Gate, differ between MOSFET and JFET
           ADC_PORT = TXD_VAL;
     8e8:	88 e0       	ldi	r24, 0x08	; 8
     8ea:	88 b9       	out	0x08, r24	; 8
           ADC_DDR = LoADCm;	//Low-Pin fix to GND
     8ec:	f9 81       	ldd	r31, Y+1	; 0x01
     8ee:	f7 b9       	out	0x07, r31	; 7
           R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     8f0:	8b 81       	ldd	r24, Y+3	; 0x03
     8f2:	8c 29       	or	r24, r12
     8f4:	84 b9       	out	0x04, r24	; 4
           R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
     8f6:	85 b9       	out	0x05, r24	; 5
           adc.lp2 = W20msReadADC(TristatePin); //read voltage of assumed Gate 
     8f8:	86 2d       	mov	r24, r6
     8fa:	0e 94 94 1a 	call	0x3528	; 0x3528 <W20msReadADC>
           if(adc.lp2>3911) {  //MOSFET
     8fe:	2f e0       	ldi	r18, 0x0F	; 15
     900:	88 34       	cpi	r24, 0x48	; 72
     902:	92 07       	cpc	r25, r18
     904:	28 f0       	brcs	.+10     	; 0x910 <CheckPins+0x12a>
              PartFound = PART_FET;	//N-Kanal-MOSFET
     906:	83 e0       	ldi	r24, 0x03	; 3
     908:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_N_D_MOS; //Depletion-MOSFET
     90c:	84 e0       	ldi	r24, 0x04	; 4
     90e:	04 c0       	rjmp	.+8      	; 0x918 <CheckPins+0x132>
           } else {  //JFET (pn-passage between Gate and Source is conducting )
              PartFound = PART_FET;	//N-Kanal-JFET
     910:	83 e0       	ldi	r24, 0x03	; 3
     912:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_N_JFET;
     916:	86 e0       	ldi	r24, 0x06	; 6
     918:	80 93 06 01 	sts	0x0106, r24
           lcd_data('N');
           lcd_data('J');
#endif
//         if ((PartReady == 0) || (adc.lp1 > trans.uBE[0])) 
//         there is no way to find out the right Source / Drain
           trans.uBE[0] = adc.lp1;
     91c:	b0 92 58 01 	sts	0x0158, r11
     920:	a0 92 57 01 	sts	0x0157, r10
           gthvoltage = adc.lp1 - adc.tp1;	//voltage GS (Source - Gate)
     924:	c5 01       	movw	r24, r10
     926:	8e 19       	sub	r24, r14
     928:	9f 09       	sbc	r25, r15
     92a:	90 93 60 01 	sts	0x0160, r25
     92e:	80 93 5f 01 	sts	0x015F, r24
           trans.uBE[1] = (unsigned int)(((unsigned long)adc.lp1 * 1000) / RR680MI); // Id 0.01mA
     932:	b5 01       	movw	r22, r10
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	28 ee       	ldi	r18, 0xE8	; 232
     93a:	33 e0       	ldi	r19, 0x03	; 3
     93c:	40 e0       	ldi	r20, 0x00	; 0
     93e:	50 e0       	ldi	r21, 0x00	; 0
     940:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
     944:	20 91 02 01 	lds	r18, 0x0102
     948:	30 91 03 01 	lds	r19, 0x0103
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
     954:	30 93 5a 01 	sts	0x015A, r19
     958:	20 93 59 01 	sts	0x0159, r18
           trans.b = TristatePin;		//save Pin numbers found for this FET
     95c:	60 92 5b 01 	sts	0x015B, r6
           trans.c = HighPin;
     960:	10 93 5c 01 	sts	0x015C, r17
           trans.e = LowPin;
     964:	70 92 5d 01 	sts	0x015D, r7
        }
     }

     ADC_PORT = TXD_VAL;		// direct outputs to GND
     968:	88 e0       	ldi	r24, 0x08	; 8
     96a:	88 b9       	out	0x08, r24	; 8

     //Test, if P-JFET or if self-conducting P-MOSFET
     ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
     96c:	39 81       	ldd	r19, Y+1	; 0x01
     96e:	37 b9       	out	0x07, r19	; 7
				//R_H for Tristate-Pin (assumed Gate) is already switched to VCC
     R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
     970:	8b 81       	ldd	r24, Y+3	; 0x03
     972:	8c 29       	or	r24, r12
     974:	84 b9       	out	0x04, r24	; 4
     R_PORT = TriPinRH | HiPinRL;	//High-Pin across R_L to Vcc
     976:	85 b9       	out	0x05, r24	; 5
     adc.hp1 = W20msReadADC(HighPin);	//measure voltage at assumed Source 
     978:	81 2f       	mov	r24, r17
     97a:	0e 94 94 1a 	call	0x3528	; 0x3528 <W20msReadADC>
     97e:	5c 01       	movw	r10, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
     980:	86 2d       	mov	r24, r6
     982:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
     986:	7c 01       	movw	r14, r24
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
     988:	c5 b8       	out	0x05, r12	; 5
     adc.hp2 = W20msReadADC(HighPin);	//read voltage at assumed Source again
     98a:	81 2f       	mov	r24, r17
     98c:	0e 94 94 1a 	call	0x3528	; 0x3528 <W20msReadADC>
     //if it is a self-conducting P_MOSFET or P-JFET , then must be:  adc.hp1 > adc.hp2 
     if(adc.hp1>(adc.hp2+488)) {
     990:	88 51       	subi	r24, 0x18	; 24
     992:	9e 4f       	sbci	r25, 0xFE	; 254
     994:	8a 15       	cp	r24, r10
     996:	9b 05       	cpc	r25, r11
     998:	f0 f5       	brcc	.+124    	; 0xa16 <CheckPins+0x230>
        if (PartFound != PART_FET) {
     99a:	80 91 07 01 	lds	r24, 0x0107
     99e:	83 30       	cpi	r24, 0x03	; 3
     9a0:	d1 f1       	breq	.+116    	; 0xa16 <CheckPins+0x230>
           //read voltage at the Gate , to differ between MOSFET and JFET
           ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
     9a2:	d8 b8       	out	0x08, r13	; 8
           ADC_DDR = HiADCm;	//switch High-Pin to output
     9a4:	d7 b8       	out	0x07, r13	; 7
           adc.tp2 = W20msReadADC(TristatePin); //read voltage at the assumed Gate 
     9a6:	86 2d       	mov	r24, r6
     9a8:	0e 94 94 1a 	call	0x3528	; 0x3528 <W20msReadADC>
           if(adc.tp2<977) { 		//MOSFET
     9ac:	43 e0       	ldi	r20, 0x03	; 3
     9ae:	81 3d       	cpi	r24, 0xD1	; 209
     9b0:	94 07       	cpc	r25, r20
     9b2:	28 f4       	brcc	.+10     	; 0x9be <CheckPins+0x1d8>
              PartFound = PART_FET;	//P-Kanal-MOSFET
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_P_D_MOS; //Depletion-MOSFET
     9ba:	85 e0       	ldi	r24, 0x05	; 5
     9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <CheckPins+0x1e0>
           } else { 			//JFET (pn-passage between Gate and Source is conducting)
              PartFound = PART_FET;	//P-Kanal-JFET
     9be:	83 e0       	ldi	r24, 0x03	; 3
     9c0:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_P_JFET;
     9c4:	87 e0       	ldi	r24, 0x07	; 7
     9c6:	80 93 06 01 	sts	0x0106, r24
           }
#if DebugOut == 5
           lcd_data('P');
           lcd_data('J');
#endif
           gthvoltage = adc.tp1 - adc.hp1;		//voltage GS (Gate - Source)
     9ca:	ea 18       	sub	r14, r10
     9cc:	fb 08       	sbc	r15, r11
     9ce:	f0 92 60 01 	sts	0x0160, r15
     9d2:	e0 92 5f 01 	sts	0x015F, r14
           trans.uBE[1] = (unsigned int)(((unsigned long)(ADCconfig.U_AVCC - adc.hp1) * 1000) / RR680PL); // Id 0.01mA
     9d6:	60 91 40 01 	lds	r22, 0x0140
     9da:	70 91 41 01 	lds	r23, 0x0141
     9de:	6a 19       	sub	r22, r10
     9e0:	7b 09       	sbc	r23, r11
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	28 ee       	ldi	r18, 0xE8	; 232
     9e8:	33 e0       	ldi	r19, 0x03	; 3
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
     9f2:	20 91 08 01 	lds	r18, 0x0108
     9f6:	30 91 09 01 	lds	r19, 0x0109
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
     a02:	30 93 5a 01 	sts	0x015A, r19
     a06:	20 93 59 01 	sts	0x0159, r18
           trans.b = TristatePin;		//save Pin numbers found for this FET
     a0a:	60 92 5b 01 	sts	0x015B, r6
           trans.c = LowPin;
     a0e:	70 92 5c 01 	sts	0x015C, r7
           trans.e = HighPin;
     a12:	10 93 5d 01 	sts	0x015D, r17
  } // end component has current without TristatePin signal


#ifdef COMMON_COLLECTOR
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
     a16:	88 e0       	ldi	r24, 0x08	; 8
     a18:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;			// Collector direct to GND
     a1a:	89 81       	ldd	r24, Y+1	; 0x01
     a1c:	87 b9       	out	0x07, r24	; 7
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
     a1e:	c5 b8       	out	0x05, r12	; 5
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
     a20:	9c 2d       	mov	r25, r12
     a22:	90 2b       	or	r25, r16
     a24:	99 87       	std	Y+9, r25	; 0x09
     a26:	94 b9       	out	0x04, r25	; 4
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     a28:	80 90 40 01 	lds	r8, 0x0140
     a2c:	90 90 41 01 	lds	r9, 0x0141
     a30:	81 2f       	mov	r24, r17
     a32:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
     a36:	5c 01       	movw	r10, r24
  adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor
     a38:	86 2d       	mov	r24, r6
     a3a:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
     a3e:	7c 01       	movw	r14, r24

  if (adc.tp1 < 10) {
     a40:	8a 30       	cpi	r24, 0x0A	; 10
     a42:	91 05       	cpc	r25, r1
     a44:	98 f5       	brcc	.+102    	; 0xaac <CheckPins+0x2c6>
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     a46:	8b 81       	ldd	r24, Y+3	; 0x03
     a48:	8c 29       	or	r24, r12
     a4a:	84 b9       	out	0x04, r24	; 4
     adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);
     a4c:	e0 91 40 01 	lds	r30, 0x0140
     a50:	f0 91 41 01 	lds	r31, 0x0141
     a54:	fd 87       	std	Y+13, r31	; 0x0d
     a56:	ec 87       	std	Y+12, r30	; 0x0c
     a58:	81 2f       	mov	r24, r17
     a5a:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
     a5e:	2c 85       	ldd	r18, Y+12	; 0x0c
     a60:	3d 85       	ldd	r19, Y+13	; 0x0d
     a62:	28 1b       	sub	r18, r24
     a64:	39 0b       	sbc	r19, r25
     a66:	3d 87       	std	Y+13, r19	; 0x0d
     a68:	2c 87       	std	Y+12, r18	; 0x0c
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
     a6a:	86 2d       	mov	r24, r6
     a6c:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
     a70:	7c 01       	movw	r14, r24
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     a72:	8c 85       	ldd	r24, Y+12	; 0x0c
     a74:	9d 85       	ldd	r25, Y+13	; 0x0d
     a76:	4c 01       	movw	r8, r24
     a78:	aa 24       	eor	r10, r10
     a7a:	bb 24       	eor	r11, r11
     a7c:	20 91 08 01 	lds	r18, 0x0108
     a80:	30 91 09 01 	lds	r19, 0x0109
     a84:	40 e0       	ldi	r20, 0x00	; 0
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	60 e6       	ldi	r22, 0x60	; 96
     a8a:	77 eb       	ldi	r23, 0xB7	; 183
     a8c:	87 e4       	ldi	r24, 0x47	; 71
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
     a94:	c5 01       	movw	r24, r10
     a96:	b4 01       	movw	r22, r8
     a98:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
     a9c:	97 01       	movw	r18, r14
     a9e:	40 e0       	ldi	r20, 0x00	; 0
     aa0:	50 e0       	ldi	r21, 0x00	; 0
  if (adc.tp1 < 10) {
     R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
     adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);
     adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
 #ifdef LONG_HFE
     c_hfe = ((unsigned long)adc.hp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     aa2:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
     aa6:	49 01       	movw	r8, r18
     aa8:	5a 01       	movw	r10, r20
     aaa:	0e c0       	rjmp	.+28     	; 0xac8 <CheckPins+0x2e2>
  // Test circuit with common collector (Emitter follower) PNP
  ADC_PORT = TXD_VAL;
  ADC_DDR = LoADCm;			// Collector direct to GND
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
  R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
  adc.hp1 = ADCconfig.U_AVCC - W5msReadADC(HighPin);	// voltage at the Emitter resistor
     aac:	d4 01       	movw	r26, r8
     aae:	aa 19       	sub	r26, r10
     ab0:	bb 09       	sbc	r27, r11
     ab2:	bd 87       	std	Y+13, r27	; 0x0d
     ab4:	ac 87       	std	Y+12, r26	; 0x0c
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
 #else
     c_hfe = ((adc.hp1 / ((RR680PL+500)/1000)) * (R_H_VAL/500)) / (adc.tp1/500);
 #endif
  } else {
     c_hfe = (unsigned long)((adc.hp1 - adc.tp1) / adc.tp1);
     ab6:	cd 01       	movw	r24, r26
     ab8:	8e 19       	sub	r24, r14
     aba:	9f 09       	sbc	r25, r15
     abc:	b7 01       	movw	r22, r14
     abe:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
     ac2:	4b 01       	movw	r8, r22
     ac4:	aa 24       	eor	r10, r10
     ac6:	bb 24       	eor	r11, r11
  }
#endif

  //set Pins again for circuit with common Emitter PNP
  R_DDR = LoPinRL;		//switch R_L port for Low-Pin to output (GND)
     ac8:	ba 81       	ldd	r27, Y+2	; 0x02
     aca:	b4 b9       	out	0x04, r27	; 4
  R_PORT = 0;			//switch all resistor ports to GND
     acc:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = HiADCm;		//switch High-Pin to output
     ace:	d7 b8       	out	0x07, r13	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
     ad0:	d8 b8       	out	0x08, r13	; 8
  wait_about5ms();
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
  
  if(adc.lp_otr < 977) {
     ada:	ed 81       	ldd	r30, Y+5	; 0x05
     adc:	fe 81       	ldd	r31, Y+6	; 0x06
     ade:	23 e0       	ldi	r18, 0x03	; 3
     ae0:	e1 3d       	cpi	r30, 0xD1	; 209
     ae2:	f2 07       	cpc	r31, r18
     ae4:	08 f0       	brcs	.+2      	; 0xae8 <CheckPins+0x302>
     ae6:	17 c2       	rjmp	.+1070   	; 0xf16 <CheckPins+0x730>
     lcd_testpin(HighPin);
     lcd_space();
     wait_about1s();
#endif
     //Test to PNP
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
     ae8:	2a 80       	ldd	r2, Y+2	; 0x02
     aea:	20 2a       	or	r2, r16
     aec:	24 b8       	out	0x04, r2	; 4
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
     aee:	87 2d       	mov	r24, r7
     af0:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
     if(adc.lp1 > 3422) {
     af4:	3d e0       	ldi	r19, 0x0D	; 13
     af6:	8f 35       	cpi	r24, 0x5F	; 95
     af8:	93 07       	cpc	r25, r19
     afa:	08 f4       	brcc	.+2      	; 0xafe <CheckPins+0x318>
     afc:	9a c0       	rjmp	.+308    	; 0xc32 <CheckPins+0x44c>
        //component has current => PNP-Transistor or equivalent
        //compute current amplification factor in both directions
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
     afe:	4b 80       	ldd	r4, Y+3	; 0x03
     b00:	4a 81       	ldd	r20, Y+2	; 0x02
     b02:	44 2a       	or	r4, r20
     b04:	44 b8       	out	0x04, r4	; 4

        adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
     b06:	87 2d       	mov	r24, r7
     b08:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
     b0c:	98 87       	std	Y+8, r25	; 0x08
     b0e:	8f 83       	std	Y+7, r24	; 0x07
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
     b10:	86 2d       	mov	r24, r6
     b12:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
        //check, if Test is done before 
        if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     b16:	60 91 07 01 	lds	r22, 0x0107
     b1a:	26 2f       	mov	r18, r22
     b1c:	22 50       	subi	r18, 0x02	; 2
     b1e:	22 30       	cpi	r18, 0x02	; 2
     b20:	18 f4       	brcc	.+6      	; 0xb28 <CheckPins+0x342>
           PartReady = 1;
     b22:	21 e0       	ldi	r18, 0x01	; 1
     b24:	20 93 04 01 	sts	0x0104, r18
        //current amplification factor for common  Collector (Emitter follower)
        // c_hFE = (Emitter current - Base current) / Base current
 #ifdef COMMON_EMITTER
        if (c_hfe > trans.hfe[PartReady]) {
 #endif
           trans.hfe[PartReady] = c_hfe;
     b28:	20 91 04 01 	lds	r18, 0x0104
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	f9 01       	movw	r30, r18
     b30:	ee 0f       	add	r30, r30
     b32:	ff 1f       	adc	r31, r31
     b34:	ee 0f       	add	r30, r30
     b36:	ff 1f       	adc	r31, r31
     b38:	e1 5b       	subi	r30, 0xB1	; 177
     b3a:	fe 4f       	sbci	r31, 0xFE	; 254
     b3c:	80 82       	st	Z, r8
     b3e:	91 82       	std	Z+1, r9	; 0x01
     b40:	a2 82       	std	Z+2, r10	; 0x02
     b42:	b3 82       	std	Z+3, r11	; 0x03
           trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.hp1 - adc.tp1;	// Base Emitter Voltage common collector
     b44:	f9 01       	movw	r30, r18
     b46:	ee 0f       	add	r30, r30
     b48:	ff 1f       	adc	r31, r31
     b4a:	e9 5a       	subi	r30, 0xA9	; 169
     b4c:	fe 4f       	sbci	r31, 0xFE	; 254
     b4e:	40 91 40 01 	lds	r20, 0x0140
     b52:	50 91 41 01 	lds	r21, 0x0141
     b56:	ac 85       	ldd	r26, Y+12	; 0x0c
     b58:	bd 85       	ldd	r27, Y+13	; 0x0d
     b5a:	4a 1b       	sub	r20, r26
     b5c:	5b 0b       	sbc	r21, r27
     b5e:	4e 19       	sub	r20, r14
     b60:	5f 09       	sbc	r21, r15
     b62:	51 83       	std	Z+1, r21	; 0x01
     b64:	40 83       	st	Z, r20
        }
 #endif
#endif

 
        if(PartFound != PART_THYRISTOR) {
     b66:	65 30       	cpi	r22, 0x05	; 5
     b68:	09 f4       	brne	.+2      	; 0xb6c <CheckPins+0x386>
     b6a:	63 c0       	rjmp	.+198    	; 0xc32 <CheckPins+0x44c>
           if(adc.tp2 > 977) {
     b6c:	b3 e0       	ldi	r27, 0x03	; 3
     b6e:	82 3d       	cpi	r24, 0xD2	; 210
     b70:	9b 07       	cpc	r25, r27
     b72:	30 f0       	brcs	.+12     	; 0xb80 <CheckPins+0x39a>
              //PNP-Transistor is found (Base voltage moves to VCC)
              PartFound = PART_TRANSISTOR;
     b74:	82 e0       	ldi	r24, 0x02	; 2
     b76:	80 93 07 01 	sts	0x0107, r24
              PartMode = PART_MODE_PNP;
     b7a:	80 93 06 01 	sts	0x0106, r24
     b7e:	53 c0       	rjmp	.+166    	; 0xc26 <CheckPins+0x440>
           } else {
              if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
     b80:	ed 81       	ldd	r30, Y+5	; 0x05
     b82:	fe 81       	ldd	r31, Y+6	; 0x06
     b84:	e1 36       	cpi	r30, 0x61	; 97
     b86:	f1 05       	cpc	r31, r1
     b88:	08 f0       	brcs	.+2      	; 0xb8c <CheckPins+0x3a6>
     b8a:	4d c0       	rjmp	.+154    	; 0xc26 <CheckPins+0x440>
     b8c:	2f 81       	ldd	r18, Y+7	; 0x07
     b8e:	38 85       	ldd	r19, Y+8	; 0x08
     b90:	47 e0       	ldi	r20, 0x07	; 7
     b92:	21 3d       	cpi	r18, 0xD1	; 209
     b94:	34 07       	cpc	r19, r20
     b96:	08 f4       	brcc	.+2      	; 0xb9a <CheckPins+0x3b4>
     b98:	46 c0       	rjmp	.+140    	; 0xc26 <CheckPins+0x440>
                 //is flow voltage low enough in the closed  state?
                 //(since D-Mode-FET would be by mistake detected as E-Mode )
        	 PartFound = PART_FET;		//P-Kanal-MOSFET is found (Basis/Gate moves not to VCC)
     b9a:	83 e0       	ldi	r24, 0x03	; 3
     b9c:	80 93 07 01 	sts	0x0107, r24
        	 PartMode = PART_MODE_P_E_MOS;
     ba0:	80 93 06 01 	sts	0x0106, r24
        	 //measure the Gate threshold voltage
                 //Switching of Drain is monitored with digital input
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
     ba4:	a9 80       	ldd	r10, Y+1	; 0x01
     ba6:	87 e0       	ldi	r24, 0x07	; 7
     ba8:	a8 22       	and	r10, r24
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
     baa:	86 2d       	mov	r24, r6
     bac:	80 64       	ori	r24, 0x40	; 64
     bae:	80 93 7c 00 	sts	0x007C, r24
        	 gthvoltage = 1;			// round up ((1*4)/9)
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	90 93 60 01 	sts	0x0160, r25
     bba:	80 93 5f 01 	sts	0x015F, r24
     bbe:	3b e0       	ldi	r19, 0x0B	; 11
     bc0:	e3 2e       	mov	r14, r19
        	 for(ii=0;ii<11;ii++) {
        	    wdt_reset();
     bc2:	a8 95       	wdr
        	    ChargePin10ms(TriPinRL,1);
     bc4:	80 2f       	mov	r24, r16
     bc6:	61 e0       	ldi	r22, 0x01	; 1
     bc8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ChargePin10ms>
                    R_DDR = LoPinRL | TriPinRH;		//switch R_H for Tristate-Pin (Basis) to GND
     bcc:	44 b8       	out	0x04, r4	; 4
        	    while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
     bce:	86 b1       	in	r24, 0x06	; 6
     bd0:	8a 21       	and	r24, r10
     bd2:	e9 f3       	breq	.-6      	; 0xbce <CheckPins+0x3e8>
                    			// 1 is detected with more than 2.5V (up to 2.57V) with tests of mega168 and mega328
        	    R_DDR = LoPinRL;
     bd4:	9a 81       	ldd	r25, Y+2	; 0x02
     bd6:	94 b9       	out	0x04, r25	; 4
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
     bd8:	80 91 7a 00 	lds	r24, 0x007A
     bdc:	80 64       	ori	r24, 0x40	; 64
     bde:	80 93 7a 00 	sts	0x007A, r24
        	    while (ADCSRA&(1<<ADSC));		// wait
     be2:	80 91 7a 00 	lds	r24, 0x007A
     be6:	86 fd       	sbrc	r24, 6
     be8:	fc cf       	rjmp	.-8      	; 0xbe2 <CheckPins+0x3fc>
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
     bea:	20 91 78 00 	lds	r18, 0x0078
     bee:	30 91 79 00 	lds	r19, 0x0079
     bf2:	80 91 5f 01 	lds	r24, 0x015F
     bf6:	90 91 60 01 	lds	r25, 0x0160
     bfa:	81 50       	subi	r24, 0x01	; 1
     bfc:	9c 4f       	sbci	r25, 0xFC	; 252
     bfe:	82 1b       	sub	r24, r18
     c00:	93 0b       	sbc	r25, r19
     c02:	90 93 60 01 	sts	0x0160, r25
     c06:	80 93 5f 01 	sts	0x015F, r24
     c0a:	ea 94       	dec	r14
                 // Low level is specified up to 0.3 * VCC
                 // High level is specified above 0.6 * VCC
                 PinMSK = LoADCm & 7;
        	 ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
        	 gthvoltage = 1;			// round up ((1*4)/9)
        	 for(ii=0;ii<11;ii++) {
     c0c:	d1 f6       	brne	.-76     	; 0xbc2 <CheckPins+0x3dc>
        	    R_DDR = LoPinRL;
        	    ADCSRA |= (1<<ADSC);		// Start Conversion
        	    while (ADCSRA&(1<<ADSC));		// wait
      		    gthvoltage += (1023 - ADCW);	// Add Tristatepin-Voltage
                 }
                 gthvoltage *= 4;		// is equal to 44*ADCW
     c0e:	88 0f       	add	r24, r24
     c10:	99 1f       	adc	r25, r25
     c12:	88 0f       	add	r24, r24
     c14:	99 1f       	adc	r25, r25
                 gthvoltage /= 9;		// gives resolution in mV
     c16:	69 e0       	ldi	r22, 0x09	; 9
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
     c1e:	70 93 60 01 	sts	0x0160, r23
     c22:	60 93 5f 01 	sts	0x015F, r22
              }
           }
           trans.b = TristatePin;
     c26:	60 92 5b 01 	sts	0x015B, r6
           trans.c = LowPin;
     c2a:	70 92 5c 01 	sts	0x015C, r7
           trans.e = HighPin;
     c2e:	10 93 5d 01 	sts	0x015D, r17
        }  // end if PartFound != PART_THYRISTOR
    } // end component has current => PNP

#ifdef COMMON_COLLECTOR
    // Low-Pin=RL- HighPin=VCC
    R_DDR = LoPinRL | TriPinRL;
     c32:	24 b8       	out	0x04, r2	; 4
    R_PORT = TriPinRL;			// TriPin=RL+  NPN with common Collector
     c34:	05 b9       	out	0x05, r16	; 5
    adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
     c36:	87 2d       	mov	r24, r7
     c38:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
     c3c:	98 87       	std	Y+8, r25	; 0x08
     c3e:	8f 83       	std	Y+7, r24	; 0x07
    adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     c40:	e0 90 40 01 	lds	r14, 0x0140
     c44:	f0 90 41 01 	lds	r15, 0x0141
     c48:	86 2d       	mov	r24, r6
     c4a:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
     c4e:	e8 1a       	sub	r14, r24
     c50:	f9 0a       	sbc	r15, r25
    if (adc.tp1 < 10) {
     c52:	aa e0       	ldi	r26, 0x0A	; 10
     c54:	ea 16       	cp	r14, r26
     c56:	f1 04       	cpc	r15, r1
     c58:	88 f5       	brcc	.+98     	; 0xcbc <CheckPins+0x4d6>
       R_DDR = LoPinRL | TriPinRH;
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	ba 81       	ldd	r27, Y+2	; 0x02
     c5e:	8b 2b       	or	r24, r27
     c60:	84 b9       	out	0x04, r24	; 4
       R_PORT = TriPinRH;		// Tripin=RH+
     c62:	eb 81       	ldd	r30, Y+3	; 0x03
     c64:	e5 b9       	out	0x05, r30	; 5
       adc.lp1 = W5msReadADC(LowPin);
     c66:	87 2d       	mov	r24, r7
     c68:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
     c6c:	98 87       	std	Y+8, r25	; 0x08
     c6e:	8f 83       	std	Y+7, r24	; 0x07
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
     c70:	e0 90 40 01 	lds	r14, 0x0140
     c74:	f0 90 41 01 	lds	r15, 0x0141
     c78:	86 2d       	mov	r24, r6
     c7a:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
     c7e:	e8 1a       	sub	r14, r24
     c80:	f9 0a       	sbc	r15, r25
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     c82:	2f 81       	ldd	r18, Y+7	; 0x07
     c84:	38 85       	ldd	r19, Y+8	; 0x08
     c86:	49 01       	movw	r8, r18
     c88:	aa 24       	eor	r10, r10
     c8a:	bb 24       	eor	r11, r11
     c8c:	20 91 02 01 	lds	r18, 0x0102
     c90:	30 91 03 01 	lds	r19, 0x0103
     c94:	40 e0       	ldi	r20, 0x00	; 0
     c96:	50 e0       	ldi	r21, 0x00	; 0
     c98:	60 e6       	ldi	r22, 0x60	; 96
     c9a:	77 eb       	ldi	r23, 0xB7	; 183
     c9c:	87 e4       	ldi	r24, 0x47	; 71
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
     ca4:	c5 01       	movw	r24, r10
     ca6:	b4 01       	movw	r22, r8
     ca8:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
     cac:	97 01       	movw	r18, r14
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	50 e0       	ldi	r21, 0x00	; 0
       R_DDR = LoPinRL | TriPinRH;
       R_PORT = TriPinRH;		// Tripin=RH+
       adc.lp1 = W5msReadADC(LowPin);
       adc.tp1 = ADCconfig.U_AVCC - ReadADC(TristatePin);	// voltage at Base resistor
 #ifdef LONG_HFE
       c_hfe = ((unsigned long)adc.lp1 * (unsigned long)(((unsigned long)R_H_VAL * 100) / 
     cb2:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
     cb6:	19 01       	movw	r2, r18
     cb8:	2a 01       	movw	r4, r20
     cba:	0a c0       	rjmp	.+20     	; 0xcd0 <CheckPins+0x4ea>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp1;	
 #else
       c_hfe = ((adc.lp1 / ((RR680MI+500)/1000)) * (R_H_VAL/500)) / (adc.tp2/500);
 #endif
    } else {
       c_hfe = (adc.lp1 - adc.tp1) / adc.tp1;
     cbc:	8f 81       	ldd	r24, Y+7	; 0x07
     cbe:	98 85       	ldd	r25, Y+8	; 0x08
     cc0:	8e 19       	sub	r24, r14
     cc2:	9f 09       	sbc	r25, r15
     cc4:	b7 01       	movw	r22, r14
     cc6:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
     cca:	1b 01       	movw	r2, r22
     ccc:	44 24       	eor	r4, r4
     cce:	55 24       	eor	r5, r5
       lcd_string(utoa(adc.tp1,outval,10));
       wait_about1s();
#endif
#endif
    //Tristate (can be Base) to VCC, Test if NPN
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
     cd0:	39 81       	ldd	r19, Y+1	; 0x01
     cd2:	37 b9       	out	0x07, r19	; 7
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
     cd4:	88 e0       	ldi	r24, 0x08	; 8
     cd6:	88 b9       	out	0x08, r24	; 8
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
     cd8:	49 85       	ldd	r20, Y+9	; 0x09
     cda:	44 b9       	out	0x04, r20	; 4
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
     cdc:	45 b9       	out	0x05, r20	; 5
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
     cde:	81 2f       	mov	r24, r17
     ce0:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
    if(adc.hp1 < 1600) {
     ce4:	a6 e0       	ldi	r26, 0x06	; 6
     ce6:	80 34       	cpi	r24, 0x40	; 64
     ce8:	9a 07       	cpc	r25, r26
     cea:	08 f0       	brcs	.+2      	; 0xcee <CheckPins+0x508>
     cec:	10 c1       	rjmp	.+544    	; 0xf0e <CheckPins+0x728>
       lcd_data('N');
       lcd_testpin(HighPin);
       lcd_space();
       wait_about1s();
#endif
       if(PartReady==1) {
     cee:	80 91 04 01 	lds	r24, 0x0104
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <CheckPins+0x512>
     cf6:	97 c1       	rjmp	.+814    	; 0x1026 <CheckPins+0x840>
          goto widmes;
       }

       //Test auf Thyristor:
       //Gate discharge
       ChargePin10ms(TriPinRL,0);	//Tristate-Pin (Gate) across R_L 10ms to GND
     cf8:	80 2f       	mov	r24, r16
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ChargePin10ms>
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
     d00:	81 2f       	mov	r24, r17
     d02:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
     d06:	5c 01       	movw	r10, r24
					//current should still flow, if not,
					// no Thyristor or holding current to low 
		 	
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
     d08:	15 b8       	out	0x05, r1	; 5
       wait_about5ms();
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
     d12:	c5 b8       	out	0x05, r12	; 5
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
     d14:	81 2f       	mov	r24, r17
     d16:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)) {
     d1a:	b0 e4       	ldi	r27, 0x40	; 64
     d1c:	ab 16       	cp	r10, r27
     d1e:	b6 e0       	ldi	r27, 0x06	; 6
     d20:	bb 06       	cpc	r11, r27
     d22:	08 f0       	brcs	.+2      	; 0xd26 <CheckPins+0x540>
     d24:	47 c0       	rjmp	.+142    	; 0xdb4 <CheckPins+0x5ce>
     d26:	e1 e1       	ldi	r30, 0x11	; 17
     d28:	81 33       	cpi	r24, 0x31	; 49
     d2a:	9e 07       	cpc	r25, r30
     d2c:	08 f4       	brcc	.+2      	; 0xd30 <CheckPins+0x54a>
     d2e:	42 c0       	rjmp	.+132    	; 0xdb4 <CheckPins+0x5ce>
          //if the holding current was switched off the thyristor must be switched off too. 
          //if Thyristor was still swiched on, if gate was switched off => Thyristor
          PartFound = PART_THYRISTOR;
     d30:	85 e0       	ldi	r24, 0x05	; 5
     d32:	80 93 07 01 	sts	0x0107, r24
          //Test if Triac
          R_DDR = 0;
     d36:	14 b8       	out	0x04, r1	; 4
          R_PORT = 0;
     d38:	15 b8       	out	0x05, r1	; 5
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
     d3a:	f9 81       	ldd	r31, Y+1	; 0x01
     d3c:	f8 b9       	out	0x08, r31	; 8
          wait_about5ms();
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
     d46:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) > 244) {
     d48:	81 2f       	mov	r24, r17
     d4a:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
     d4e:	85 3f       	cpi	r24, 0xF5	; 245
     d50:	91 05       	cpc	r25, r1
     d52:	08 f0       	brcs	.+2      	; 0xd56 <CheckPins+0x570>
     d54:	d6 c0       	rjmp	.+428    	; 0xf02 <CheckPins+0x71c>
             goto savenresult;		//measure voltage at the  High-Pin (probably A2); if too high:
                                	//component has current => kein Triac
          }
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
     d56:	29 85       	ldd	r18, Y+9	; 0x09
     d58:	24 b9       	out	0x04, r18	; 4
          if(W5msReadADC(TristatePin) < 977) {
     d5a:	86 2d       	mov	r24, r6
     d5c:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
     d60:	33 e0       	ldi	r19, 0x03	; 3
     d62:	81 3d       	cpi	r24, 0xD1	; 209
     d64:	93 07       	cpc	r25, r19
     d66:	08 f4       	brcc	.+2      	; 0xd6a <CheckPins+0x584>
     d68:	cc c0       	rjmp	.+408    	; 0xf02 <CheckPins+0x71c>
             goto savenresult; 		//measure voltage at the Tristate-Pin (probably Gate) ;
                              		// if to low, abort 
          }
          if(ReadADC(HighPin) < 733) {
     d6a:	81 2f       	mov	r24, r17
     d6c:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
     d70:	42 e0       	ldi	r20, 0x02	; 2
     d72:	8d 3d       	cpi	r24, 0xDD	; 221
     d74:	94 07       	cpc	r25, r20
     d76:	08 f4       	brcc	.+2      	; 0xd7a <CheckPins+0x594>
     d78:	c4 c0       	rjmp	.+392    	; 0xf02 <CheckPins+0x71c>
             goto savenresult; 		//component has no current => no Triac => abort
          }
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
     d7a:	c4 b8       	out	0x04, r12	; 4
          if(W5msReadADC(HighPin) < 733) {
     d7c:	81 2f       	mov	r24, r17
     d7e:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
     d82:	a2 e0       	ldi	r26, 0x02	; 2
     d84:	8d 3d       	cpi	r24, 0xDD	; 221
     d86:	9a 07       	cpc	r25, r26
     d88:	08 f4       	brcc	.+2      	; 0xd8c <CheckPins+0x5a6>
     d8a:	bb c0       	rjmp	.+374    	; 0xf02 <CheckPins+0x71c>
             goto savenresult; 		//component has no current without base current => no Triac => abort
          }
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
     d8c:	c5 b8       	out	0x05, r12	; 5
          wait_about5ms();
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
     d96:	15 b8       	out	0x05, r1	; 5
          if(W5msReadADC(HighPin) > 244) {
     d98:	81 2f       	mov	r24, r17
     d9a:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
     d9e:	85 3f       	cpi	r24, 0xF5	; 245
     da0:	91 05       	cpc	r25, r1
     da2:	08 f0       	brcs	.+2      	; 0xda6 <CheckPins+0x5c0>
     da4:	ae c0       	rjmp	.+348    	; 0xf02 <CheckPins+0x71c>
             goto savenresult;		//measure voltage at the High-Pin (probably A2) ;
                                	//if to high, component is not switched off => no Triac, abort
         }
         PartFound = PART_TRIAC;
     da6:	84 e0       	ldi	r24, 0x04	; 4
     da8:	80 93 07 01 	sts	0x0107, r24
         PartReady = 1;
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	80 93 04 01 	sts	0x0104, r24
         goto savenresult;
     db2:	a7 c0       	rjmp	.+334    	; 0xf02 <CheckPins+0x71c>
        }
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
     db4:	ab 80       	ldd	r10, Y+3	; 0x03
     db6:	ac 28       	or	r10, r12
     db8:	a4 b8       	out	0x04, r10	; 4
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
     dba:	a5 b8       	out	0x05, r10	; 5
      wait_about50ms();
     dbc:	8a e0       	ldi	r24, 0x0A	; 10
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
      adc.hp2 = ADCconfig.U_AVCC - ReadADC(HighPin);	//measure the voltage at the collector resistor 
     dc4:	80 90 40 01 	lds	r8, 0x0140
     dc8:	90 90 41 01 	lds	r9, 0x0141
     dcc:	81 2f       	mov	r24, r17
     dce:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
     dd2:	ac 01       	movw	r20, r24
      adc.tp2 = ADCconfig.U_AVCC - ReadADC(TristatePin);	//measure the voltage at the base resistor 
     dd4:	20 91 40 01 	lds	r18, 0x0140
     dd8:	30 91 41 01 	lds	r19, 0x0141
     ddc:	86 2d       	mov	r24, r6
     dde:	2b 87       	std	Y+11, r18	; 0x0b
     de0:	3a 87       	std	Y+10, r19	; 0x0a
     de2:	4e 87       	std	Y+14, r20	; 0x0e
     de4:	5f 87       	std	Y+15, r21	; 0x0f
     de6:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
     dea:	2b 85       	ldd	r18, Y+11	; 0x0b
     dec:	3a 85       	ldd	r19, Y+10	; 0x0a
     dee:	b9 01       	movw	r22, r18
     df0:	68 1b       	sub	r22, r24
     df2:	79 0b       	sbc	r23, r25
       lcd_space();
       lcd_data('T');
       lcd_data('P');
       lcd_string(utoa(adc.tp2,outval,10));
#endif
      if((PartFound == PART_TRANSISTOR) || (PartFound == PART_FET)) {
     df4:	80 91 07 01 	lds	r24, 0x0107
     df8:	82 50       	subi	r24, 0x02	; 2
     dfa:	4e 85       	ldd	r20, Y+14	; 0x0e
     dfc:	5f 85       	ldd	r21, Y+15	; 0x0f
     dfe:	82 30       	cpi	r24, 0x02	; 2
     e00:	18 f4       	brcc	.+6      	; 0xe08 <CheckPins+0x622>
         PartReady = 1;	//check, if test is already done once
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	80 93 04 01 	sts	0x0104, r24
       //compare current amplification factor for common Collector (Emitter follower)
       // hFE = (Emitterstrom - Basisstrom) / Basisstrom
 #ifdef COMMON_EMITTER
       if (c_hfe >  trans.hfe[PartReady]) {
 #endif
          trans.hfe[PartReady] = c_hfe;
     e08:	80 91 04 01 	lds	r24, 0x0104
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	fc 01       	movw	r30, r24
     e10:	ee 0f       	add	r30, r30
     e12:	ff 1f       	adc	r31, r31
     e14:	ee 0f       	add	r30, r30
     e16:	ff 1f       	adc	r31, r31
     e18:	e1 5b       	subi	r30, 0xB1	; 177
     e1a:	fe 4f       	sbci	r31, 0xFE	; 254
     e1c:	20 82       	st	Z, r2
     e1e:	31 82       	std	Z+1, r3	; 0x01
     e20:	42 82       	std	Z+2, r4	; 0x02
     e22:	53 82       	std	Z+3, r5	; 0x03
          trans.uBE[PartReady] = ADCconfig.U_AVCC - adc.lp1 - adc.tp1;
     e24:	fc 01       	movw	r30, r24
     e26:	ee 0f       	add	r30, r30
     e28:	ff 1f       	adc	r31, r31
     e2a:	e9 5a       	subi	r30, 0xA9	; 169
     e2c:	fe 4f       	sbci	r31, 0xFE	; 254
     e2e:	20 91 40 01 	lds	r18, 0x0140
     e32:	30 91 41 01 	lds	r19, 0x0141
     e36:	8f 81       	ldd	r24, Y+7	; 0x07
     e38:	98 85       	ldd	r25, Y+8	; 0x08
     e3a:	28 1b       	sub	r18, r24
     e3c:	39 0b       	sbc	r19, r25
     e3e:	2e 19       	sub	r18, r14
     e40:	3f 09       	sbc	r19, r15
     e42:	31 83       	std	Z+1, r19	; 0x01
     e44:	20 83       	st	Z, r18
 #ifdef COMMON_EMITTER
       }
 #endif
#endif

      if(adc.tp2 > 2557) {		// Basis-voltage R_H is low enough
     e46:	99 e0       	ldi	r25, 0x09	; 9
     e48:	6e 3f       	cpi	r22, 0xFE	; 254
     e4a:	79 07       	cpc	r23, r25
     e4c:	38 f0       	brcs	.+14     	; 0xe5c <CheckPins+0x676>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	80 93 07 01 	sts	0x0107, r24
         PartMode = PART_MODE_NPN;
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	80 93 06 01 	sts	0x0106, r24
     e5a:	53 c0       	rjmp	.+166    	; 0xf02 <CheckPins+0x71c>
      } else { // Basis has low current
         if((adc.lp_otr < 97) && (adc.hp2 > 3400)) {
     e5c:	ad 81       	ldd	r26, Y+5	; 0x05
     e5e:	be 81       	ldd	r27, Y+6	; 0x06
     e60:	a1 36       	cpi	r26, 0x61	; 97
     e62:	b1 05       	cpc	r27, r1
     e64:	08 f0       	brcs	.+2      	; 0xe68 <CheckPins+0x682>
     e66:	4d c0       	rjmp	.+154    	; 0xf02 <CheckPins+0x71c>
      //Test if NPN Transistor or MOSFET
      // ADC_DDR = LoADCm;	//Low-Pin to output 0V
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
      wait_about50ms();
      adc.hp2 = ADCconfig.U_AVCC - ReadADC(HighPin);	//measure the voltage at the collector resistor 
     e68:	84 1a       	sub	r8, r20
     e6a:	95 0a       	sbc	r9, r21

      if(adc.tp2 > 2557) {		// Basis-voltage R_H is low enough
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
         PartMode = PART_MODE_NPN;
      } else { // Basis has low current
         if((adc.lp_otr < 97) && (adc.hp2 > 3400)) {
     e6c:	b9 e4       	ldi	r27, 0x49	; 73
     e6e:	8b 16       	cp	r8, r27
     e70:	bd e0       	ldi	r27, 0x0D	; 13
     e72:	9b 06       	cpc	r9, r27
     e74:	08 f4       	brcc	.+2      	; 0xe78 <CheckPins+0x692>
     e76:	45 c0       	rjmp	.+138    	; 0xf02 <CheckPins+0x71c>
            //if flow voltage in switched off mode low enough?
            //(since D-Mode-FET will be detected in error as E-Mode )
            PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
     e78:	83 e0       	ldi	r24, 0x03	; 3
     e7a:	80 93 07 01 	sts	0x0107, r24
            PartMode = PART_MODE_N_E_MOS;
     e7e:	82 e0       	ldi	r24, 0x02	; 2
     e80:	80 93 06 01 	sts	0x0106, r24
            wait_about1s();
#endif
            //Switching of Drain is monitored with digital input
            // Low level is specified up to 0.3 * VCC
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
     e84:	f7 e0       	ldi	r31, 0x07	; 7
     e86:	ef 2e       	mov	r14, r31
     e88:	ed 20       	and	r14, r13
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
     e8a:	86 2d       	mov	r24, r6
     e8c:	80 64       	ori	r24, 0x40	; 64
     e8e:	80 93 7c 00 	sts	0x007C, r24
            gthvoltage = 1;			// round up ((1*4)/9)
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	90 93 60 01 	sts	0x0160, r25
     e9a:	80 93 5f 01 	sts	0x015F, r24
     e9e:	eb e0       	ldi	r30, 0x0B	; 11
     ea0:	8e 2e       	mov	r8, r30
            for(ii=0;ii<11;ii++) {
            	wdt_reset();
     ea2:	a8 95       	wdr
            	ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
     ea4:	80 2f       	mov	r24, r16
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ChargePin10ms>
                R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
     eac:	a4 b8       	out	0x04, r10	; 4
                R_PORT = HiPinRL | TriPinRH;
     eae:	a5 b8       	out	0x05, r10	; 5
            	while ((ADC_PIN&PinMSK));	// Wait, until the MOSFET switch and Drain moved to low 
     eb0:	86 b1       	in	r24, 0x06	; 6
     eb2:	8e 21       	and	r24, r14
     eb4:	e9 f7       	brne	.-6      	; 0xeb0 <CheckPins+0x6ca>
                		// 0 is detected with input voltage of 2.12V to 2.24V (tested with mega168 & mega328)
                R_DDR = HiPinRL;		// switch off current
     eb6:	c4 b8       	out	0x04, r12	; 4
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
     eb8:	80 91 7a 00 	lds	r24, 0x007A
     ebc:	80 64       	ori	r24, 0x40	; 64
     ebe:	80 93 7a 00 	sts	0x007A, r24
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
     ec2:	80 91 7a 00 	lds	r24, 0x007A
     ec6:	86 fd       	sbrc	r24, 6
     ec8:	fc cf       	rjmp	.-8      	; 0xec2 <CheckPins+0x6dc>
            	gthvoltage += ADCW;		// add result of ADC
     eca:	80 91 78 00 	lds	r24, 0x0078
     ece:	90 91 79 00 	lds	r25, 0x0079
     ed2:	20 91 5f 01 	lds	r18, 0x015F
     ed6:	30 91 60 01 	lds	r19, 0x0160
     eda:	82 0f       	add	r24, r18
     edc:	93 1f       	adc	r25, r19
     ede:	90 93 60 01 	sts	0x0160, r25
     ee2:	80 93 5f 01 	sts	0x015F, r24
     ee6:	8a 94       	dec	r8
            // High level is specified above 0.6 * VCC
            PinMSK = HiADCm & 7;
            // measure Threshold voltage of Gate
            ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
            gthvoltage = 1;			// round up ((1*4)/9)
            for(ii=0;ii<11;ii++) {
     ee8:	e1 f6       	brne	.-72     	; 0xea2 <CheckPins+0x6bc>
                R_DDR = HiPinRL;		// switch off current
            	ADCSRA |= (1<<ADSC);		// start ADC conversion
            	while (ADCSRA&(1<<ADSC));	// wait until ADC finished
            	gthvoltage += ADCW;		// add result of ADC
            }
            gthvoltage *= 4;	//is equal to 44 * ADCW
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
            gthvoltage /= 9;	//scale to mV
     ef2:	69 e0       	ldi	r22, 0x09	; 9
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
     efa:	70 93 60 01 	sts	0x0160, r23
     efe:	60 93 5f 01 	sts	0x015F, r22
         }
      }
savenresult:
      trans.b = TristatePin;	// save Pin-constellation
     f02:	60 92 5b 01 	sts	0x015B, r6
      trans.c = HighPin;
     f06:	10 93 5c 01 	sts	0x015C, r17
      trans.e = LowPin;
     f0a:	70 92 5d 01 	sts	0x015D, r7
   } // end component conduct => npn
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
     f0e:	88 e0       	ldi	r24, 0x08	; 8
     f10:	87 b9       	out	0x07, r24	; 7
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
     f12:	88 b9       	out	0x08, r24	; 8
   //Fertig
   //end das component has no connection between HighPin and LowPin
   goto widmes;
     f14:	88 c0       	rjmp	.+272    	; 0x1026 <CheckPins+0x840>
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
     f16:	88 e0       	ldi	r24, 0x08	; 8
     f18:	88 b9       	out	0x08, r24	; 8
     f1a:	68 ec       	ldi	r22, 0xC8	; 200
     f1c:	e6 2e       	mov	r14, r22
  for (ii=0;ii<200;ii++) {
     ADC_DDR = LoADCm | HiADCm; // discharge by short of Low and High side
     f1e:	a9 80       	ldd	r10, Y+1	; 0x01
     f20:	ad 28       	or	r10, r13
     f22:	a7 b8       	out	0x07, r10	; 7
     wait_about5ms();		// Low and Highpin to GND for discharge
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
     ADC_DDR = LoADCm;		// switch only Low-Pin fix to GND
     f2c:	e9 81       	ldd	r30, Y+1	; 0x01
     f2e:	e7 b9       	out	0x07, r30	; 7
     adc.hp1 = ReadADC(HighPin); // read voltage at High-Pin
     f30:	81 2f       	mov	r24, r17
     f32:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
     if (adc.hp1 < (150/8)) break;
     f36:	82 31       	cpi	r24, 0x12	; 18
     f38:	91 05       	cpc	r25, r1
     f3a:	10 f0       	brcs	.+4      	; 0xf40 <CheckPins+0x75a>
     f3c:	ea 94       	dec	r14
   goto widmes;
  }
  // component has current
  //Test if Diode
  ADC_PORT = TXD_VAL;
  for (ii=0;ii<200;ii++) {
     f3e:	89 f7       	brne	.-30     	; 0xf22 <CheckPins+0x73c>
  }
#else
  /* check first with low current (R_H=470k) */
  /* With this method the diode can be better differed from a capacitor, */
  /* but a parallel to a capacitor mounted diode can not be found. */
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
     f40:	fc 81       	ldd	r31, Y+4	; 0x04
     f42:	f4 b9       	out	0x04, r31	; 4
  R_PORT = HiPinRH;
     f44:	f5 b9       	out	0x05, r31	; 5
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
     f46:	80 2f       	mov	r24, r16
     f48:	61 e0       	ldi	r22, 0x01	; 1
     f4a:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ChargePin10ms>
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
     f4e:	81 2f       	mov	r24, r17
     f50:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
     f54:	5c 01       	movw	r10, r24
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
     f56:	80 2f       	mov	r24, r16
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ChargePin10ms>
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
     f5e:	81 2f       	mov	r24, r17
     f60:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
     f64:	48 2e       	mov	r4, r24
     f66:	89 2e       	mov	r8, r25

  /* check with higher current (R_L=680) */
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
     f68:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;
     f6a:	c5 b8       	out	0x05, r12	; 5
  adc.hp1 = W5msReadADC(HighPin) - ReadADC(LowPin);
     f6c:	81 2f       	mov	r24, r17
     f6e:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
     f72:	7c 01       	movw	r14, r24
     f74:	87 2d       	mov	r24, r7
     f76:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
     f7a:	e8 1a       	sub	r14, r24
     f7c:	f9 0a       	sbc	r15, r25
  ChargePin10ms(TriPinRL,1);	//discharge for N-Kanal-MOSFET gate
     f7e:	80 2f       	mov	r24, r16
     f80:	61 e0       	ldi	r22, 0x01	; 1
     f82:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ChargePin10ms>
  adc.lp_otr = W5msReadADC(HighPin) - ReadADC(LowPin);
     f86:	81 2f       	mov	r24, r17
     f88:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
     f8c:	1c 01       	movw	r2, r24
     f8e:	87 2d       	mov	r24, r7
     f90:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
     f94:	28 1a       	sub	r2, r24
     f96:	39 0a       	sbc	r3, r25

  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
     f98:	2c 81       	ldd	r18, Y+4	; 0x04
     f9a:	24 b9       	out	0x04, r18	; 4
  R_PORT = HiPinRH;
     f9c:	25 b9       	out	0x05, r18	; 5
  if(adc.lp_otr > adc.hp1) {
     f9e:	e2 14       	cp	r14, r2
     fa0:	f3 04       	cpc	r15, r3
     fa2:	38 f0       	brcs	.+14     	; 0xfb2 <CheckPins+0x7cc>
      adc.hp1 = adc.lp_otr;	//the higher value wins
      adc.hp3 = adc.hp2;
  } else {
      ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
     fa4:	80 2f       	mov	r24, r16
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <ChargePin10ms>
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
  R_PORT = HiPinRH;
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
  adc.hp3 = W5msReadADC(HighPin);		// M--|<--HP--R_H--VCC
     fac:	a4 2c       	mov	r10, r4
     fae:	b8 2c       	mov	r11, r8
  R_PORT = HiPinRH;
  if(adc.lp_otr > adc.hp1) {
      adc.hp1 = adc.lp_otr;	//the higher value wins
      adc.hp3 = adc.hp2;
  } else {
      ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
     fb0:	17 01       	movw	r2, r14
  }
  adc.hp2 = W5msReadADC(HighPin); 		// M--|<--HP--R_H--VCC
     fb2:	81 2f       	mov	r24, r17
     fb4:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
  lcd_space();
  wait_about1s();
#endif

//  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*8 > adc.hp1)) {
  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp2 < adc.hp1) && (adc.hp1 > (adc.hp3+(adc.hp3/8))) && (adc.hp3*16 > adc.hp1)) {
     fb8:	91 01       	movw	r18, r2
     fba:	27 59       	subi	r18, 0x97	; 151
     fbc:	30 40       	sbci	r19, 0x00	; 0
     fbe:	41 e1       	ldi	r20, 0x11	; 17
     fc0:	29 38       	cpi	r18, 0x89	; 137
     fc2:	34 07       	cpc	r19, r20
     fc4:	80 f5       	brcc	.+96     	; 0x1026 <CheckPins+0x840>
     fc6:	82 15       	cp	r24, r2
     fc8:	93 05       	cpc	r25, r3
     fca:	68 f5       	brcc	.+90     	; 0x1026 <CheckPins+0x840>
     fcc:	c5 01       	movw	r24, r10
     fce:	53 e0       	ldi	r21, 0x03	; 3
     fd0:	96 95       	lsr	r25
     fd2:	87 95       	ror	r24
     fd4:	5a 95       	dec	r21
     fd6:	e1 f7       	brne	.-8      	; 0xfd0 <CheckPins+0x7ea>
     fd8:	8a 0d       	add	r24, r10
     fda:	9b 1d       	adc	r25, r11
     fdc:	82 15       	cp	r24, r2
     fde:	93 05       	cpc	r25, r3
     fe0:	10 f5       	brcc	.+68     	; 0x1026 <CheckPins+0x840>
     fe2:	44 e0       	ldi	r20, 0x04	; 4
     fe4:	aa 0c       	add	r10, r10
     fe6:	bb 1c       	adc	r11, r11
     fe8:	4a 95       	dec	r20
     fea:	e1 f7       	brne	.-8      	; 0xfe4 <CheckPins+0x7fe>
     fec:	2a 14       	cp	r2, r10
     fee:	3b 04       	cpc	r3, r11
     ff0:	d0 f4       	brcc	.+52     	; 0x1026 <CheckPins+0x840>
     //voltage is above 0,15V and below 4,64V => Ok
     if((PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
     ff2:	80 91 07 01 	lds	r24, 0x0107
     ff6:	88 23       	and	r24, r24
     ff8:	11 f0       	breq	.+4      	; 0xffe <CheckPins+0x818>
     ffa:	86 30       	cpi	r24, 0x06	; 6
     ffc:	19 f4       	brne	.+6      	; 0x1004 <CheckPins+0x81e>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	80 93 07 01 	sts	0x0107, r24
				//since there is a problem with Transistors with a protection diode
#if DebugOut == 4
        lcd_data('D');
#endif
     }
     diodes[NumOfDiodes].Anode = HighPin;
    1004:	80 91 05 01 	lds	r24, 0x0105
    1008:	e8 2f       	mov	r30, r24
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	ee 0f       	add	r30, r30
    100e:	ff 1f       	adc	r31, r31
    1010:	ee 0f       	add	r30, r30
    1012:	ff 1f       	adc	r31, r31
    1014:	e8 58       	subi	r30, 0x88	; 136
    1016:	fe 4f       	sbci	r31, 0xFE	; 254
    1018:	10 83       	st	Z, r17
     diodes[NumOfDiodes].Cathode = LowPin;
    101a:	71 82       	std	Z+1, r7	; 0x01
     diodes[NumOfDiodes].Voltage = adc.hp1;	// voltage in Millivolt 
    101c:	33 82       	std	Z+3, r3	; 0x03
    101e:	22 82       	std	Z+2, r2	; 0x02
     NumOfDiodes++;
    1020:	8f 5f       	subi	r24, 0xFF	; 255
    1022:	80 93 05 01 	sts	0x0105, r24
#if DebugOut == 4
  lcd_data(NumOfDiodes+'0');
#endif

widmes:
  if (NumOfDiodes > 0) goto clean_ports;
    1026:	80 91 05 01 	lds	r24, 0x0105
    102a:	88 23       	and	r24, r24
    102c:	09 f0       	breq	.+2      	; 0x1030 <CheckPins+0x84a>
    102e:	0f c2       	rjmp	.+1054   	; 0x144e <CheckPins+0xc68>
  // resistor measurement
  wdt_reset();
    1030:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
#if U_SCALE != 1
  ADCconfig.U_AVCC *= U_SCALE;	// scale to higher resolution, mV scale is not required
    1032:	80 91 40 01 	lds	r24, 0x0140
    1036:	90 91 41 01 	lds	r25, 0x0141
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	90 93 41 01 	sts	0x0141, r25
    1046:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.U_Bandgap *= U_SCALE;
    104a:	80 91 3e 01 	lds	r24, 0x013E
    104e:	90 91 3f 01 	lds	r25, 0x013F
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	90 93 3f 01 	sts	0x013F, r25
    105e:	80 93 3e 01 	sts	0x013E, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
    1062:	8e eb       	ldi	r24, 0xBE	; 190
    1064:	80 93 3c 01 	sts	0x013C, r24
#endif
  #define MAX_REPEAT (700 / (5 + R_ANZ_MESS/8))
  ADC_PORT = TXD_VAL;
    1068:	88 e0       	ldi	r24, 0x08	; 8
    106a:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	87 b9       	out	0x07, r24	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    1070:	c4 b8       	out	0x04, r12	; 4
  R_PORT = HiPinRL;	
    1072:	c5 b8       	out	0x05, r12	; 5
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
    1074:	ee 24       	eor	r14, r14
    1076:	ff 24       	eor	r15, r15
  for (ii=1;ii<MAX_REPEAT;ii++) {
    1078:	01 e0       	ldi	r16, 0x01	; 1
    107a:	01 c0       	rjmp	.+2      	; 0x107e <CheckPins+0x898>
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    107c:	7c 01       	movw	r14, r24
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
    107e:	87 2d       	mov	r24, r7
    1080:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
    1084:	4c 01       	movw	r8, r24
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    1086:	81 2f       	mov	r24, r17
    1088:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
     udiff = adc.hp1 - adc.hp2;
    108c:	9c 01       	movw	r18, r24
    108e:	2e 19       	sub	r18, r14
    1090:	3f 09       	sbc	r19, r15
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    1092:	37 ff       	sbrs	r19, 7
    1094:	03 c0       	rjmp	.+6      	; 0x109c <CheckPins+0x8b6>
    1096:	30 95       	com	r19
    1098:	21 95       	neg	r18
    109a:	3f 4f       	sbci	r19, 0xFF	; 255
    109c:	23 30       	cpi	r18, 0x03	; 3
    109e:	31 05       	cpc	r19, r1
    10a0:	84 f4       	brge	.+32     	; 0x10c2 <CheckPins+0x8dc>
    10a2:	ac 01       	movw	r20, r24
  adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
#endif
  if (adc.tp1 > adc.hp1) {
     adc.tp1 = adc.hp1;
  }
  R_PORT = 0;
    10a4:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
    10a6:	9c 81       	ldd	r25, Y+4	; 0x04
    10a8:	94 b9       	out	0x04, r25	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
    10aa:	81 2f       	mov	r24, r17
    10ac:	4e 87       	std	Y+14, r20	; 0x0e
    10ae:	5f 87       	std	Y+15, r21	; 0x0f
    10b0:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
    10b4:	4e 85       	ldd	r20, Y+14	; 0x0e
    10b6:	5f 85       	ldd	r21, Y+15	; 0x0f
    10b8:	81 35       	cpi	r24, 0x51	; 81
    10ba:	91 05       	cpc	r25, r1
    10bc:	08 f0       	brcs	.+2      	; 0x10c0 <CheckPins+0x8da>
    10be:	ac c1       	rjmp	.+856    	; 0x1418 <CheckPins+0xc32>
    10c0:	05 c0       	rjmp	.+10     	; 0x10cc <CheckPins+0x8e6>
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
     udiff = adc.hp1 - adc.hp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.hp2 = adc.hp1;
     wdt_reset();
    10c2:	a8 95       	wdr
  ADC_DDR = LoADCm;		//switch Low-Pin to output (GND)
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
  R_PORT = HiPinRL;	
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    10c4:	0f 5f       	subi	r16, 0xFF	; 255
    10c6:	09 31       	cpi	r16, 0x19	; 25
    10c8:	c9 f6       	brne	.-78     	; 0x107c <CheckPins+0x896>
    10ca:	a6 c1       	rjmp	.+844    	; 0x1418 <CheckPins+0xc32>
     lcd_string(utoa(adc.hp2, outval, 10));
     lcd_space();
#endif
     goto testend;
  }
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
    10cc:	ac 81       	ldd	r26, Y+4	; 0x04
    10ce:	a5 b9       	out	0x05, r26	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
    10d0:	81 2f       	mov	r24, r17
    10d2:	4e 87       	std	Y+14, r20	; 0x0e
    10d4:	5f 87       	std	Y+15, r21	; 0x0f
    10d6:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
    10da:	7c 01       	movw	r14, r24

  ADC_DDR = HiADCm;		//switch High-Pin to output
    10dc:	d7 b8       	out	0x07, r13	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    10de:	d8 b8       	out	0x08, r13	; 8
  R_PORT = 0;
    10e0:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
    10e2:	ba 81       	ldd	r27, Y+2	; 0x02
    10e4:	b4 b9       	out	0x04, r27	; 4
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
    10e6:	aa 24       	eor	r10, r10
    10e8:	bb 24       	eor	r11, r11
  for (ii=1;ii<MAX_REPEAT;ii++) {
    10ea:	21 e0       	ldi	r18, 0x01	; 1
    10ec:	4e 85       	ldd	r20, Y+14	; 0x0e
    10ee:	5f 85       	ldd	r21, Y+15	; 0x0f
    10f0:	2a 01       	movw	r4, r20
    10f2:	01 c0       	rjmp	.+2      	; 0x10f6 <CheckPins+0x910>
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    10f4:	56 01       	movw	r10, r12
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
    10f6:	81 2f       	mov	r24, r17
    10f8:	2b 87       	std	Y+11, r18	; 0x0b
    10fa:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
    10fe:	08 2f       	mov	r16, r24
    1100:	29 2e       	mov	r2, r25
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    1102:	87 2d       	mov	r24, r7
    1104:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
    1108:	6c 01       	movw	r12, r24
     udiff = adc.lp1 - adc.lp2;
    110a:	8a 19       	sub	r24, r10
    110c:	9b 09       	sbc	r25, r11
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    110e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1110:	97 ff       	sbrs	r25, 7
    1112:	03 c0       	rjmp	.+6      	; 0x111a <CheckPins+0x934>
    1114:	90 95       	com	r25
    1116:	81 95       	neg	r24
    1118:	9f 4f       	sbci	r25, 0xFF	; 255
    111a:	83 30       	cpi	r24, 0x03	; 3
    111c:	91 05       	cpc	r25, r1
    111e:	8c f4       	brge	.+34     	; 0x1142 <CheckPins+0x95c>
    1120:	a2 01       	movw	r20, r4
//#else
//  #define RR680PL (R_L_VAL + PIN_RP)
//  #define RR680MI (R_L_VAL + PIN_RM)
//#endif
  LoPinRL = pgm_read_byte(&PinRLtab[LowPin]);		// instruction for LowPin R_L
  LoPinRH = LoPinRL + LoPinRL;				// instruction for LowPin R_H
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	88 0f       	add	r24, r24
  adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
#endif
  if (adc.tp2 < adc.lp1) {
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
    1126:	84 b9       	out	0x04, r24	; 4
  adc.lp2 = W5msReadADC(LowPin);
    1128:	87 2d       	mov	r24, r7
    112a:	4e 86       	std	Y+14, r4	; 0x0e
    112c:	5f 87       	std	Y+15, r21	; 0x0f
    112e:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
    1132:	2c 01       	movw	r4, r24
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    1134:	4e 85       	ldd	r20, Y+14	; 0x0e
    1136:	5f 85       	ldd	r21, Y+15	; 0x0f
    1138:	e4 e4       	ldi	r30, 0x44	; 68
    113a:	40 3c       	cpi	r20, 0xC0	; 192
    113c:	5e 07       	cpc	r21, r30
    113e:	30 f0       	brcs	.+12     	; 0x114c <CheckPins+0x966>
    1140:	0c c0       	rjmp	.+24     	; 0x115a <CheckPins+0x974>
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
     udiff = adc.lp1 - adc.lp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
     adc.lp2 = adc.lp1;
     wdt_reset();
    1142:	a8 95       	wdr
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
  R_PORT = 0;
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
#if FLASHEND > 0x1fff
  adc.lp2 = 0;
  for (ii=1;ii<MAX_REPEAT;ii++) {
    1144:	2f 5f       	subi	r18, 0xFF	; 255
    1146:	29 31       	cpi	r18, 0x19	; 25
    1148:	a9 f6       	brne	.-86     	; 0x10f4 <CheckPins+0x90e>
    114a:	66 c1       	rjmp	.+716    	; 0x1418 <CheckPins+0xc32>
     adc.tp2 = adc.lp1;
  }
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
  adc.lp2 = W5msReadADC(LowPin);
		
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    114c:	f5 e8       	ldi	r31, 0x85	; 133
    114e:	ef 16       	cp	r14, r31
    1150:	f1 e0       	ldi	r31, 0x01	; 1
    1152:	ff 06       	cpc	r15, r31
    1154:	08 f0       	brcs	.+2      	; 0x1158 <CheckPins+0x972>
    1156:	60 c1       	rjmp	.+704    	; 0x1418 <CheckPins+0xc32>
    1158:	06 c0       	rjmp	.+12     	; 0x1166 <CheckPins+0x980>
     lcd_data('F');
#endif
     goto testend; 
  }
//    if((adc.hp2 + (adc.hp2 / 61)) < adc.hp1)
  if (adc.hp2 < (4972*U_SCALE)) { 
    115a:	20 eb       	ldi	r18, 0xB0	; 176
    115c:	e2 16       	cp	r14, r18
    115e:	2d e4       	ldi	r18, 0x4D	; 77
    1160:	f2 06       	cpc	r15, r18
    1162:	08 f0       	brcs	.+2      	; 0x1166 <CheckPins+0x980>
    1164:	59 c1       	rjmp	.+690    	; 0x1418 <CheckPins+0xc32>
     // voltage breaks down with low test current and it is not nearly shorted  => resistor
//     if (adc.lp1 < 120) { // take measurement with R_H 
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
    1166:	34 ea       	ldi	r19, 0xA4	; 164
    1168:	c3 16       	cp	r12, r19
    116a:	32 e0       	ldi	r19, 0x02	; 2
    116c:	d3 06       	cpc	r13, r19
    116e:	08 f0       	brcs	.+2      	; 0x1172 <CheckPins+0x98c>
    1170:	72 c0       	rjmp	.+228    	; 0x1256 <CheckPins+0xa70>
        ii = 'H';
        if (adc.lp2 < (38*U_SCALE)) {
    1172:	48 e9       	ldi	r20, 0x98	; 152
    1174:	44 16       	cp	r4, r20
    1176:	51 04       	cpc	r5, r1
    1178:	08 f4       	brcc	.+2      	; 0x117c <CheckPins+0x996>
    117a:	4e c1       	rjmp	.+668    	; 0x1418 <CheckPins+0xc32>
           // measurement > 60MOhm to big resistance
           goto testend;
        }
        // two measurements with R_H resistors (470k) are made:
        // lirx1 (measurement at HighPin)
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / (ADCconfig.U_AVCC - adc.hp2);
    117c:	80 90 40 01 	lds	r8, 0x0140
    1180:	90 90 41 01 	lds	r9, 0x0141
    1184:	b7 01       	movw	r22, r14
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	28 e9       	ldi	r18, 0x98	; 152
    118c:	37 eb       	ldi	r19, 0xB7	; 183
    118e:	40 e0       	ldi	r20, 0x00	; 0
    1190:	50 e0       	ldi	r21, 0x00	; 0
    1192:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
    1196:	94 01       	movw	r18, r8
    1198:	2e 19       	sub	r18, r14
    119a:	3f 09       	sbc	r19, r15
    119c:	40 e0       	ldi	r20, 0x00	; 0
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
    11a4:	59 01       	movw	r10, r18
    11a6:	6a 01       	movw	r12, r20
        // lirx2 (measurement at LowPin)
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)(ADCconfig.U_AVCC - adc.lp2) / adc.lp2;
    11a8:	84 18       	sub	r8, r4
    11aa:	95 08       	sbc	r9, r5
    11ac:	b4 01       	movw	r22, r8
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	28 e9       	ldi	r18, 0x98	; 152
    11b4:	37 eb       	ldi	r19, 0xB7	; 183
    11b6:	40 e0       	ldi	r20, 0x00	; 0
    11b8:	50 e0       	ldi	r21, 0x00	; 0
    11ba:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
    11be:	92 01       	movw	r18, r4
    11c0:	40 e0       	ldi	r20, 0x00	; 0
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
#define FAKT_LOW 2		//resolution is about twice as good
#else
#define FAKT_LOW 4		//resolution is about four times better
#endif
#ifdef AUTOSCALE_ADC
        if (adc.hp2 < U_INT_LIMIT) {
    11c8:	88 e7       	ldi	r24, 0x78	; 120
    11ca:	e8 16       	cp	r14, r24
    11cc:	8f e0       	ldi	r24, 0x0F	; 15
    11ce:	f8 06       	cpc	r15, r24
    11d0:	70 f4       	brcc	.+28     	; 0x11ee <CheckPins+0xa08>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    11d2:	c6 01       	movw	r24, r12
    11d4:	b5 01       	movw	r22, r10
    11d6:	b2 e0       	ldi	r27, 0x02	; 2
    11d8:	66 0f       	add	r22, r22
    11da:	77 1f       	adc	r23, r23
    11dc:	88 1f       	adc	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	ba 95       	dec	r27
    11e2:	d1 f7       	brne	.-12     	; 0x11d8 <CheckPins+0x9f2>
    11e4:	62 0f       	add	r22, r18
    11e6:	73 1f       	adc	r23, r19
    11e8:	84 1f       	adc	r24, r20
    11ea:	95 1f       	adc	r25, r21
    11ec:	12 c0       	rjmp	.+36     	; 0x1212 <CheckPins+0xa2c>
        } else if (adc.lp2 < U_INT_LIMIT){
    11ee:	98 e7       	ldi	r25, 0x78	; 120
    11f0:	49 16       	cp	r4, r25
    11f2:	9f e0       	ldi	r25, 0x0F	; 15
    11f4:	59 06       	cpc	r5, r25
    11f6:	a0 f4       	brcc	.+40     	; 0x1220 <CheckPins+0xa3a>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    11f8:	ca 01       	movw	r24, r20
    11fa:	b9 01       	movw	r22, r18
    11fc:	a2 e0       	ldi	r26, 0x02	; 2
    11fe:	66 0f       	add	r22, r22
    1200:	77 1f       	adc	r23, r23
    1202:	88 1f       	adc	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	aa 95       	dec	r26
    1208:	d1 f7       	brne	.-12     	; 0x11fe <CheckPins+0xa18>
    120a:	6a 0d       	add	r22, r10
    120c:	7b 1d       	adc	r23, r11
    120e:	8c 1d       	adc	r24, r12
    1210:	9d 1d       	adc	r25, r13
    1212:	25 e0       	ldi	r18, 0x05	; 5
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	40 e0       	ldi	r20, 0x00	; 0
    1218:	50 e0       	ldi	r21, 0x00	; 0
    121a:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
    121e:	08 c0       	rjmp	.+16     	; 0x1230 <CheckPins+0xa4a>
        } else 
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
    1220:	2a 0d       	add	r18, r10
    1222:	3b 1d       	adc	r19, r11
    1224:	4c 1d       	adc	r20, r12
    1226:	5d 1d       	adc	r21, r13
    1228:	56 95       	lsr	r21
    122a:	47 95       	ror	r20
    122c:	37 95       	ror	r19
    122e:	27 95       	ror	r18
        }
        lrx1 *= 100;
    1230:	ca 01       	movw	r24, r20
    1232:	b9 01       	movw	r22, r18
    1234:	24 e6       	ldi	r18, 0x64	; 100
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	40 e0       	ldi	r20, 0x00	; 0
    123a:	50 e0       	ldi	r21, 0x00	; 0
    123c:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
    1240:	6b 01       	movw	r12, r22
    1242:	7c 01       	movw	r14, r24
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
    1244:	8c ea       	ldi	r24, 0xAC	; 172
    1246:	9d e0       	ldi	r25, 0x0D	; 13
    1248:	a0 e0       	ldi	r26, 0x00	; 0
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	c8 0e       	add	r12, r24
    124e:	d9 1e       	adc	r13, r25
    1250:	ea 1e       	adc	r14, r26
    1252:	fb 1e       	adc	r15, r27
    1254:	78 c0       	rjmp	.+240    	; 0x1346 <CheckPins+0xb60>
    1256:	ca 01       	movw	r24, r20
    1258:	84 16       	cp	r8, r20
    125a:	95 06       	cpc	r9, r21
    125c:	08 f4       	brcc	.+2      	; 0x1260 <CheckPins+0xa7a>
    125e:	c4 01       	movw	r24, r8
    1260:	e0 2e       	mov	r14, r16
    1262:	f2 2c       	mov	r15, r2
    1264:	ec 14       	cp	r14, r12
    1266:	fd 04       	cpc	r15, r13
    1268:	08 f4       	brcc	.+2      	; 0x126c <CheckPins+0xa86>
    126a:	76 01       	movw	r14, r12
    126c:	2c 01       	movw	r4, r24
    126e:	84 17       	cp	r24, r20
    1270:	95 07       	cpc	r25, r21
    1272:	08 f4       	brcc	.+2      	; 0x1276 <CheckPins+0xa90>
    1274:	2a 01       	movw	r4, r20
        // two measurements with R_L resistors (680) are made:
        // lirx1 (measurement at HighPin)
        if (adc.tp1 > adc.hp1) {
           adc.hp1 = adc.tp1;		//diff negativ is illegal
        }
        lirx1 =(unsigned long)RR680PL * (unsigned long)(adc.hp1 - adc.tp1) / (ADCconfig.U_AVCC - adc.hp1);
    1276:	b2 01       	movw	r22, r4
    1278:	68 1b       	sub	r22, r24
    127a:	79 0b       	sbc	r23, r25
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	20 91 08 01 	lds	r18, 0x0108
    1284:	30 91 09 01 	lds	r19, 0x0109
    1288:	40 e0       	ldi	r20, 0x00	; 0
    128a:	50 e0       	ldi	r21, 0x00	; 0
    128c:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
    1290:	20 91 40 01 	lds	r18, 0x0140
    1294:	30 91 41 01 	lds	r19, 0x0141
    1298:	24 19       	sub	r18, r4
    129a:	35 09       	sbc	r19, r5
    129c:	40 e0       	ldi	r20, 0x00	; 0
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
    12a4:	49 01       	movw	r8, r18
    12a6:	5a 01       	movw	r10, r20
    12a8:	17 01       	movw	r2, r14
    12aa:	ce 14       	cp	r12, r14
    12ac:	df 04       	cpc	r13, r15
    12ae:	08 f4       	brcc	.+2      	; 0x12b2 <CheckPins+0xacc>
    12b0:	16 01       	movw	r2, r12
        if (adc.tp2 < adc.lp1) {
           adc.lp1 = adc.tp2;		//diff negativ is illegal
        }
        // lirx2 (Measurement at LowPin)
        lirx2 =(unsigned long)RR680MI * (unsigned long)(adc.tp2 -adc.lp1) / adc.lp1;
    12b2:	e2 18       	sub	r14, r2
    12b4:	f3 08       	sbc	r15, r3
    12b6:	b7 01       	movw	r22, r14
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	20 91 02 01 	lds	r18, 0x0102
    12c0:	30 91 03 01 	lds	r19, 0x0103
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
    12cc:	91 01       	movw	r18, r2
    12ce:	40 e0       	ldi	r20, 0x00	; 0
    12d0:	50 e0       	ldi	r21, 0x00	; 0
    12d2:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
//     lrx1 =(unsigned long)R_L_VAL * (unsigned long)adc.hp1 / (adc.hp3 - adc.hp1);

#ifdef AUTOSCALE_ADC
        if (adc.hp1 < U_INT_LIMIT) {
    12d6:	98 e7       	ldi	r25, 0x78	; 120
    12d8:	49 16       	cp	r4, r25
    12da:	9f e0       	ldi	r25, 0x0F	; 15
    12dc:	59 06       	cpc	r5, r25
    12de:	70 f4       	brcc	.+28     	; 0x12fc <CheckPins+0xb16>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    12e0:	c5 01       	movw	r24, r10
    12e2:	b4 01       	movw	r22, r8
    12e4:	e2 e0       	ldi	r30, 0x02	; 2
    12e6:	66 0f       	add	r22, r22
    12e8:	77 1f       	adc	r23, r23
    12ea:	88 1f       	adc	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	ea 95       	dec	r30
    12f0:	d1 f7       	brne	.-12     	; 0x12e6 <CheckPins+0xb00>
    12f2:	62 0f       	add	r22, r18
    12f4:	73 1f       	adc	r23, r19
    12f6:	84 1f       	adc	r24, r20
    12f8:	95 1f       	adc	r25, r21
    12fa:	12 c0       	rjmp	.+36     	; 0x1320 <CheckPins+0xb3a>
        } else if (adc.lp1 < U_INT_LIMIT) {
    12fc:	a8 e7       	ldi	r26, 0x78	; 120
    12fe:	2a 16       	cp	r2, r26
    1300:	af e0       	ldi	r26, 0x0F	; 15
    1302:	3a 06       	cpc	r3, r26
    1304:	b0 f4       	brcc	.+44     	; 0x1332 <CheckPins+0xb4c>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    1306:	ca 01       	movw	r24, r20
    1308:	b9 01       	movw	r22, r18
    130a:	22 e0       	ldi	r18, 0x02	; 2
    130c:	66 0f       	add	r22, r22
    130e:	77 1f       	adc	r23, r23
    1310:	88 1f       	adc	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	2a 95       	dec	r18
    1316:	d1 f7       	brne	.-12     	; 0x130c <CheckPins+0xb26>
    1318:	68 0d       	add	r22, r8
    131a:	79 1d       	adc	r23, r9
    131c:	8a 1d       	adc	r24, r10
    131e:	9b 1d       	adc	r25, r11
    1320:	25 e0       	ldi	r18, 0x05	; 5
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	40 e0       	ldi	r20, 0x00	; 0
    1326:	50 e0       	ldi	r21, 0x00	; 0
    1328:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
    132c:	69 01       	movw	r12, r18
    132e:	7a 01       	movw	r14, r20
    1330:	0a c0       	rjmp	.+20     	; 0x1346 <CheckPins+0xb60>
        } else
#endif
        {
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
    1332:	69 01       	movw	r12, r18
    1334:	7a 01       	movw	r14, r20
    1336:	c8 0c       	add	r12, r8
    1338:	d9 1c       	adc	r13, r9
    133a:	ea 1c       	adc	r14, r10
    133c:	fb 1c       	adc	r15, r11
    133e:	f6 94       	lsr	r15
    1340:	e7 94       	ror	r14
    1342:	d7 94       	ror	r13
    1344:	c7 94       	ror	r12
  lcd_line4();
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
    1346:	80 91 07 01 	lds	r24, 0x0107
    134a:	82 30       	cpi	r24, 0x02	; 2
    134c:	18 f0       	brcs	.+6      	; 0x1354 <CheckPins+0xb6e>
    134e:	86 30       	cpi	r24, 0x06	; 6
    1350:	09 f0       	breq	.+2      	; 0x1354 <CheckPins+0xb6e>
    1352:	62 c0       	rjmp	.+196    	; 0x1418 <CheckPins+0xc32>
        for (ii=0; ii<ResistorsFound; ii++) {
    1354:	30 91 5e 01 	lds	r19, 0x015E
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	40 c0       	rjmp	.+128    	; 0x13dc <CheckPins+0xbf6>
           // search measurements with inverse polarity 
           thisR = &resis[ii];
    135c:	82 2f       	mov	r24, r18
    135e:	90 e0       	ldi	r25, 0x00	; 0
           if (thisR->rt != TristatePin) {
    1360:	fc 01       	movw	r30, r24
    1362:	ee 0f       	add	r30, r30
    1364:	ff 1f       	adc	r31, r31
    1366:	e8 0f       	add	r30, r24
    1368:	f9 1f       	adc	r31, r25
    136a:	ee 0f       	add	r30, r30
    136c:	ff 1f       	adc	r31, r31
    136e:	ee 0f       	add	r30, r30
    1370:	ff 1f       	adc	r31, r31
    1372:	e8 5e       	subi	r30, 0xE8	; 232
    1374:	fe 4f       	sbci	r31, 0xFE	; 254
    1376:	83 85       	ldd	r24, Z+11	; 0x0b
    1378:	86 15       	cp	r24, r6
    137a:	11 f0       	breq	.+4      	; 0x1380 <CheckPins+0xb9a>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    137c:	2f 5f       	subi	r18, 0xFF	; 255
    137e:	2e c0       	rjmp	.+92     	; 0x13dc <CheckPins+0xbf6>
           if (thisR->rt != TristatePin) {
              continue;
           }
           // must be measurement with inverse polarity 
           // resolution is 0.1 Ohm, 1 Ohm = 10 !
           lirx1 = (labs((long)lrx1 - (long)thisR->rx) * 10) / (lrx1 + thisR->rx + 100);
    1380:	80 80       	ld	r8, Z
    1382:	91 80       	ldd	r9, Z+1	; 0x01
    1384:	a2 80       	ldd	r10, Z+2	; 0x02
    1386:	b3 80       	ldd	r11, Z+3	; 0x03
    1388:	c7 01       	movw	r24, r14
    138a:	b6 01       	movw	r22, r12
    138c:	68 19       	sub	r22, r8
    138e:	79 09       	sbc	r23, r9
    1390:	8a 09       	sbc	r24, r10
    1392:	9b 09       	sbc	r25, r11
    1394:	97 ff       	sbrs	r25, 7
    1396:	07 c0       	rjmp	.+14     	; 0x13a6 <CheckPins+0xbc0>
    1398:	90 95       	com	r25
    139a:	80 95       	com	r24
    139c:	70 95       	com	r23
    139e:	61 95       	neg	r22
    13a0:	7f 4f       	sbci	r23, 0xFF	; 255
    13a2:	8f 4f       	sbci	r24, 0xFF	; 255
    13a4:	9f 4f       	sbci	r25, 0xFF	; 255
    13a6:	2a e0       	ldi	r18, 0x0A	; 10
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	40 e0       	ldi	r20, 0x00	; 0
    13ac:	50 e0       	ldi	r21, 0x00	; 0
    13ae:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
    13b2:	a5 01       	movw	r20, r10
    13b4:	94 01       	movw	r18, r8
    13b6:	2c 59       	subi	r18, 0x9C	; 156
    13b8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ba:	4f 4f       	sbci	r20, 0xFF	; 255
    13bc:	5f 4f       	sbci	r21, 0xFF	; 255
    13be:	2c 0d       	add	r18, r12
    13c0:	3d 1d       	adc	r19, r13
    13c2:	4e 1d       	adc	r20, r14
    13c4:	5f 1d       	adc	r21, r15
    13c6:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
           if (lirx1  > 0) {
    13ca:	21 15       	cp	r18, r1
    13cc:	31 05       	cpc	r19, r1
    13ce:	41 05       	cpc	r20, r1
    13d0:	51 05       	cpc	r21, r1
    13d2:	11 f5       	brne	.+68     	; 0x1418 <CheckPins+0xc32>
              DisplayValue(lirx1,-1,LCD_CHAR_OMEGA,3)
              lcd_space();
#endif
              goto testend; // <10% mismatch
           }
           PartFound = PART_RESISTOR;
    13d4:	86 e0       	ldi	r24, 0x06	; 6
    13d6:	80 93 07 01 	sts	0x0107, r24
           goto testend;
    13da:	1e c0       	rjmp	.+60     	; 0x1418 <CheckPins+0xc32>
  DisplayValue(lirx2,-1,LCD_CHAR_OMEGA,4)
  lcd_space();
  lcd_line2();
#endif
     if((PartFound == PART_DIODE) || (PartFound == PART_NONE) || (PartFound == PART_RESISTOR)) {
        for (ii=0; ii<ResistorsFound; ii++) {
    13dc:	23 17       	cp	r18, r19
    13de:	08 f4       	brcc	.+2      	; 0x13e2 <CheckPins+0xbfc>
    13e0:	bd cf       	rjmp	.-134    	; 0x135c <CheckPins+0xb76>
           }
           PartFound = PART_RESISTOR;
           goto testend;
        } // end for
        // no same resistor with the same Tristate-Pin found, new one
        thisR = &resis[ResistorsFound];		// pointer to a free resistor structure
    13e2:	83 2f       	mov	r24, r19
    13e4:	90 e0       	ldi	r25, 0x00	; 0
        thisR->rx = lrx1;		// save resistor value
    13e6:	fc 01       	movw	r30, r24
    13e8:	ee 0f       	add	r30, r30
    13ea:	ff 1f       	adc	r31, r31
    13ec:	e8 0f       	add	r30, r24
    13ee:	f9 1f       	adc	r31, r25
    13f0:	ee 0f       	add	r30, r30
    13f2:	ff 1f       	adc	r31, r31
    13f4:	ee 0f       	add	r30, r30
    13f6:	ff 1f       	adc	r31, r31
    13f8:	e8 5e       	subi	r30, 0xE8	; 232
    13fa:	fe 4f       	sbci	r31, 0xFE	; 254
    13fc:	c0 82       	st	Z, r12
    13fe:	d1 82       	std	Z+1, r13	; 0x01
    1400:	e2 82       	std	Z+2, r14	; 0x02
    1402:	f3 82       	std	Z+3, r15	; 0x03
#if FLASHEND > 0x1fff
        thisR->lx = 0;			// no inductance
    1404:	14 82       	std	Z+4, r1	; 0x04
    1406:	15 82       	std	Z+5, r1	; 0x05
    1408:	16 82       	std	Z+6, r1	; 0x06
    140a:	17 82       	std	Z+7, r1	; 0x07
#endif
        thisR->ra = LowPin;		// save Pin numbers
    140c:	71 86       	std	Z+9, r7	; 0x09
        thisR->rb = HighPin;
    140e:	12 87       	std	Z+10, r17	; 0x0a
        thisR->rt = TristatePin;	// Tristate is saved for easier search of inverse measurement
    1410:	63 86       	std	Z+11, r6	; 0x0b
        ResistorsFound++;			// 1 more resistor found
    1412:	3f 5f       	subi	r19, 0xFF	; 255
    1414:	30 93 5e 01 	sts	0x015E, r19
#endif
     }
  }
  testend:
#if U_SCALE != 1
  ADCconfig.U_AVCC /= U_SCALE;		// scale back to mV resolution
    1418:	80 91 40 01 	lds	r24, 0x0140
    141c:	90 91 41 01 	lds	r25, 0x0141
    1420:	96 95       	lsr	r25
    1422:	87 95       	ror	r24
    1424:	96 95       	lsr	r25
    1426:	87 95       	ror	r24
    1428:	90 93 41 01 	sts	0x0141, r25
    142c:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.U_Bandgap /= U_SCALE;
    1430:	80 91 3e 01 	lds	r24, 0x013E
    1434:	90 91 3f 01 	lds	r25, 0x013F
    1438:	96 95       	lsr	r25
    143a:	87 95       	ror	r24
    143c:	96 95       	lsr	r25
    143e:	87 95       	ror	r24
    1440:	90 93 3f 01 	sts	0x013F, r25
    1444:	80 93 3e 01 	sts	0x013E, r24
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
    1448:	89 e1       	ldi	r24, 0x19	; 25
    144a:	80 93 3c 01 	sts	0x013C, r24
#if DebugOut < 10
  wait_about2s();
#endif
#endif
 clean_ports:
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
    144e:	88 e0       	ldi	r24, 0x08	; 8
    1450:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
    1452:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// all resistor-outputs to Input
    1454:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
    1456:	15 b8       	out	0x05, r1	; 5
} // end CheckPins()
    1458:	2f 96       	adiw	r28, 0x0f	; 15
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	cd bf       	out	0x3d, r28	; 61
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	1f 91       	pop	r17
    146a:	0f 91       	pop	r16
    146c:	ff 90       	pop	r15
    146e:	ef 90       	pop	r14
    1470:	df 90       	pop	r13
    1472:	cf 90       	pop	r12
    1474:	bf 90       	pop	r11
    1476:	af 90       	pop	r10
    1478:	9f 90       	pop	r9
    147a:	8f 90       	pop	r8
    147c:	7f 90       	pop	r7
    147e:	6f 90       	pop	r6
    1480:	5f 90       	pop	r5
    1482:	4f 90       	pop	r4
    1484:	3f 90       	pop	r3
    1486:	2f 90       	pop	r2
    1488:	08 95       	ret

0000148a <PinLayout>:
TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
}
#endif

// show the Pin Layout of the device 
void PinLayout(char pin1, char pin2, char pin3) {
    148a:	ff 92       	push	r15
    148c:	0f 93       	push	r16
    148e:	1f 93       	push	r17
    1490:	18 2f       	mov	r17, r24
    1492:	06 2f       	mov	r16, r22
    1494:	f4 2e       	mov	r15, r20
// pin1-3 is EBC or SGD or CGA
#ifndef EBC_STYLE
   // Layout with 123= style
   lcd_fix_string(N123_str);		//" 123="
    1496:	88 e0       	ldi	r24, 0x08	; 8
    1498:	91 e0       	ldi	r25, 0x01	; 1
    149a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
   for (ii=0;ii<3;ii++) {
    149e:	10 92 4b 01 	sts	0x014B, r1
    14a2:	1e c0       	rjmp	.+60     	; 0x14e0 <PinLayout+0x56>
       if (ii == trans.e)  lcd_data(pin1);	// Output Character in right order
    14a4:	90 91 5d 01 	lds	r25, 0x015D
    14a8:	89 17       	cp	r24, r25
    14aa:	19 f4       	brne	.+6      	; 0x14b2 <PinLayout+0x28>
    14ac:	81 2f       	mov	r24, r17
    14ae:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       if (ii == trans.b)  lcd_data(pin2);
    14b2:	90 91 4b 01 	lds	r25, 0x014B
    14b6:	80 91 5b 01 	lds	r24, 0x015B
    14ba:	98 17       	cp	r25, r24
    14bc:	19 f4       	brne	.+6      	; 0x14c4 <PinLayout+0x3a>
    14be:	80 2f       	mov	r24, r16
    14c0:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       if (ii == trans.c)  lcd_data(pin3);
    14c4:	90 91 4b 01 	lds	r25, 0x014B
    14c8:	80 91 5c 01 	lds	r24, 0x015C
    14cc:	98 17       	cp	r25, r24
    14ce:	19 f4       	brne	.+6      	; 0x14d6 <PinLayout+0x4c>
    14d0:	8f 2d       	mov	r24, r15
    14d2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
void PinLayout(char pin1, char pin2, char pin3) {
// pin1-3 is EBC or SGD or CGA
#ifndef EBC_STYLE
   // Layout with 123= style
   lcd_fix_string(N123_str);		//" 123="
   for (ii=0;ii<3;ii++) {
    14d6:	80 91 4b 01 	lds	r24, 0x014B
    14da:	8f 5f       	subi	r24, 0xFF	; 255
    14dc:	80 93 4b 01 	sts	0x014B, r24
    14e0:	80 91 4b 01 	lds	r24, 0x014B
    14e4:	83 30       	cpi	r24, 0x03	; 3
    14e6:	f0 f2       	brcs	.-68     	; 0x14a4 <PinLayout+0x1a>
   lcd_testpin(trans.e);
   lcd_testpin(trans.b);
   lcd_testpin(trans.c);
 #endif
#endif
}
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	ff 90       	pop	r15
    14ee:	08 95       	ret

000014f0 <ShortedProbes>:
 *  - 0 if not shorted
 *  - 1 if shorted
 */

uint8_t ShortedProbes(uint8_t Probe1, uint8_t Probe2)
{
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	0f 92       	push	r0
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
   *  Set up a voltage divider between the two probes:
   *  - Probe1: Rl pull-up
   *  - Probe2: Rl pull-down
   */

  R_PORT = pgm_read_byte(&PinRLtab[Probe1]);
    14fe:	e8 2f       	mov	r30, r24
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	e6 5f       	subi	r30, 0xF6	; 246
    1504:	fe 4f       	sbci	r31, 0xFE	; 254
    1506:	94 91       	lpm	r25, Z+
    1508:	95 b9       	out	0x05, r25	; 5
  R_DDR = pgm_read_byte(&PinRLtab[Probe1]) | pgm_read_byte(&PinRLtab[Probe2]);
    150a:	e6 2f       	mov	r30, r22
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	e6 5f       	subi	r30, 0xF6	; 246
    1510:	fe 4f       	sbci	r31, 0xFE	; 254
    1512:	e4 91       	lpm	r30, Z+
    1514:	e9 2b       	or	r30, r25
    1516:	e4 b9       	out	0x04, r30	; 4

  /* read voltages */
  U1 = ReadADC(Probe1);
    1518:	69 83       	std	Y+1, r22	; 0x01
    151a:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
    151e:	8c 01       	movw	r16, r24
  U2 = ReadADC(Probe2);
    1520:	69 81       	ldd	r22, Y+1	; 0x01
    1522:	86 2f       	mov	r24, r22
    1524:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
    1528:	ac 01       	movw	r20, r24
  /*
   *  We expect both probe voltages to be about the same and
   *  to be half of Vcc (allowed difference +/- 20mV).
   */

  URH = ADCconfig.U_AVCC / 2;
    152a:	20 91 40 01 	lds	r18, 0x0140
    152e:	30 91 41 01 	lds	r19, 0x0141
    1532:	36 95       	lsr	r19
    1534:	27 95       	ror	r18
  if ((U1 > URH - 20) && (U1 < URH + 20))
    1536:	c9 01       	movw	r24, r18
    1538:	44 97       	sbiw	r24, 0x14	; 20
    153a:	80 17       	cp	r24, r16
    153c:	91 07       	cpc	r25, r17
    153e:	60 f4       	brcc	.+24     	; 0x1558 <ShortedProbes+0x68>
    1540:	2c 5e       	subi	r18, 0xEC	; 236
    1542:	3f 4f       	sbci	r19, 0xFF	; 255
    1544:	02 17       	cp	r16, r18
    1546:	13 07       	cpc	r17, r19
    1548:	38 f4       	brcc	.+14     	; 0x1558 <ShortedProbes+0x68>
  {
    if ((U2 > URH - 20) && (U2 < URH + 20))
    154a:	84 17       	cp	r24, r20
    154c:	95 07       	cpc	r25, r21
    154e:	20 f4       	brcc	.+8      	; 0x1558 <ShortedProbes+0x68>
 *  - 1 if shorted
 */

uint8_t ShortedProbes(uint8_t Probe1, uint8_t Probe2)
{
  uint8_t           Flag1 = 0;      /* return value */
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	42 17       	cp	r20, r18
    1554:	53 07       	cpc	r21, r19
    1556:	08 f0       	brcs	.+2      	; 0x155a <ShortedProbes+0x6a>
    1558:	80 e0       	ldi	r24, 0x00	; 0
      Flag1 = 1;
    }
  }

  /* reset port */
  R_DDR = 0;
    155a:	14 b8       	out	0x04, r1	; 4

  return Flag1;
}
    155c:	0f 90       	pop	r0
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	08 95       	ret

00001568 <AllProbesShorted>:
 *  - 0 if no probes are short-circuited
 *  - number of probe pairs short-circuited (3 = all)
 */

uint8_t AllProbesShorted(void)
{
    1568:	1f 93       	push	r17
  uint8_t           Flag2;      /* return value */

  /* check all possible combinations */
  Flag2 = ShortedProbes(TP1, TP2);
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	61 e0       	ldi	r22, 0x01	; 1
    156e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <ShortedProbes>
    1572:	18 2f       	mov	r17, r24
  Flag2 += ShortedProbes(TP1, TP3);
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	62 e0       	ldi	r22, 0x02	; 2
    1578:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <ShortedProbes>
    157c:	18 0f       	add	r17, r24
  Flag2 += ShortedProbes(TP2, TP3);
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	62 e0       	ldi	r22, 0x02	; 2
    1582:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <ShortedProbes>

  return Flag2;
}
    1586:	81 0f       	add	r24, r17
    1588:	1f 91       	pop	r17
    158a:	08 95       	ret

0000158c <AutoCheck>:
void AutoCheck(void) {
    158c:	2f 92       	push	r2
    158e:	3f 92       	push	r3
    1590:	4f 92       	push	r4
    1592:	5f 92       	push	r5
    1594:	6f 92       	push	r6
    1596:	7f 92       	push	r7
    1598:	8f 92       	push	r8
    159a:	9f 92       	push	r9
    159c:	af 92       	push	r10
    159e:	bf 92       	push	r11
    15a0:	cf 92       	push	r12
    15a2:	df 92       	push	r13
    15a4:	ef 92       	push	r14
    15a6:	ff 92       	push	r15
    15a8:	0f 93       	push	r16
    15aa:	1f 93       	push	r17
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	2e 97       	sbiw	r28, 0x0e	; 14
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	de bf       	out	0x3e, r29	; 62
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	cd bf       	out	0x3d, r28	; 61
  #ifdef AUTOSCALE_ADC
  int8_t udiff;		// difference between ADC Voltage with VCC or Bandgap reference
  int8_t udiff2;
  #endif
 #endif
  ADC_PORT = TXD_VAL;
    15c0:	88 e0       	ldi	r24, 0x08	; 8
    15c2:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = TXD_MSK;
    15c4:	87 b9       	out	0x07, r24	; 7
  #define RequireShortedProbes
  if (AllProbesShorted() != 3) return;
    15c6:	0e 94 b4 0a 	call	0x1568	; 0x1568 <AllProbesShorted>
    15ca:	83 30       	cpi	r24, 0x03	; 3
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <AutoCheck+0x44>
    15ce:	e8 c3       	rjmp	.+2000   	; 0x1da0 <AutoCheck+0x814>
  lcd_clear();
    15d0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix_string(SELFTEST);		// "Selftest mode.."
    15d4:	8d eb       	ldi	r24, 0xBD	; 189
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>

  lcd_line2();
    15dc:	80 ec       	ldi	r24, 0xC0	; 192
    15de:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix2_string(R0_str);		// "R0="
    15e2:	80 ef       	ldi	r24, 0xF0	; 240
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (int8_t)0);	// clear zero offset
    15ea:	82 ed       	ldi	r24, 0xD2	; 210
    15ec:	91 e0       	ldi	r25, 0x01	; 1
    15ee:	60 e0       	ldi	r22, 0x00	; 0
    15f0:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <__eewr_byte_m168>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)0);	// clear zero offset
    15f4:	83 ed       	ldi	r24, 0xD3	; 211
    15f6:	91 e0       	ldi	r25, 0x01	; 1
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <__eewr_byte_m168>
  eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)0);	// clear zero offset
    15fe:	81 ed       	ldi	r24, 0xD1	; 209
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <__eewr_byte_m168>

  adcmv[0] = GetESR(TP3, TP1);
    1608:	82 e0       	ldi	r24, 0x02	; 2
    160a:	60 e0       	ldi	r22, 0x00	; 0
    160c:	0e 94 06 1b 	call	0x360c	; 0x360c <GetESR>
    1610:	7c 01       	movw	r14, r24
    1612:	9a 83       	std	Y+2, r25	; 0x02
    1614:	89 83       	std	Y+1, r24	; 0x01
  adcmv[1] = GetESR(TP3, TP2);
    1616:	82 e0       	ldi	r24, 0x02	; 2
    1618:	61 e0       	ldi	r22, 0x01	; 1
    161a:	0e 94 06 1b 	call	0x360c	; 0x360c <GetESR>
    161e:	6c 01       	movw	r12, r24
    1620:	9c 83       	std	Y+4, r25	; 0x04
    1622:	8b 83       	std	Y+3, r24	; 0x03
  adcmv[2] = GetESR(TP2, TP1);
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	60 e0       	ldi	r22, 0x00	; 0
    1628:	0e 94 06 1b 	call	0x360c	; 0x360c <GetESR>
    162c:	5c 01       	movw	r10, r24
    162e:	9e 83       	std	Y+6, r25	; 0x06
    1630:	8d 83       	std	Y+5, r24	; 0x05
  DisplayValue(adcmv[0],-2,' ',3);
    1632:	b7 01       	movw	r22, r14
    1634:	88 27       	eor	r24, r24
    1636:	77 fd       	sbrc	r23, 7
    1638:	80 95       	com	r24
    163a:	98 2f       	mov	r25, r24
    163c:	4e ef       	ldi	r20, 0xFE	; 254
    163e:	20 e2       	ldi	r18, 0x20	; 32
    1640:	03 e0       	ldi	r16, 0x03	; 3
    1642:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
  DisplayValue(adcmv[1],-2,' ',3);
    1646:	b6 01       	movw	r22, r12
    1648:	88 27       	eor	r24, r24
    164a:	77 fd       	sbrc	r23, 7
    164c:	80 95       	com	r24
    164e:	98 2f       	mov	r25, r24
    1650:	4e ef       	ldi	r20, 0xFE	; 254
    1652:	20 e2       	ldi	r18, 0x20	; 32
    1654:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
  DisplayValue(adcmv[2],-2,LCD_CHAR_OMEGA,3);
    1658:	b5 01       	movw	r22, r10
    165a:	88 27       	eor	r24, r24
    165c:	77 fd       	sbrc	r23, 7
    165e:	80 95       	com	r24
    1660:	98 2f       	mov	r25, r24
    1662:	4e ef       	ldi	r20, 0xFE	; 254
    1664:	24 ef       	ldi	r18, 0xF4	; 244
    1666:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
  if (adcmv[0] < 60) {
    166a:	2c e3       	ldi	r18, 0x3C	; 60
    166c:	e2 16       	cp	r14, r18
    166e:	f1 04       	cpc	r15, r1
    1670:	2c f4       	brge	.+10     	; 0x167c <AutoCheck+0xf0>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (int8_t)adcmv[0]);	// fix zero offset
    1672:	82 ed       	ldi	r24, 0xD2	; 210
    1674:	91 e0       	ldi	r25, 0x01	; 1
    1676:	6e 2d       	mov	r22, r14
    1678:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <__eewr_byte_m168>
  }
  if (adcmv[1] < 60) {
    167c:	8c e3       	ldi	r24, 0x3C	; 60
    167e:	c8 16       	cp	r12, r24
    1680:	d1 04       	cpc	r13, r1
    1682:	2c f4       	brge	.+10     	; 0x168e <AutoCheck+0x102>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)adcmv[1]);	// fix zero offset
    1684:	83 ed       	ldi	r24, 0xD3	; 211
    1686:	91 e0       	ldi	r25, 0x01	; 1
    1688:	6c 2d       	mov	r22, r12
    168a:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <__eewr_byte_m168>
  }
  if (adcmv[2] < 60) {
    168e:	ec e3       	ldi	r30, 0x3C	; 60
    1690:	ae 16       	cp	r10, r30
    1692:	b1 04       	cpc	r11, r1
    1694:	2c f4       	brge	.+10     	; 0x16a0 <AutoCheck+0x114>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
    1696:	81 ed       	ldi	r24, 0xD1	; 209
    1698:	91 e0       	ldi	r25, 0x01	; 1
    169a:	6a 2d       	mov	r22, r10
    169c:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <__eewr_byte_m168>
void AutoCheck(void) {
    16a0:	10 e0       	ldi	r17, 0x00	; 0
  }
  if (adcmv[2] < 60) {
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
  }
  for(tt=0;tt<12;tt++) {
     wait_about500ms();
    16a2:	84 e6       	ldi	r24, 0x64	; 100
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    16aa:	4f 9b       	sbis	0x09, 7	; 9
    16ac:	7b c1       	rjmp	.+758    	; 0x19a4 <AutoCheck+0x418>
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (int8_t)adcmv[1]);	// fix zero offset
  }
  if (adcmv[2] < 60) {
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
  }
  for(tt=0;tt<12;tt++) {
    16ae:	1f 5f       	subi	r17, 0xFF	; 255
    16b0:	1c 30       	cpi	r17, 0x0C	; 12
    16b2:	b9 f7       	brne	.-18     	; 0x16a2 <AutoCheck+0x116>
    16b4:	77 c1       	rjmp	.+750    	; 0x19a4 <AutoCheck+0x418>

 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
        lcd_line2();			//Cursor to column 1, row 2
    16b6:	80 ec       	ldi	r24, 0xC0	; 192
    16b8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_clear_line();		// clear total line
    16bc:	0e 94 8f 02 	call	0x51e	; 0x51e <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    16c0:	80 e8       	ldi	r24, 0x80	; 128
    16c2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_clear_line();		// clear total line
    16c6:	0e 94 8f 02 	call	0x51e	; 0x51e <lcd_clear_line>
        lcd_line1();			//Cursor to column 1, row 1
    16ca:	80 e8       	ldi	r24, 0x80	; 128
    16cc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_data('T');			//output the Testmode "T"
    16d0:	84 e5       	ldi	r24, 0x54	; 84
    16d2:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
        lcd_string(utoa(tt, outval, 10));	//output Test number
    16d6:	8c 2d       	mov	r24, r12
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	6c e0       	ldi	r22, 0x0C	; 12
    16dc:	71 e0       	ldi	r23, 0x01	; 1
    16de:	4a e0       	ldi	r20, 0x0A	; 10
    16e0:	50 e0       	ldi	r21, 0x00	; 0
    16e2:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <utoa>
    16e6:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
        lcd_space();
    16ea:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
                                        //############################################
        if (tt == 1) {   // output of reference voltage and factors for capacity measurement
    16ee:	fc 2d       	mov	r31, r12
    16f0:	f1 30       	cpi	r31, 0x01	; 1
    16f2:	41 f5       	brne	.+80     	; 0x1744 <AutoCheck+0x1b8>
           Calibrate_UR();		// get Reference voltage, Pin resistance
    16f4:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <Calibrate_UR>
           lcd_fix2_string(URefT);	//"URef="
    16f8:	86 ee       	ldi	r24, 0xE6	; 230
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
           DisplayValue(ref_mv,-3,'V',4);
    1700:	60 91 44 01 	lds	r22, 0x0144
    1704:	70 91 45 01 	lds	r23, 0x0145
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	4d ef       	ldi	r20, 0xFD	; 253
    170e:	26 e5       	ldi	r18, 0x56	; 86
    1710:	04 e0       	ldi	r16, 0x04	; 4
    1712:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
           lcd_line2();			//Cursor to column 1, row 2
    1716:	80 ec       	ldi	r24, 0xC0	; 192
    1718:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
           lcd_fix2_string(RHfakt);	//"RHf="
    171c:	8b ee       	ldi	r24, 0xEB	; 235
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
           lcd_string(utoa(RHmultip, outval, 10));
    1724:	80 91 00 01 	lds	r24, 0x0100
    1728:	90 91 01 01 	lds	r25, 0x0101
    172c:	6c e0       	ldi	r22, 0x0C	; 12
    172e:	71 e0       	ldi	r23, 0x01	; 1
    1730:	4a e0       	ldi	r20, 0x0A	; 10
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <utoa>
    1738:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
           ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    173c:	2e eb       	ldi	r18, 0xBE	; 190
    173e:	20 93 3c 01 	sts	0x013C, r18
    1742:	12 c1       	rjmp	.+548    	; 0x1968 <AutoCheck+0x3dc>
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
    1744:	8c 2d       	mov	r24, r12
    1746:	82 30       	cpi	r24, 0x02	; 2
    1748:	99 f5       	brne	.+102    	; 0x17b0 <AutoCheck+0x224>
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    174a:	60 91 40 01 	lds	r22, 0x0140
    174e:	70 91 41 01 	lds	r23, 0x0141
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	2e e4       	ldi	r18, 0x4E	; 78
    1758:	3b e1       	ldi	r19, 0x1B	; 27
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
    1762:	a4 01       	movw	r20, r8
    1764:	93 01       	movw	r18, r6
    1766:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__divmodsi4>
    176a:	89 01       	movw	r16, r18
           R_PORT = 1<<(TP1*2);		//RL1 to VCC
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	85 b9       	out	0x05, r24	; 5
           R_DDR = (1<<(TP1*2)) | (1<<(TP2*2));	//RL2 to -
    1770:	e5 e0       	ldi	r30, 0x05	; 5
    1772:	e4 b9       	out	0x04, r30	; 4
           adcmv[0] = W20msReadADC(TP1);
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	0e 94 94 1a 	call	0x3528	; 0x3528 <W20msReadADC>
           adcmv[0] -= u680;
    177a:	80 1b       	sub	r24, r16
    177c:	91 0b       	sbc	r25, r17
    177e:	9a 83       	std	Y+2, r25	; 0x02
    1780:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (1<<(TP1*2)) | (1<<(TP3*2));	//RL3 to -
    1782:	f1 e1       	ldi	r31, 0x11	; 17
    1784:	f4 b9       	out	0x04, r31	; 4
           adcmv[1] = W20msReadADC(TP1);
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	0e 94 94 1a 	call	0x3528	; 0x3528 <W20msReadADC>
           adcmv[1] -= u680;
    178c:	80 1b       	sub	r24, r16
    178e:	91 0b       	sbc	r25, r17
    1790:	9c 83       	std	Y+4, r25	; 0x04
    1792:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 1<<(TP2*2);		//RL2 to VCC
    1794:	24 e0       	ldi	r18, 0x04	; 4
    1796:	25 b9       	out	0x05, r18	; 5
           R_DDR = (1<<(TP2*2)) | (1<<(TP3*2));	//RL3 to -
    1798:	84 e1       	ldi	r24, 0x14	; 20
    179a:	84 b9       	out	0x04, r24	; 4
           adcmv[2] = W20msReadADC(TP2);
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	0e 94 94 1a 	call	0x3528	; 0x3528 <W20msReadADC>
           adcmv[2] -= u680;
    17a2:	80 1b       	sub	r24, r16
    17a4:	91 0b       	sbc	r25, r17
    17a6:	9e 83       	std	Y+6, r25	; 0x06
    17a8:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RLRL);	// "RLRL"
    17aa:	8d e5       	ldi	r24, 0x5D	; 93
    17ac:	91 e0       	ldi	r25, 0x01	; 1
    17ae:	b1 c0       	rjmp	.+354    	; 0x1912 <AutoCheck+0x386>
        }
                                        //############################################
        if (tt == 3) { // how equal are the RH resistors
    17b0:	ec 2d       	mov	r30, r12
    17b2:	e3 30       	cpi	r30, 0x03	; 3
    17b4:	41 f5       	brne	.+80     	; 0x1806 <AutoCheck+0x27a>
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    17b6:	f5 b8       	out	0x05, r15	; 5
           R_DDR = (2<<(TP1*2)) | (2<<(TP2*2));	//RH2 to -
    17b8:	fa e0       	ldi	r31, 0x0A	; 10
    17ba:	f4 b9       	out	0x04, r31	; 4
           adcmv[0] = W20msReadADC(TP1);
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	0e 94 94 1a 	call	0x3528	; 0x3528 <W20msReadADC>
           adcmv[3] = ADCconfig.U_AVCC / 2;
    17c2:	00 91 40 01 	lds	r16, 0x0140
    17c6:	10 91 41 01 	lds	r17, 0x0141
    17ca:	16 95       	lsr	r17
    17cc:	07 95       	ror	r16
    17ce:	18 87       	std	Y+8, r17	; 0x08
    17d0:	0f 83       	std	Y+7, r16	; 0x07
           adcmv[0] -= adcmv[3];
    17d2:	80 1b       	sub	r24, r16
    17d4:	91 0b       	sbc	r25, r17
    17d6:	9a 83       	std	Y+2, r25	; 0x02
    17d8:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = (2<<(TP1*2)) | (2<<(TP3*2));	//RH3 to -
    17da:	22 e2       	ldi	r18, 0x22	; 34
    17dc:	24 b9       	out	0x04, r18	; 4
           adcmv[1] = W20msReadADC(TP1);
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	0e 94 94 1a 	call	0x3528	; 0x3528 <W20msReadADC>
           adcmv[1] -= adcmv[3];
    17e4:	80 1b       	sub	r24, r16
    17e6:	91 0b       	sbc	r25, r17
    17e8:	9c 83       	std	Y+4, r25	; 0x04
    17ea:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP2*2);		//RH2 to VCC
    17ec:	e5 b8       	out	0x05, r14	; 5
           R_DDR = (2<<(TP2*2)) | (2<<(TP3*2));	//RH3 to -
    17ee:	88 e2       	ldi	r24, 0x28	; 40
    17f0:	84 b9       	out	0x04, r24	; 4
           adcmv[2] = W20msReadADC(TP2);
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	0e 94 94 1a 	call	0x3528	; 0x3528 <W20msReadADC>
           adcmv[2] -= adcmv[3];
    17f8:	80 1b       	sub	r24, r16
    17fa:	91 0b       	sbc	r25, r17
    17fc:	9e 83       	std	Y+6, r25	; 0x06
    17fe:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RHRH);	// "RHRH"
    1800:	8b e6       	ldi	r24, 0x6B	; 107
    1802:	91 e0       	ldi	r25, 0x01	; 1
    1804:	86 c0       	rjmp	.+268    	; 0x1912 <AutoCheck+0x386>
        }
                                        //############################################
        if (tt == 4) { // Text release probes
    1806:	ec 2d       	mov	r30, r12
    1808:	e4 30       	cpi	r30, 0x04	; 4
    180a:	51 f4       	brne	.+20     	; 0x1820 <AutoCheck+0x294>
           lcd_fix_string(RELPROBE);	// "Release Probes"
    180c:	8d ec       	ldi	r24, 0xCD	; 205
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           if (AllProbesShorted() != 0) ww = MAX_REP-2;
    1814:	0e 94 b4 0a 	call	0x1568	; 0x1568 <AllProbesShorted>
    1818:	88 23       	and	r24, r24
    181a:	09 f0       	breq	.+2      	; 0x181e <AutoCheck+0x292>
    181c:	be c2       	rjmp	.+1404   	; 0x1d9a <AutoCheck+0x80e>
    181e:	7f c0       	rjmp	.+254    	; 0x191e <AutoCheck+0x392>
        }
                                        //############################################
        if (tt == 5) { // can we switch the ADC pins to GND across R_H resistor?
    1820:	fc 2d       	mov	r31, r12
    1822:	f5 30       	cpi	r31, 0x05	; 5
    1824:	b1 f4       	brne	.+44     	; 0x1852 <AutoCheck+0x2c6>
           R_PORT = 0;
    1826:	15 b8       	out	0x05, r1	; 5
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to GND
    1828:	f4 b8       	out	0x04, r15	; 4
           adcmv[0] = W20msReadADC(TP1);
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	0e 94 94 1a 	call	0x3528	; 0x3528 <W20msReadADC>
    1830:	9a 83       	std	Y+2, r25	; 0x02
    1832:	89 83       	std	Y+1, r24	; 0x01

           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to GND
    1834:	e4 b8       	out	0x04, r14	; 4
           adcmv[1] = W20msReadADC(TP2);
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	0e 94 94 1a 	call	0x3528	; 0x3528 <W20msReadADC>
    183c:	9c 83       	std	Y+4, r25	; 0x04
    183e:	8b 83       	std	Y+3, r24	; 0x03

           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1840:	b4 b8       	out	0x04, r11	; 4
           adcmv[2] = W20msReadADC(TP3);
    1842:	82 e0       	ldi	r24, 0x02	; 2
    1844:	0e 94 94 1a 	call	0x3528	; 0x3528 <W20msReadADC>
    1848:	9e 83       	std	Y+6, r25	; 0x06
    184a:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RH1L);	// "RH_Lo="
    184c:	85 e5       	ldi	r24, 0x55	; 85
    184e:	91 e0       	ldi	r25, 0x01	; 1
    1850:	60 c0       	rjmp	.+192    	; 0x1912 <AutoCheck+0x386>
        }
                                        //############################################
        if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
    1852:	2c 2d       	mov	r18, r12
    1854:	26 30       	cpi	r18, 0x06	; 6
    1856:	51 f5       	brne	.+84     	; 0x18ac <AutoCheck+0x320>
           R_DDR = 2<<(TP1*2);		//Pin 1 over R_H to VCC
    1858:	f4 b8       	out	0x04, r15	; 4
           R_PORT = 2<<(TP1*2);
    185a:	f5 b8       	out	0x05, r15	; 5
           adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	0e 94 94 1a 	call	0x3528	; 0x3528 <W20msReadADC>
    1862:	20 91 40 01 	lds	r18, 0x0140
    1866:	30 91 41 01 	lds	r19, 0x0141
    186a:	82 1b       	sub	r24, r18
    186c:	93 0b       	sbc	r25, r19
    186e:	9a 83       	std	Y+2, r25	; 0x02
    1870:	89 83       	std	Y+1, r24	; 0x01
           R_DDR = 2<<(TP2*2);		//Pin 2 over R_H to VCC
    1872:	e4 b8       	out	0x04, r14	; 4
           R_PORT = 2<<(TP2*2);
    1874:	e5 b8       	out	0x05, r14	; 5
           adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	0e 94 94 1a 	call	0x3528	; 0x3528 <W20msReadADC>
    187c:	20 91 40 01 	lds	r18, 0x0140
    1880:	30 91 41 01 	lds	r19, 0x0141
    1884:	82 1b       	sub	r24, r18
    1886:	93 0b       	sbc	r25, r19
    1888:	9c 83       	std	Y+4, r25	; 0x04
    188a:	8b 83       	std	Y+3, r24	; 0x03
           R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to VCC
    188c:	b4 b8       	out	0x04, r11	; 4
           R_PORT = 2<<(TP3*2);
    188e:	b5 b8       	out	0x05, r11	; 5
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
    1890:	82 e0       	ldi	r24, 0x02	; 2
    1892:	0e 94 94 1a 	call	0x3528	; 0x3528 <W20msReadADC>
    1896:	20 91 40 01 	lds	r18, 0x0140
    189a:	30 91 41 01 	lds	r19, 0x0141
    189e:	82 1b       	sub	r24, r18
    18a0:	93 0b       	sbc	r25, r19
    18a2:	9e 83       	std	Y+6, r25	; 0x06
    18a4:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RH1H);	// "RH_Hi="
    18a6:	89 e5       	ldi	r24, 0x59	; 89
    18a8:	91 e0       	ldi	r25, 0x01	; 1
    18aa:	33 c0       	rjmp	.+102    	; 0x1912 <AutoCheck+0x386>
        }
        if (tt == 7) { // can we switch the ADC pins to VCC across the R_H resistor?
    18ac:	8c 2d       	mov	r24, r12
    18ae:	87 30       	cpi	r24, 0x07	; 7
    18b0:	99 f5       	brne	.+102    	; 0x1918 <AutoCheck+0x38c>
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_H_VAL*100));
    18b2:	60 91 40 01 	lds	r22, 0x0140
    18b6:	70 91 41 01 	lds	r23, 0x0141
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	2e e4       	ldi	r18, 0x4E	; 78
    18c0:	3b e1       	ldi	r19, 0x1B	; 27
    18c2:	40 e0       	ldi	r20, 0x00	; 0
    18c4:	50 e0       	ldi	r21, 0x00	; 0
    18c6:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
    18ca:	a2 01       	movw	r20, r4
    18cc:	91 01       	movw	r18, r2
    18ce:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__divmodsi4>
    18d2:	89 01       	movw	r16, r18
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    18d4:	f5 b8       	out	0x05, r15	; 5
           R_DDR = (2<<(TP1*2)) | (1<<(TP1*2));	//RH1 to +, RL1 to -
    18d6:	e3 e0       	ldi	r30, 0x03	; 3
    18d8:	e4 b9       	out	0x04, r30	; 4
           adcmv[0] = W20msReadADC(TP1);
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	0e 94 94 1a 	call	0x3528	; 0x3528 <W20msReadADC>
           adcmv[0] -= u680;
    18e0:	80 1b       	sub	r24, r16
    18e2:	91 0b       	sbc	r25, r17
    18e4:	9a 83       	std	Y+2, r25	; 0x02
    18e6:	89 83       	std	Y+1, r24	; 0x01
           R_PORT = 2<<(TP2*2);		//RH2 to VCC
    18e8:	e5 b8       	out	0x05, r14	; 5
           R_DDR = (2<<(TP2*2)) | (1<<(TP2*2));	//RH2 to +, RL2 to -
    18ea:	fc e0       	ldi	r31, 0x0C	; 12
    18ec:	f4 b9       	out	0x04, r31	; 4
           adcmv[1] = W20msReadADC(TP2);
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	0e 94 94 1a 	call	0x3528	; 0x3528 <W20msReadADC>
           adcmv[1] -= u680;
    18f4:	80 1b       	sub	r24, r16
    18f6:	91 0b       	sbc	r25, r17
    18f8:	9c 83       	std	Y+4, r25	; 0x04
    18fa:	8b 83       	std	Y+3, r24	; 0x03
           R_PORT = 2<<(TP3*2);		//RH3 to VCC
    18fc:	b5 b8       	out	0x05, r11	; 5
           R_DDR = (2<<(TP3*2)) | (1<<(TP3*2));	//RH3 to +, RL3 to -
    18fe:	d4 b8       	out	0x04, r13	; 4
           adcmv[2] = W20msReadADC(TP3);
    1900:	82 e0       	ldi	r24, 0x02	; 2
    1902:	0e 94 94 1a 	call	0x3528	; 0x3528 <W20msReadADC>
           adcmv[2] -= u680;
    1906:	80 1b       	sub	r24, r16
    1908:	91 0b       	sbc	r25, r17
    190a:	9e 83       	std	Y+6, r25	; 0x06
    190c:	8d 83       	std	Y+5, r24	; 0x05
           lcd_fix_string(RHRL);	// "RH/RL"
    190e:	89 e7       	ldi	r24, 0x79	; 121
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    1916:	03 c0       	rjmp	.+6      	; 0x191e <AutoCheck+0x392>
        }
                                        //############################################
        if (tt > 1) {	// output 3 voltages 
    1918:	2c 2d       	mov	r18, r12
    191a:	21 30       	cpi	r18, 0x01	; 1
    191c:	29 f1       	breq	.+74     	; 0x1968 <AutoCheck+0x3dc>
           lcd_line2();			//Cursor to column 1, row 2
    191e:	80 ec       	ldi	r24, 0xC0	; 192
    1920:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
           lcd_string(itoa(adcmv[0], outval, 10));	//output voltage 1
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	9a 81       	ldd	r25, Y+2	; 0x02
    1928:	6c e0       	ldi	r22, 0x0C	; 12
    192a:	71 e0       	ldi	r23, 0x01	; 1
    192c:	4a e0       	ldi	r20, 0x0A	; 10
    192e:	50 e0       	ldi	r21, 0x00	; 0
    1930:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <itoa>
    1934:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
           lcd_space();
    1938:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
           lcd_string(itoa(adcmv[1], outval, 10));	//output voltage 2
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	9c 81       	ldd	r25, Y+4	; 0x04
    1940:	6c e0       	ldi	r22, 0x0C	; 12
    1942:	71 e0       	ldi	r23, 0x01	; 1
    1944:	4a e0       	ldi	r20, 0x0A	; 10
    1946:	50 e0       	ldi	r21, 0x00	; 0
    1948:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <itoa>
    194c:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
           lcd_space();
    1950:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
           lcd_string(itoa(adcmv[2], outval, 10));	//output voltage 3
    1954:	8d 81       	ldd	r24, Y+5	; 0x05
    1956:	9e 81       	ldd	r25, Y+6	; 0x06
    1958:	6c e0       	ldi	r22, 0x0C	; 12
    195a:	71 e0       	ldi	r23, 0x01	; 1
    195c:	4a e0       	ldi	r20, 0x0A	; 10
    195e:	50 e0       	ldi	r21, 0x00	; 0
    1960:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <itoa>
    1964:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
        }
        ADC_DDR =  TXD_MSK;		// all-Pins to Input
    1968:	e7 b8       	out	0x07, r14	; 7
        ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
    196a:	e8 b8       	out	0x08, r14	; 8
        R_DDR = 0;			// all R-Ports to Input
    196c:	14 b8       	out	0x04, r1	; 4
        R_PORT = 0;
    196e:	15 b8       	out	0x05, r1	; 5
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    1970:	4f 9b       	sbis	0x09, 7	; 9
    1972:	0f c0       	rjmp	.+30     	; 0x1992 <AutoCheck+0x406>
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
    1974:	84 e6       	ldi	r24, 0x64	; 100
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
        if(!(ON_PIN_REG & (1<<RST_PIN))) {
    197c:	4f 9b       	sbis	0x09, 7	; 9
    197e:	09 c0       	rjmp	.+18     	; 0x1992 <AutoCheck+0x406>
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
    1980:	84 e6       	ldi	r24, 0x64	; 100
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
  } /* end for tt */

 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
     for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
    1988:	a3 94       	inc	r10
    198a:	8a 2d       	mov	r24, r10
    198c:	84 30       	cpi	r24, 0x04	; 4
    198e:	08 f4       	brcc	.+2      	; 0x1992 <AutoCheck+0x406>
    1990:	92 ce       	rjmp	.-732    	; 0x16b6 <AutoCheck+0x12a>
    1992:	1c 2d       	mov	r17, r12
	   // if key is pressed, don't repeat
           break;
        }
        wait_about500ms();
     } //end for ww
     wait_about1s();
    1994:	88 ec       	ldi	r24, 0xC8	; 200
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
     }
  } /* end for tt */

 #define TEST_COUNT 8
 
  for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    199c:	1f 5f       	subi	r17, 0xFF	; 255
    199e:	18 30       	cpi	r17, 0x08	; 8
    19a0:	89 f4       	brne	.+34     	; 0x19c4 <AutoCheck+0x438>
    19a2:	19 c0       	rjmp	.+50     	; 0x19d6 <AutoCheck+0x44a>
  if (adcmv[2] < 60) {
     eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (int8_t)adcmv[2]);	// fix zero offset
  }
  for(tt=0;tt<12;tt++) {
     wait_about500ms();
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    19a4:	11 e0       	ldi	r17, 0x01	; 1
           R_PORT = 2<<(TP3*2);
           adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
           lcd_fix_string(RH1H);	// "RH_Hi="
        }
        if (tt == 7) { // can we switch the ADC pins to VCC across the R_H resistor?
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_H_VAL*100));
    19a6:	4e ea       	ldi	r20, 0xAE	; 174
    19a8:	24 2e       	mov	r2, r20
    19aa:	42 ed       	ldi	r20, 0xD2	; 210
    19ac:	34 2e       	mov	r3, r20
    19ae:	47 e4       	ldi	r20, 0x47	; 71
    19b0:	44 2e       	mov	r4, r20
    19b2:	51 2c       	mov	r5, r1
           R_PORT = 2<<(TP1*2);		//RH1 to VCC
    19b4:	32 e0       	ldi	r19, 0x02	; 2
    19b6:	f3 2e       	mov	r15, r19
           R_DDR = (2<<(TP1*2)) | (1<<(TP1*2));	//RH1 to +, RL1 to -
           adcmv[0] = W20msReadADC(TP1);
           adcmv[0] -= u680;
           R_PORT = 2<<(TP2*2);		//RH2 to VCC
    19b8:	28 e0       	ldi	r18, 0x08	; 8
    19ba:	e2 2e       	mov	r14, r18
           R_DDR = (2<<(TP2*2)) | (1<<(TP2*2));	//RH2 to +, RL2 to -
           adcmv[1] = W20msReadADC(TP2);
           adcmv[1] -= u680;
           R_PORT = 2<<(TP3*2);		//RH3 to VCC
    19bc:	90 e2       	ldi	r25, 0x20	; 32
    19be:	b9 2e       	mov	r11, r25
           R_DDR = (2<<(TP3*2)) | (1<<(TP3*2));	//RH3 to +, RL3 to -
    19c0:	80 e3       	ldi	r24, 0x30	; 48
    19c2:	d8 2e       	mov	r13, r24
void AutoCheck(void) {
    19c4:	aa 24       	eor	r10, r10
           lcd_string(utoa(RHmultip, outval, 10));
           ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
        }
                                        //############################################
        if (tt == 2) { // how equal are the RL resistors? 
           u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    19c6:	0a eb       	ldi	r16, 0xBA	; 186
    19c8:	60 2e       	mov	r6, r16
    19ca:	06 e3       	ldi	r16, 0x36	; 54
    19cc:	70 2e       	mov	r7, r16
    19ce:	81 2c       	mov	r8, r1
    19d0:	91 2c       	mov	r9, r1
    19d2:	c1 2e       	mov	r12, r17
    19d4:	70 ce       	rjmp	.-800    	; 0x16b6 <AutoCheck+0x12a>
        wait_about500ms();
     } //end for ww
     wait_about1s();
  } //end for tt

  lcd_clear();
    19d6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix_string(RIHI);	// "RiHi="
    19da:	8f e7       	ldi	r24, 0x7F	; 127
    19dc:	91 e0       	ldi	r25, 0x01	; 1
    19de:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  DisplayValue(RRpinPL,-1,LCD_CHAR_OMEGA,3);
    19e2:	60 91 42 01 	lds	r22, 0x0142
    19e6:	70 91 43 01 	lds	r23, 0x0143
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	4f ef       	ldi	r20, 0xFF	; 255
    19f0:	24 ef       	ldi	r18, 0xF4	; 244
    19f2:	03 e0       	ldi	r16, 0x03	; 3
    19f4:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
  lcd_line2();
    19f8:	80 ec       	ldi	r24, 0xC0	; 192
    19fa:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(RILO);	// "RiLo="
    19fe:	86 e8       	ldi	r24, 0x86	; 134
    1a00:	91 e0       	ldi	r25, 0x01	; 1
    1a02:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  DisplayValue(RRpinMI,-1,LCD_CHAR_OMEGA,3);
    1a06:	60 91 47 01 	lds	r22, 0x0147
    1a0a:	70 91 48 01 	lds	r23, 0x0148
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	4f ef       	ldi	r20, 0xFF	; 255
    1a14:	24 ef       	ldi	r18, 0xF4	; 244
    1a16:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
  wait_about2s();			//wait 2 seconds
    1a1a:	80 e9       	ldi	r24, 0x90	; 144
    1a1c:	91 e0       	ldi	r25, 0x01	; 1
    1a1e:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>

  //measure Zero offset for Capacity measurement
  adcmv[3] = 0;
    1a22:	18 86       	std	Y+8, r1	; 0x08
    1a24:	1f 82       	std	Y+7, r1	; 0x07
  PartFound = PART_NONE;
    1a26:	10 92 07 01 	sts	0x0107, r1
  ReadCapacity(TP3, TP1);
    1a2a:	82 e0       	ldi	r24, 0x02	; 2
    1a2c:	60 e0       	ldi	r22, 0x00	; 0
    1a2e:	0e 94 ef 14 	call	0x29de	; 0x29de <ReadCapacity>
  adcmv[5] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:3
    1a32:	00 91 6a 01 	lds	r16, 0x016A
    1a36:	10 91 6b 01 	lds	r17, 0x016B
    1a3a:	1c 87       	std	Y+12, r17	; 0x0c
    1a3c:	0b 87       	std	Y+11, r16	; 0x0b
  ReadCapacity(TP3, TP2);
    1a3e:	82 e0       	ldi	r24, 0x02	; 2
    1a40:	61 e0       	ldi	r22, 0x01	; 1
    1a42:	0e 94 ef 14 	call	0x29de	; 0x29de <ReadCapacity>
  adcmv[6] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:3
    1a46:	e0 90 6a 01 	lds	r14, 0x016A
    1a4a:	f0 90 6b 01 	lds	r15, 0x016B
    1a4e:	fe 86       	std	Y+14, r15	; 0x0e
    1a50:	ed 86       	std	Y+13, r14	; 0x0d
  ReadCapacity(TP2, TP1);
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	60 e0       	ldi	r22, 0x00	; 0
    1a56:	0e 94 ef 14 	call	0x29de	; 0x29de <ReadCapacity>
  adcmv[2] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:2
    1a5a:	c0 90 6a 01 	lds	r12, 0x016A
    1a5e:	d0 90 6b 01 	lds	r13, 0x016B
    1a62:	de 82       	std	Y+6, r13	; 0x06
    1a64:	cd 82       	std	Y+5, r12	; 0x05
  ReadCapacity(TP1, TP3);
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	62 e0       	ldi	r22, 0x02	; 2
    1a6a:	0e 94 ef 14 	call	0x29de	; 0x29de <ReadCapacity>
  adcmv[1] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:1
    1a6e:	80 91 6a 01 	lds	r24, 0x016A
    1a72:	90 91 6b 01 	lds	r25, 0x016B
    1a76:	9c 83       	std	Y+4, r25	; 0x04
    1a78:	8b 83       	std	Y+3, r24	; 0x03
  ReadCapacity(TP2, TP3);
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	62 e0       	ldi	r22, 0x02	; 2
    1a7e:	0e 94 ef 14 	call	0x29de	; 0x29de <ReadCapacity>
  adcmv[4] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:2
    1a82:	80 91 6a 01 	lds	r24, 0x016A
    1a86:	90 91 6b 01 	lds	r25, 0x016B
    1a8a:	9a 87       	std	Y+10, r25	; 0x0a
    1a8c:	89 87       	std	Y+9, r24	; 0x09
  ReadCapacity(TP1, TP2);
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	61 e0       	ldi	r22, 0x01	; 1
    1a92:	0e 94 ef 14 	call	0x29de	; 0x29de <ReadCapacity>
  adcmv[0] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:1
    1a96:	80 91 6a 01 	lds	r24, 0x016A
    1a9a:	90 91 6b 01 	lds	r25, 0x016B
    1a9e:	9a 83       	std	Y+2, r25	; 0x02
    1aa0:	89 83       	std	Y+1, r24	; 0x01
  lcd_clear();
    1aa2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_fix_string(C0_str);			//output "C0 "
    1aa6:	8d e8       	ldi	r24, 0x8D	; 141
    1aa8:	91 e0       	ldi	r25, 0x01	; 1
    1aaa:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
    1aae:	b8 01       	movw	r22, r16
    1ab0:	88 27       	eor	r24, r24
    1ab2:	77 fd       	sbrc	r23, 7
    1ab4:	80 95       	com	r24
    1ab6:	98 2f       	mov	r25, r24
    1ab8:	40 e0       	ldi	r20, 0x00	; 0
    1aba:	20 e2       	ldi	r18, 0x20	; 32
    1abc:	03 e0       	ldi	r16, 0x03	; 3
    1abe:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
    1ac2:	b7 01       	movw	r22, r14
    1ac4:	88 27       	eor	r24, r24
    1ac6:	77 fd       	sbrc	r23, 7
    1ac8:	80 95       	com	r24
    1aca:	98 2f       	mov	r25, r24
    1acc:	40 e0       	ldi	r20, 0x00	; 0
    1ace:	20 e2       	ldi	r18, 0x20	; 32
    1ad0:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
    1ad4:	b6 01       	movw	r22, r12
    1ad6:	88 27       	eor	r24, r24
    1ad8:	77 fd       	sbrc	r23, 7
    1ada:	80 95       	com	r24
    1adc:	98 2f       	mov	r25, r24
    1ade:	44 ef       	ldi	r20, 0xF4	; 244
    1ae0:	26 e4       	ldi	r18, 0x46	; 70
    1ae2:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
    1ae6:	8e 01       	movw	r16, r28
    1ae8:	0f 5f       	subi	r16, 0xFF	; 255
    1aea:	1f 4f       	sbci	r17, 0xFF	; 255
void AutoCheck(void) {
    1aec:	ce 01       	movw	r24, r28
    1aee:	0f 96       	adiw	r24, 0x0f	; 15
    1af0:	f8 01       	movw	r30, r16
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
    1af2:	21 91       	ld	r18, Z+
    1af4:	31 91       	ld	r19, Z+
    1af6:	27 34       	cpi	r18, 0x47	; 71
    1af8:	31 05       	cpc	r19, r1
    1afa:	ec f4       	brge	.+58     	; 0x1b36 <AutoCheck+0x5aa>
  lcd_fix_string(C0_str);			//output "C0 "
  DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
  DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
    1afc:	e8 17       	cp	r30, r24
    1afe:	f9 07       	cpc	r31, r25
    1b00:	c1 f7       	brne	.-16     	; 0x1af2 <AutoCheck+0x566>
    1b02:	ee 24       	eor	r14, r14
    1b04:	ff 24       	eor	r15, r15
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
    1b06:	f8 01       	movw	r30, r16
    1b08:	60 81       	ld	r22, Z
    1b0a:	0e 5f       	subi	r16, 0xFE	; 254
    1b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0e:	61 5f       	subi	r22, 0xF1	; 241
    1b10:	c7 01       	movw	r24, r14
    1b12:	87 53       	subi	r24, 0x37	; 55
    1b14:	9e 4f       	sbci	r25, 0xFE	; 254
    1b16:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <__eewr_byte_m168>
    1b1a:	08 94       	sec
    1b1c:	e1 1c       	adc	r14, r1
    1b1e:	f1 1c       	adc	r15, r1
  DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
 #ifdef AUTO_CAL
  for (ww=0;ww<7;ww++) {
      if (adcmv[ww] > 70) goto no_c0save;
  }
  for (ww=0;ww<7;ww++) {
    1b20:	f7 e0       	ldi	r31, 0x07	; 7
    1b22:	ef 16       	cp	r14, r31
    1b24:	f1 04       	cpc	r15, r1
    1b26:	79 f7       	brne	.-34     	; 0x1b06 <AutoCheck+0x57a>
      // write all zero offsets to the EEprom 
      (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
  }
  lcd_line2();
    1b28:	80 ec       	ldi	r24, 0xC0	; 192
    1b2a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(OK_str);		// output "OK"
    1b2e:	8b ee       	ldi	r24, 0xEB	; 235
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
no_c0save:
 #endif
 wait_about2s();		//wait 2 seconds
    1b36:	80 e9       	ldi	r24, 0x90	; 144
    1b38:	91 e0       	ldi	r25, 0x01	; 1
    1b3a:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
    1b3e:	10 e0       	ldi	r17, 0x00	; 0
 for (ww=0;ww<64;ww++) {
    1b40:	cc 24       	eor	r12, r12
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
    1b42:	ba e0       	ldi	r27, 0x0A	; 10
    1b44:	8b 2e       	mov	r8, r27
    1b46:	91 2c       	mov	r9, r1
    1b48:	a1 2c       	mov	r10, r1
    1b4a:	b1 2c       	mov	r11, r1
     lcd_data('3');
     lcd_fix2_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1b4c:	a2 e6       	ldi	r26, 0x62	; 98
    1b4e:	ea 2e       	mov	r14, r26
    1b50:	a1 e0       	ldi	r26, 0x01	; 1
    1b52:	fa 2e       	mov	r15, r26
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
     lcd_clear();
    1b54:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
     lcd_data('1');
    1b58:	81 e3       	ldi	r24, 0x31	; 49
    1b5a:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
     lcd_fix_string(CapZeich);	// "-||-"
    1b5e:	8d e1       	ldi	r24, 0x1D	; 29
    1b60:	91 e0       	ldi	r25, 0x01	; 1
    1b62:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_data('3');
    1b66:	83 e3       	ldi	r24, 0x33	; 51
    1b68:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
     lcd_fix2_string(MinCap_str); // " >100nF!"
    1b6c:	84 ef       	ldi	r24, 0xF4	; 244
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
     PartFound = PART_NONE;
    1b74:	10 92 07 01 	sts	0x0107, r1
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
    1b78:	82 e0       	ldi	r24, 0x02	; 2
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	0e 94 ef 14 	call	0x29de	; 0x29de <ReadCapacity>
    1b80:	20 91 62 01 	lds	r18, 0x0162
    1b84:	30 91 63 01 	lds	r19, 0x0163
    1b88:	40 91 64 01 	lds	r20, 0x0164
    1b8c:	50 91 65 01 	lds	r21, 0x0165
    1b90:	00 91 74 01 	lds	r16, 0x0174
     while (cap.cpre < -9) {
    1b94:	07 c0       	rjmp	.+14     	; 0x1ba4 <AutoCheck+0x618>
        cap.cpre++;
        cap.cval /= 10;
    1b96:	ca 01       	movw	r24, r20
    1b98:	b9 01       	movw	r22, r18
    1b9a:	a5 01       	movw	r20, r10
    1b9c:	94 01       	movw	r18, r8
    1b9e:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
    1ba2:	0f 5f       	subi	r16, 0xFF	; 255
     lcd_data('3');
     lcd_fix2_string(MinCap_str); // " >100nF!"
     PartFound = PART_NONE;
     //measure  offset Voltage of analog Comparator for Capacity measurement
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
    1ba4:	07 3f       	cpi	r16, 0xF7	; 247
    1ba6:	bc f3       	brlt	.-18     	; 0x1b96 <AutoCheck+0x60a>
    1ba8:	00 93 74 01 	sts	0x0174, r16
    1bac:	20 93 62 01 	sts	0x0162, r18
    1bb0:	f7 01       	movw	r30, r14
    1bb2:	31 83       	std	Z+1, r19	; 0x01
    1bb4:	42 83       	std	Z+2, r20	; 0x02
    1bb6:	53 83       	std	Z+3, r21	; 0x03
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1bb8:	07 3f       	cpi	r16, 0xF7	; 247
    1bba:	09 f0       	breq	.+2      	; 0x1bbe <AutoCheck+0x632>
    1bbc:	b9 c0       	rjmp	.+370    	; 0x1d30 <AutoCheck+0x7a4>
    1bbe:	20 36       	cpi	r18, 0x60	; 96
    1bc0:	31 05       	cpc	r19, r1
    1bc2:	41 05       	cpc	r20, r1
    1bc4:	51 05       	cpc	r21, r1
    1bc6:	08 f4       	brcc	.+2      	; 0x1bca <AutoCheck+0x63e>
    1bc8:	b3 c0       	rjmp	.+358    	; 0x1d30 <AutoCheck+0x7a4>
    1bca:	20 3f       	cpi	r18, 0xF0	; 240
    1bcc:	f5 e5       	ldi	r31, 0x55	; 85
    1bce:	3f 07       	cpc	r19, r31
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	4f 07       	cpc	r20, r31
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	5f 07       	cpc	r21, r31
    1bd8:	08 f0       	brcs	.+2      	; 0x1bdc <AutoCheck+0x650>
    1bda:	aa c0       	rjmp	.+340    	; 0x1d30 <AutoCheck+0x7a4>
        cap_found++;
    1bdc:	1f 5f       	subi	r17, 0xFF	; 255
     } else {
        cap_found = 0;		// wait for stable connection
     }
     if (cap_found > 1) {
    1bde:	12 30       	cpi	r17, 0x02	; 2
    1be0:	09 f0       	breq	.+2      	; 0x1be4 <AutoCheck+0x658>
    1be2:	a7 c0       	rjmp	.+334    	; 0x1d32 <AutoCheck+0x7a6>
        // value of capacitor is correct
        (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
    1be4:	60 91 76 01 	lds	r22, 0x0176
    1be8:	70 91 77 01 	lds	r23, 0x0177
    1bec:	87 ec       	ldi	r24, 0xC7	; 199
    1bee:	91 e0       	ldi	r25, 0x01	; 1
    1bf0:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <__eewr_word_m168>
        lcd_clear();
    1bf4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
        lcd_fix2_string(REF_C_str);	// "REF_C="
    1bf8:	8c ef       	ldi	r24, 0xFC	; 252
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
        lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
    1c00:	80 91 76 01 	lds	r24, 0x0176
    1c04:	90 91 77 01 	lds	r25, 0x0177
    1c08:	6c e0       	ldi	r22, 0x0C	; 12
    1c0a:	71 e0       	ldi	r23, 0x01	; 1
    1c0c:	4a e0       	ldi	r20, 0x0A	; 10
    1c0e:	50 e0       	ldi	r21, 0x00	; 0
    1c10:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <itoa>
    1c14:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
        wait_about1s();
        }
//#######################################
#endif
  #ifdef AUTOSCALE_ADC
        ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
    1c18:	88 e0       	ldi	r24, 0x08	; 8
    1c1a:	88 b9       	out	0x08, r24	; 8
        ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    1c1c:	89 e0       	ldi	r24, 0x09	; 9
    1c1e:	87 b9       	out	0x07, r24	; 7
        R_DDR = 2<<(TP3*2);		//Pin 3 over R_H to GND
    1c20:	80 e2       	ldi	r24, 0x20	; 32
    1c22:	84 b9       	out	0x04, r24	; 4
        do {
           adcmv[0] = ReadADC(TP3);
    1c24:	82 e0       	ldi	r24, 0x02	; 2
    1c26:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
        } while (adcmv[0] > 980);
    1c2a:	23 e0       	ldi	r18, 0x03	; 3
    1c2c:	85 3d       	cpi	r24, 0xD5	; 213
    1c2e:	92 07       	cpc	r25, r18
    1c30:	cc f7       	brge	.-14     	; 0x1c24 <AutoCheck+0x698>
        R_DDR = 0;		//all Pins to input 
    1c32:	14 b8       	out	0x04, r1	; 4
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1c34:	10 92 3f 01 	sts	0x013F, r1
    1c38:	10 92 3e 01 	sts	0x013E, r1
        adcmv[0] = ReadADC(TP3);  // get cap voltage with VCC reference
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
    1c42:	4c 01       	movw	r8, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1c44:	8f eb       	ldi	r24, 0xBF	; 191
    1c46:	91 e0       	ldi	r25, 0x01	; 1
    1c48:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <__eerd_byte_m168>
    1c4c:	99 27       	eor	r25, r25
    1c4e:	87 fd       	sbrc	r24, 7
    1c50:	90 95       	com	r25
    1c52:	20 91 44 01 	lds	r18, 0x0144
    1c56:	30 91 45 01 	lds	r19, 0x0145
    1c5a:	82 0f       	add	r24, r18
    1c5c:	93 1f       	adc	r25, r19
    1c5e:	90 93 3f 01 	sts	0x013F, r25
    1c62:	80 93 3e 01 	sts	0x013E, r24
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
    1c66:	82 e0       	ldi	r24, 0x02	; 2
    1c68:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
    1c6c:	8c 01       	movw	r16, r24
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    1c6e:	10 92 3f 01 	sts	0x013F, r1
    1c72:	10 92 3e 01 	sts	0x013E, r1
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
    1c76:	82 e0       	ldi	r24, 0x02	; 2
    1c78:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
    1c7c:	5c 01       	movw	r10, r24
        ADCconfig.U_Bandgap = ADC_internal_reference;
    1c7e:	c0 90 44 01 	lds	r12, 0x0144
    1c82:	d0 90 45 01 	lds	r13, 0x0145
    1c86:	8f eb       	ldi	r24, 0xBF	; 191
    1c88:	91 e0       	ldi	r25, 0x01	; 1
    1c8a:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <__eerd_byte_m168>
    1c8e:	99 27       	eor	r25, r25
    1c90:	87 fd       	sbrc	r24, 7
    1c92:	90 95       	com	r25
    1c94:	8c 0d       	add	r24, r12
    1c96:	9d 1d       	adc	r25, r13
    1c98:	90 93 3f 01 	sts	0x013F, r25
    1c9c:	80 93 3e 01 	sts	0x013E, r24
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1ca0:	8f eb       	ldi	r24, 0xBF	; 191
    1ca2:	91 e0       	ldi	r25, 0x01	; 1
    1ca4:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <__eerd_byte_m168>
    1ca8:	e8 2e       	mov	r14, r24
        lcd_line2();
    1caa:	80 ec       	ldi	r24, 0xC0	; 192
    1cac:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
        lcd_fix2_string(REF_R_str);	// "REF_R="
    1cb0:	83 e0       	ldi	r24, 0x03	; 3
    1cb2:	91 e0       	ldi	r25, 0x01	; 1
    1cb4:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1cb8:	8f eb       	ldi	r24, 0xBF	; 191
    1cba:	91 e0       	ldi	r25, 0x01	; 1
    1cbc:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <__eerd_byte_m168>
        ADCconfig.U_Bandgap = ADC_internal_reference;
        adcmv[1] = ReadADC(TP3);	// get cap voltage with internal reference
        ADCconfig.U_Bandgap = 0;	// do not use internal Ref
        adcmv[2] = ReadADC(TP3);  // get cap voltage with VCC reference
        ADCconfig.U_Bandgap = ADC_internal_reference;
        udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1] - adcmv[1])) * ADC_internal_reference / (2*adcmv[1]))+REF_R_KORR;
    1cc0:	f3 e0       	ldi	r31, 0x03	; 3
    1cc2:	ff 2e       	mov	r15, r31
    1cc4:	f8 0e       	add	r15, r24
    1cc6:	a8 0c       	add	r10, r8
    1cc8:	b9 1c       	adc	r11, r9
    1cca:	a0 1a       	sub	r10, r16
    1ccc:	b1 0a       	sbc	r11, r17
    1cce:	a0 1a       	sub	r10, r16
    1cd0:	b1 0a       	sbc	r11, r17
    1cd2:	b5 01       	movw	r22, r10
    1cd4:	88 27       	eor	r24, r24
    1cd6:	77 fd       	sbrc	r23, 7
    1cd8:	80 95       	com	r24
    1cda:	98 2f       	mov	r25, r24
    1cdc:	2e 2d       	mov	r18, r14
    1cde:	33 27       	eor	r19, r19
    1ce0:	27 fd       	sbrc	r18, 7
    1ce2:	30 95       	com	r19
    1ce4:	2c 0d       	add	r18, r12
    1ce6:	3d 1d       	adc	r19, r13
    1ce8:	40 e0       	ldi	r20, 0x00	; 0
    1cea:	50 e0       	ldi	r21, 0x00	; 0
    1cec:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
    1cf0:	00 0f       	add	r16, r16
    1cf2:	11 1f       	adc	r17, r17
    1cf4:	98 01       	movw	r18, r16
    1cf6:	44 27       	eor	r20, r20
    1cf8:	37 fd       	sbrc	r19, 7
    1cfa:	40 95       	com	r20
    1cfc:	54 2f       	mov	r21, r20
    1cfe:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <__divmodsi4>
        lcd_line2();
        lcd_fix2_string(REF_R_str);	// "REF_R="
        udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    1d02:	f2 0e       	add	r15, r18
        (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
    1d04:	8f eb       	ldi	r24, 0xBF	; 191
    1d06:	91 e0       	ldi	r25, 0x01	; 1
    1d08:	6f 2d       	mov	r22, r15
    1d0a:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <__eewr_byte_m168>
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
    1d0e:	8f 2d       	mov	r24, r15
    1d10:	99 27       	eor	r25, r25
    1d12:	87 fd       	sbrc	r24, 7
    1d14:	90 95       	com	r25
    1d16:	6c e0       	ldi	r22, 0x0C	; 12
    1d18:	71 e0       	ldi	r23, 0x01	; 1
    1d1a:	4a e0       	ldi	r20, 0x0A	; 10
    1d1c:	50 e0       	ldi	r21, 0x00	; 0
    1d1e:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <itoa>
    1d22:	0e 94 34 01 	call	0x268	; 0x268 <lcd_string>
  #endif
        wait_about4s();
    1d26:	80 e2       	ldi	r24, 0x20	; 32
    1d28:	93 e0       	ldi	r25, 0x03	; 3
    1d2a:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
        break;
    1d2e:	1b c0       	rjmp	.+54     	; 0x1d66 <AutoCheck+0x7da>
     ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
     while (cap.cpre < -9) {
        cap.cpre++;
        cap.cval /= 10;
     }
     if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000)) {
    1d30:	10 e0       	ldi	r17, 0x00	; 0
        lcd_string(itoa(udiff2, outval, 10));	//output correction voltage
  #endif
        wait_about4s();
        break;
     }
     lcd_line2();
    1d32:	80 ec       	ldi	r24, 0xC0	; 192
    1d34:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     DisplayValue(cap.cval,cap.cpre,'F',4);
    1d38:	60 91 62 01 	lds	r22, 0x0162
    1d3c:	70 91 63 01 	lds	r23, 0x0163
    1d40:	80 91 64 01 	lds	r24, 0x0164
    1d44:	90 91 65 01 	lds	r25, 0x0165
    1d48:	40 91 74 01 	lds	r20, 0x0174
    1d4c:	26 e4       	ldi	r18, 0x46	; 70
    1d4e:	04 e0       	ldi	r16, 0x04	; 4
    1d50:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
     wait_about200ms();			// wait additional time
    1d54:	88 e2       	ldi	r24, 0x28	; 40
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
 wait_about2s();		//wait 2 seconds
 
 #ifdef AUTO_CAL
 // Message C > 100nF
 cap_found = 0;
 for (ww=0;ww<64;ww++) {
    1d5c:	c3 94       	inc	r12
    1d5e:	8c 2d       	mov	r24, r12
    1d60:	80 34       	cpi	r24, 0x40	; 64
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <AutoCheck+0x7da>
    1d64:	f7 ce       	rjmp	.-530    	; 0x1b54 <AutoCheck+0x5c8>
     wait_about200ms();			// wait additional time
  } // end for ww
 #endif


  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    1d66:	89 e1       	ldi	r24, 0x19	; 25
    1d68:	80 93 3c 01 	sts	0x013C, r24
  lcd_clear();
    1d6c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  lcd_line2();
    1d70:	80 ec       	ldi	r24, 0xC0	; 192
    1d72:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix2_string(VERSION_str);	//"Version ..."
    1d76:	88 ed       	ldi	r24, 0xD8	; 216
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	0e 94 48 01 	call	0x290	; 0x290 <lcd_pgm_string>
  lcd_line1();
    1d7e:	80 e8       	ldi	r24, 0x80	; 128
    1d80:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(ATE);		//"Selftest End"
    1d84:	8c ed       	ldi	r24, 0xDC	; 220
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        // if key is pressed, don't repeat
        break;
     }
  }
 #endif
 PartFound = PART_NONE;
    1d8c:	10 92 07 01 	sts	0x0107, r1
 wait_about1s();			//wait 1 seconds
    1d90:	88 ec       	ldi	r24, 0xC8	; 200
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
    1d98:	03 c0       	rjmp	.+6      	; 0x1da0 <AutoCheck+0x814>
           lcd_fix_string(RHRH);	// "RHRH"
        }
                                        //############################################
        if (tt == 4) { // Text release probes
           lcd_fix_string(RELPROBE);	// "Release Probes"
           if (AllProbesShorted() != 0) ww = MAX_REP-2;
    1d9a:	72 e0       	ldi	r23, 0x02	; 2
    1d9c:	a7 2e       	mov	r10, r23
    1d9e:	bf cd       	rjmp	.-1154   	; 0x191e <AutoCheck+0x392>
  }
 #endif
 PartFound = PART_NONE;
 wait_about1s();			//wait 1 seconds
#endif
 } 
    1da0:	2e 96       	adiw	r28, 0x0e	; 14
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	de bf       	out	0x3e, r29	; 62
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	cd bf       	out	0x3d, r28	; 61
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	1f 91       	pop	r17
    1db2:	0f 91       	pop	r16
    1db4:	ff 90       	pop	r15
    1db6:	ef 90       	pop	r14
    1db8:	df 90       	pop	r13
    1dba:	cf 90       	pop	r12
    1dbc:	bf 90       	pop	r11
    1dbe:	af 90       	pop	r10
    1dc0:	9f 90       	pop	r9
    1dc2:	8f 90       	pop	r8
    1dc4:	7f 90       	pop	r7
    1dc6:	6f 90       	pop	r6
    1dc8:	5f 90       	pop	r5
    1dca:	4f 90       	pop	r4
    1dcc:	3f 90       	pop	r3
    1dce:	2f 90       	pop	r2
    1dd0:	08 95       	ret

00001dd2 <GetIr>:
/* Get residual current in reverse direction of a diode */ 



//=================================================================
void GetIr(uint8_t hipin, uint8_t lopin) {
    1dd2:	0f 93       	push	r16
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
  unsigned int ir_nano;
//  unsigned int ir_micro;
  uint8_t LoPinR_L;
  uint8_t HiADC;

  HiADC = pgm_read_byte(&PinADCtab[hipin]);
    1dd8:	e8 2f       	mov	r30, r24
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	e3 5f       	subi	r30, 0xF3	; 243
    1dde:	fe 4f       	sbci	r31, 0xFE	; 254
    1de0:	e4 91       	lpm	r30, Z+
  ADC_PORT = HiADC | TXD_VAL;		// switch ADC port to high level
    1de2:	e8 60       	ori	r30, 0x08	; 8
    1de4:	e8 b9       	out	0x08, r30	; 8
  ADC_DDR = HiADC | TXD_MSK;		// switch High Pin direct to VCC
    1de6:	e7 b9       	out	0x07, r30	; 7
  LoPinR_L = pgm_read_byte(&PinRLtab[lopin]);  //R_L mask for LowPin R_L load
    1de8:	e6 2f       	mov	r30, r22
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	e6 5f       	subi	r30, 0xF6	; 246
    1dee:	fe 4f       	sbci	r31, 0xFE	; 254
    1df0:	e4 91       	lpm	r30, Z+
  R_PORT = 0;				// switch R-Port to GND
    1df2:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinR_L + LoPinR_L;		// switch R_H port for LowPin to output (GND)
    1df4:	ee 0f       	add	r30, r30
    1df6:	e4 b9       	out	0x04, r30	; 4
  u_res = W5msReadADC(lopin);		// read voltage
    1df8:	86 2f       	mov	r24, r22
    1dfa:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
    1dfe:	ec 01       	movw	r28, r24
  if (u_res == 0) return;		// no Output, if no current in reverse direction
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	f9 f0       	breq	.+62     	; 0x1e42 <GetIr+0x70>
  lcd_fix_string(Ir_str);		// output text "  Ir="
    1e04:	8d e3       	ldi	r24, 0x3D	; 61
    1e06:	91 e0       	ldi	r25, 0x01	; 1
    1e08:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
#ifdef WITH_IRMICRO
  if (u_res < 2500) {
#endif
     /* R_H_VAL has units of 10 Ohm, u_res has units of mV, ir_nano has units of nA */
     ir_nano = (unsigned long)(u_res * 100000UL) / R_H_VAL;
    1e0c:	be 01       	movw	r22, r28
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	20 ea       	ldi	r18, 0xA0	; 160
    1e14:	36 e8       	ldi	r19, 0x86	; 134
    1e16:	41 e0       	ldi	r20, 0x01	; 1
    1e18:	50 e0       	ldi	r21, 0x00	; 0
    1e1a:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
    1e1e:	28 e9       	ldi	r18, 0x98	; 152
    1e20:	37 eb       	ldi	r19, 0xB7	; 183
    1e22:	40 e0       	ldi	r20, 0x00	; 0
    1e24:	50 e0       	ldi	r21, 0x00	; 0
    1e26:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
     DisplayValue(ir_nano,-9,'A',2);	// output two digits of current with nA units
    1e2a:	b9 01       	movw	r22, r18
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	47 ef       	ldi	r20, 0xF7	; 247
    1e32:	21 e4       	ldi	r18, 0x41	; 65
    1e34:	02 e0       	ldi	r16, 0x02	; 2
    1e36:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
     /* RR680MI has units of 0.1 Ohm, u_res has units of mV, ir_micro has units of uA */
     ir_micro = (unsigned long)(u_res * 10000UL) / RR680MI;
     DisplayValue(ir_micro,-6,'A',2);	// output two digits of current in uA units
  }
#endif
  ADC_DDR = TXD_MSK;			// switch off
    1e3a:	88 e0       	ldi	r24, 0x08	; 8
    1e3c:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;			// switch off
    1e3e:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;				// switch off current
    1e40:	14 b8       	out	0x04, r1	; 4

  return ;
}
    1e42:	df 91       	pop	r29
    1e44:	cf 91       	pop	r28
    1e46:	0f 91       	pop	r16
    1e48:	08 95       	ret

00001e4a <main>:
  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
  EMPTY_INTERRUPT(ADC_vect);
#endif

//begin of transistortester program
int main(void) {
    1e4a:	0f 93       	push	r16
    1e4c:	1f 93       	push	r17
  //switch on
  ON_DDR = (1<<ON_PIN);			// switch to output
    1e4e:	80 e4       	ldi	r24, 0x40	; 64
    1e50:	8a b9       	out	0x0a, r24	; 10
#ifdef PULLUP_DISABLE
  ON_PORT = (1<<ON_PIN); 		// switch power on 
    1e52:	8b b9       	out	0x0b, r24	; 11
#else
  ON_PORT = (1<<ON_PIN)|(1<<RST_PIN); 	// switch power on , enable internal Pullup for Start-Pin
#endif
  uint8_t tmp;
  //ADC-Init
  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
    1e54:	86 e8       	ldi	r24, 0x86	; 134
    1e56:	80 93 7a 00 	sts	0x007A, r24
// #define WDRF_HOME MCU_STATUS_REG
 #define WDRF_HOME MCUCSR
#else
 #define WDRF_HOME MCUSR
#endif
  tmp = (WDRF_HOME & (1<<WDRF));	// save Watch Dog Flag
    1e5a:	14 b7       	in	r17, 0x34	; 52
  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
    1e5c:	84 b7       	in	r24, 0x34	; 52
    1e5e:	87 7f       	andi	r24, 0xF7	; 247
    1e60:	84 bf       	out	0x34, r24	; 52
  wdt_disable();			// disable Watch Dog
    1e62:	88 e1       	ldi	r24, 0x18	; 24
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	f8 94       	cli
    1e68:	80 93 60 00 	sts	0x0060, r24
    1e6c:	10 92 60 00 	sts	0x0060, r1
    1e70:	0f be       	out	0x3f, r0	; 63
#ifndef INHIBIT_SLEEP_MODE
  // switch off unused Parts
  PRR = (1<<PRTWI) | (1<<PRTIM0) | (1<<PRSPI) | (1<<PRUSART0);
    1e72:	86 ea       	ldi	r24, 0xA6	; 166
    1e74:	80 93 64 00 	sts	0x0064, r24
  DIDR0 = (1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D);	
    1e78:	88 e3       	ldi	r24, 0x38	; 56
    1e7a:	80 93 7e 00 	sts	0x007E, r24
  TCCR2A = (0<<WGM21) | (0<<WGM20);		// Counter 2 normal mode
    1e7e:	10 92 b0 00 	sts	0x00B0, r1
 #if F_CPU == 4000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (0<<CS20);	//prescaler 256, 64us @ 2MHz
  #define T2_PERIOD 64
 #endif 
 #if F_CPU >= 8000000UL
  TCCR2B = (1<<CS22) | (1<<CS21) | (1<<CS20);	//prescaler 1024, 128us @ 8MHz, 64us @ 16MHz
    1e82:	87 e0       	ldi	r24, 0x07	; 7
    1e84:	80 93 b1 00 	sts	0x00B1, r24
  #define T2_PERIOD (1024 / (F_CPU / 1000000UL));	/* set to 128 or 64 us */
 #endif 
  sei();				// enable interrupts
    1e88:	78 94       	sei
#endif
  lcd_init();				//initialize LCD
    1e8a:	0e 94 08 01 	call	0x210	; 0x210 <lcd_init>
	
//  ADC_PORT = TXD_VAL;
//  ADC_DDR = TXD_MSK;
  if(tmp) { 
    1e8e:	13 ff       	sbrs	r17, 3
    1e90:	0a c0       	rjmp	.+20     	; 0x1ea6 <main+0x5c>
     // check if  Watchdog-Event 
     // this happens, if the Watchdog is not reset for 2s
     // can happen, if any loop in the Program doen't finish.
     lcd_line1();
    1e92:	80 e8       	ldi	r24, 0x80	; 128
    1e94:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     lcd_fix_string(TestTimedOut);	//Output Timeout
    1e98:	84 eb       	ldi	r24, 0xB4	; 180
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     wait_about3s();				//wait for 3 s
    1ea0:	88 e5       	ldi	r24, 0x58	; 88
    1ea2:	92 e0       	ldi	r25, 0x02	; 2
    1ea4:	92 c0       	rjmp	.+292    	; 0x1fca <main+0x180>
     ON_PORT = 0;			//shut off!
//     ON_DDR = (1<<ON_PIN);		//switch to GND
     return 0;
  }
  LCDLoadCustomChar(LCD_CHAR_DIODE1);	//Custom-Character Diode symbol
    1ea6:	88 e4       	ldi	r24, 0x48	; 72
    1ea8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(DiodeIcon1);	//load Character  >|
    1eac:	87 e9       	ldi	r24, 0x97	; 151
    1eae:	91 e0       	ldi	r25, 0x01	; 1
    1eb0:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_DIODE2);	//Custom-Character 
    1eb4:	80 e5       	ldi	r24, 0x50	; 80
    1eb6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(DiodeIcon2);	//load Character  |<
    1eba:	8f e9       	ldi	r24, 0x9F	; 159
    1ebc:	91 e0       	ldi	r25, 0x01	; 1
    1ebe:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_CAP);	//Custom-Character  Capacitor symbol
    1ec2:	88 e5       	ldi	r24, 0x58	; 88
    1ec4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(CapIcon);		//load Character  ||
    1ec8:	87 ea       	ldi	r24, 0xA7	; 167
    1eca:	91 e0       	ldi	r25, 0x01	; 1
    1ecc:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS1);	//Custom-Character Resistor symbol
    1ed0:	88 e7       	ldi	r24, 0x78	; 120
    1ed2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(ResIcon1);		//load Character  [
    1ed6:	8f ea       	ldi	r24, 0xAF	; 175
    1ed8:	91 e0       	ldi	r25, 0x01	; 1
    1eda:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
  LCDLoadCustomChar(LCD_CHAR_RESIS2);	//Custom-Character 
    1ede:	80 e7       	ldi	r24, 0x70	; 112
    1ee0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_customchar(ResIcon2);		//load Character  ]
    1ee4:	87 eb       	ldi	r24, 0xB7	; 183
    1ee6:	91 e0       	ldi	r25, 0x01	; 1
    1ee8:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_fix_customchar>
#endif
#ifdef PULLUP_DISABLE
 #ifdef __AVR_ATmega8__
  SFIOR = (1<<PUD);		// disable Pull-Up Resistors mega8
 #else
  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
    1eec:	80 e1       	ldi	r24, 0x10	; 16
    1eee:	85 bf       	out	0x35, r24	; 53
  }
#else
  #define display_time OFF_WAIT_TIME
#endif

  empty_count = 0;
    1ef0:	10 92 4a 01 	sts	0x014A, r1
  mess_count = 0;
    1ef4:	10 92 0b 01 	sts	0x010B, r1

//*****************************************************************
//Entry: if start key is pressed before shut down
start:
  PartFound = PART_NONE;	// no part found
    1ef8:	10 92 07 01 	sts	0x0107, r1
  NumOfDiodes = 0;		// Number of diodes = 0
    1efc:	10 92 05 01 	sts	0x0105, r1
  PartReady = 0;
    1f00:	10 92 04 01 	sts	0x0104, r1
  PartMode = 0;
    1f04:	10 92 06 01 	sts	0x0106, r1
  WithReference = 0;		// no precision reference voltage
    1f08:	10 92 49 01 	sts	0x0149, r1
  lcd_clear();
    1f0c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  ADC_DDR = TXD_MSK;		//activate Software-UART 
    1f10:	88 e0       	ldi	r24, 0x08	; 8
    1f12:	87 b9       	out	0x07, r24	; 7
  ResistorsFound = 0;		// no resistors found
    1f14:	10 92 5e 01 	sts	0x015E, r1
  cap.ca = 0;
    1f18:	10 92 72 01 	sts	0x0172, r1
  cap.cb = 0;
    1f1c:	10 92 73 01 	sts	0x0173, r1
#ifdef WITH_UART
  uart_newline();		// start of new measurement
    1f20:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <uart_newline>
#endif
  ADCconfig.RefFlag = 0;
    1f24:	10 92 3d 01 	sts	0x013D, r1
  Calibrate_UR();		// get Ref Voltages and Pin resistance
    1f28:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <Calibrate_UR>
  lcd_line1();	//1. row 
    1f2c:	80 e8       	ldi	r24, 0x80	; 128
    1f2e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  
  ADCconfig.U_Bandgap = ADC_internal_reference;	// set internal reference voltage for ADC
    1f32:	8f eb       	ldi	r24, 0xBF	; 191
    1f34:	91 e0       	ldi	r25, 0x01	; 1
    1f36:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <__eerd_byte_m168>
    1f3a:	99 27       	eor	r25, r25
    1f3c:	87 fd       	sbrc	r24, 7
    1f3e:	90 95       	com	r25
    1f40:	20 91 44 01 	lds	r18, 0x0144
    1f44:	30 91 45 01 	lds	r19, 0x0145
    1f48:	82 0f       	add	r24, r18
    1f4a:	93 1f       	adc	r25, r19
    1f4c:	90 93 3f 01 	sts	0x013F, r25
    1f50:	80 93 3e 01 	sts	0x013E, r24

#ifdef BAT_CHECK
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
    1f54:	85 e0       	ldi	r24, 0x05	; 5
    1f56:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
  trans.uBE[0] = W5msReadADC(TPBAT); 	//with 5V reference
    1f5a:	85 e0       	ldi	r24, 0x05	; 5
    1f5c:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
    1f60:	90 93 58 01 	sts	0x0158, r25
    1f64:	80 93 57 01 	sts	0x0157, r24
  lcd_fix_string(Bat_str);		//output: "Bat. "
    1f68:	85 ee       	ldi	r24, 0xE5	; 229
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  // display Battery voltage
  // The divisor to get the voltage in 0.01V units is ((10*33)/133) witch is about 2.4812
  // A good result can be get with multiply by 4 and divide by 10 (about 0.75%).
//  cap.cval = (trans.uBE[0]*4)/10+((BAT_OUT+5)/10); // usually output only 2 digits
//  DisplayValue(cap.cval,-2,'V',2);		// Display 2 Digits of this 10mV units
  cap.cval = (trans.uBE[0]*4)+BAT_OUT;		// usually output only 2 digits
    1f70:	60 91 57 01 	lds	r22, 0x0157
    1f74:	70 91 58 01 	lds	r23, 0x0158
    1f78:	66 0f       	add	r22, r22
    1f7a:	77 1f       	adc	r23, r23
    1f7c:	66 0f       	add	r22, r22
    1f7e:	77 1f       	adc	r23, r23
    1f80:	6a 56       	subi	r22, 0x6A	; 106
    1f82:	7f 4f       	sbci	r23, 0xFF	; 255
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	60 93 62 01 	sts	0x0162, r22
    1f8c:	70 93 63 01 	sts	0x0163, r23
    1f90:	80 93 64 01 	sts	0x0164, r24
    1f94:	90 93 65 01 	sts	0x0165, r25
  DisplayValue(cap.cval,-3,'V',2);		// Display 2 Digits of this 10mV units
    1f98:	4d ef       	ldi	r20, 0xFD	; 253
    1f9a:	26 e5       	ldi	r18, 0x56	; 86
    1f9c:	02 e0       	ldi	r16, 0x02	; 2
    1f9e:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
  lcd_space();
    1fa2:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>
  // less than 1.3 V only .1V difference to Warn-Level
  #define WARN_LEVEL (((unsigned long)(BAT_POOR+100)*(unsigned long)33)/133)
 #endif
 #define POOR_LEVEL (((unsigned long)(BAT_POOR)*(unsigned long)33)/133)
  // check the battery voltage
  if (trans.uBE[0] <  WARN_LEVEL) {
    1fa6:	80 91 57 01 	lds	r24, 0x0157
    1faa:	90 91 58 01 	lds	r25, 0x0158
    1fae:	26 e0       	ldi	r18, 0x06	; 6
    1fb0:	8a 3f       	cpi	r24, 0xFA	; 250
    1fb2:	92 07       	cpc	r25, r18
    1fb4:	a8 f4       	brcc	.+42     	; 0x1fe0 <main+0x196>
     //Vcc < 7,3V; show Warning 
     if(trans.uBE[0] < POOR_LEVEL) {	
    1fb6:	26 e0       	ldi	r18, 0x06	; 6
    1fb8:	83 33       	cpi	r24, 0x33	; 51
    1fba:	92 07       	cpc	r25, r18
    1fbc:	70 f4       	brcc	.+28     	; 0x1fda <main+0x190>
        //Vcc <6,3V; no proper operation is possible
        lcd_fix_string(BatEmpty);	//Battery empty!
    1fbe:	8a e6       	ldi	r24, 0x6A	; 106
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        wait_about2s();
    1fc6:	80 e9       	ldi	r24, 0x90	; 144
    1fc8:	91 e0       	ldi	r25, 0x01	; 1
    1fca:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
        PORTD = 0;			//switch power off
    1fce:	1b b8       	out	0x0b, r1	; 11
  }
#else
  goto start;	// POWER_OFF not selected, repeat measurement
#endif
  return 0;
}   // end main
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	1f 91       	pop	r17
    1fd6:	0f 91       	pop	r16
    1fd8:	08 95       	ret
        lcd_fix_string(BatEmpty);	//Battery empty!
        wait_about2s();
        PORTD = 0;			//switch power off
        return 0;
     }
     lcd_fix_string(BatWeak);		//Battery weak
    1fda:	85 e6       	ldi	r24, 0x65	; 101
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <main+0x19a>
  } else { // Battery-voltage OK
     lcd_fix_string(OK_str); 		// "OK"
    1fe0:	8b ee       	ldi	r24, 0xEB	; 235
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  }
#else
  lcd_fix2_string(VERSION_str);		// if no Battery check, Version .. in row 1
#endif
#ifdef WDT_enabled
  wdt_enable(WDTO_2S);		//Watchdog on
    1fe8:	2f e0       	ldi	r18, 0x0F	; 15
    1fea:	88 e1       	ldi	r24, 0x18	; 24
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	a8 95       	wdr
    1ff4:	80 93 60 00 	sts	0x0060, r24
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	20 93 60 00 	sts	0x0060, r18
#endif

//  wait_about1s();			// add more time for reading batterie voltage
  // begin tests
#ifdef AUTO_RH
  RefVoltage();			//compute RHmultip = f(reference voltage)
    1ffe:	0e 94 4d 02 	call	0x49a	; 0x49a <RefVoltage>
#endif
#if FLASHEND > 0x1fff
  if (WithReference) {
    2002:	80 91 49 01 	lds	r24, 0x0149
    2006:	88 23       	and	r24, r24
    2008:	f1 f0       	breq	.+60     	; 0x2046 <main+0x1fc>
     /* 2.5V precision reference is checked OK */
     if ((mess_count == 0) && (empty_count == 0)) {
    200a:	80 91 0b 01 	lds	r24, 0x010B
    200e:	88 23       	and	r24, r24
    2010:	d1 f4       	brne	.+52     	; 0x2046 <main+0x1fc>
    2012:	80 91 4a 01 	lds	r24, 0x014A
    2016:	88 23       	and	r24, r24
    2018:	b1 f4       	brne	.+44     	; 0x2046 <main+0x1fc>
         /* display VCC= only first time */
         lcd_line2();
    201a:	80 ec       	ldi	r24, 0xC0	; 192
    201c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
         lcd_fix_string(VCC_str);		// VCC=
    2020:	87 e2       	ldi	r24, 0x27	; 39
    2022:	91 e0       	ldi	r25, 0x01	; 1
    2024:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
         DisplayValue(ADCconfig.U_AVCC,-3,'V',3);	// Display 3 Digits of this mV units
    2028:	60 91 40 01 	lds	r22, 0x0140
    202c:	70 91 41 01 	lds	r23, 0x0141
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	4d ef       	ldi	r20, 0xFD	; 253
    2036:	26 e5       	ldi	r18, 0x56	; 86
    2038:	03 e0       	ldi	r16, 0x03	; 3
    203a:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
//         lcd_space();
//         DisplayValue(RRpinMI,-1,LCD_CHAR_OMEGA,4);
         wait_about1s();
    203e:	88 ec       	ldi	r24, 0xC8	; 200
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
     DisplayValue(trans.uBE[1]*10,-3,'V',3);	// Display 3 Digits of this mV units
     wait_about300ms();
  }
#endif

  lcd_line2();			//LCD position row2, column 1
    2046:	80 ec       	ldi	r24, 0xC0	; 192
    2048:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  lcd_fix_string(TestRunning);		//String: testing...
    204c:	8a e5       	ldi	r24, 0x5A	; 90
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
#ifndef DebugOut
  lcd_line2();			//LCD position row 2, column 1
    2054:	80 ec       	ldi	r24, 0xC0	; 192
    2056:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
#endif
  EntladePins();		// discharge all capacitors!
    205a:	0e 94 b2 01 	call	0x364	; 0x364 <EntladePins>
  if(PartFound == PART_CELL) {
    205e:	80 91 07 01 	lds	r24, 0x0107
    2062:	88 30       	cpi	r24, 0x08	; 8
    2064:	39 f4       	brne	.+14     	; 0x2074 <main+0x22a>
    lcd_clear();
    2066:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
    lcd_fix_string(Cell_str);	// display "Cell!"
    206a:	81 e2       	ldi	r24, 0x21	; 33
    206c:	91 e0       	ldi	r25, 0x01	; 1
    206e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    goto end2;
    2072:	bb c3       	rjmp	.+1910   	; 0x27ea <main+0x9a0>
  }

#ifdef CHECK_CALL
  AutoCheck();			//check, if selftest should be done
    2074:	0e 94 c6 0a 	call	0x158c	; 0x158c <AutoCheck>
#endif
     
  // check all 6 combinations for the 3 pins 
//         High  Low  Tri
  CheckPins(TP1, TP2, TP3);
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	61 e0       	ldi	r22, 0x01	; 1
    207c:	42 e0       	ldi	r20, 0x02	; 2
    207e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <CheckPins>
  CheckPins(TP2, TP1, TP3);
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	60 e0       	ldi	r22, 0x00	; 0
    2086:	42 e0       	ldi	r20, 0x02	; 2
    2088:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <CheckPins>

  CheckPins(TP1, TP3, TP2);
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	62 e0       	ldi	r22, 0x02	; 2
    2090:	41 e0       	ldi	r20, 0x01	; 1
    2092:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <CheckPins>
  CheckPins(TP3, TP1, TP2);
    2096:	82 e0       	ldi	r24, 0x02	; 2
    2098:	60 e0       	ldi	r22, 0x00	; 0
    209a:	41 e0       	ldi	r20, 0x01	; 1
    209c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <CheckPins>

  CheckPins(TP2, TP3, TP1);
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	62 e0       	ldi	r22, 0x02	; 2
    20a4:	40 e0       	ldi	r20, 0x00	; 0
    20a6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <CheckPins>
  CheckPins(TP3, TP2, TP1);
    20aa:	82 e0       	ldi	r24, 0x02	; 2
    20ac:	61 e0       	ldi	r22, 0x01	; 1
    20ae:	40 e0       	ldi	r20, 0x00	; 0
    20b0:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <CheckPins>
  
  //separate check if is is a capacitor
  if(((PartFound == PART_NONE) || (PartFound == PART_RESISTOR) || (PartFound == PART_DIODE)) ) {
    20b4:	80 91 07 01 	lds	r24, 0x0107
    20b8:	88 23       	and	r24, r24
    20ba:	21 f0       	breq	.+8      	; 0x20c4 <main+0x27a>
    20bc:	86 30       	cpi	r24, 0x06	; 6
    20be:	11 f0       	breq	.+4      	; 0x20c4 <main+0x27a>
    20c0:	81 30       	cpi	r24, 0x01	; 1
    20c2:	d9 f4       	brne	.+54     	; 0x20fa <main+0x2b0>
     EntladePins();		// discharge capacities
    20c4:	0e 94 b2 01 	call	0x364	; 0x364 <EntladePins>
     //measurement of capacities in all 3 combinations
     cap.cval_max = 0;		// set max to zero
    20c8:	10 92 66 01 	sts	0x0166, r1
    20cc:	10 92 67 01 	sts	0x0167, r1
    20d0:	10 92 68 01 	sts	0x0168, r1
    20d4:	10 92 69 01 	sts	0x0169, r1
     cap.cpre_max = -12;	// set max to pF unit
    20d8:	84 ef       	ldi	r24, 0xF4	; 244
    20da:	80 93 75 01 	sts	0x0175, r24
     ReadCapacity(TP3, TP1);
    20de:	82 e0       	ldi	r24, 0x02	; 2
    20e0:	60 e0       	ldi	r22, 0x00	; 0
    20e2:	0e 94 ef 14 	call	0x29de	; 0x29de <ReadCapacity>
     ReadCapacity(TP3, TP2);
    20e6:	82 e0       	ldi	r24, 0x02	; 2
    20e8:	61 e0       	ldi	r22, 0x01	; 1
    20ea:	0e 94 ef 14 	call	0x29de	; 0x29de <ReadCapacity>
     ReadCapacity(TP2, TP1);
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	60 e0       	ldi	r22, 0x00	; 0
    20f2:	0e 94 ef 14 	call	0x29de	; 0x29de <ReadCapacity>

#if FLASHEND > 0x1fff
     ReadInductance();			// measure inductance
    20f6:	0e 94 11 18 	call	0x3022	; 0x3022 <ReadInductance>
#endif
  }
  //All checks are done, output result to display
  lcd_clear();
    20fa:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <lcd_clear>
  if(PartFound == PART_DIODE) {
    20fe:	80 91 07 01 	lds	r24, 0x0107
    2102:	81 30       	cpi	r24, 0x01	; 1
    2104:	09 f0       	breq	.+2      	; 0x2108 <main+0x2be>
    2106:	10 c1       	rjmp	.+544    	; 0x2328 <main+0x4de>
     if(NumOfDiodes == 1) {		//single Diode
    2108:	90 91 05 01 	lds	r25, 0x0105
    210c:	91 30       	cpi	r25, 0x01	; 1
    210e:	d1 f5       	brne	.+116    	; 0x2184 <main+0x33a>
           lcd_fix_string(KatAn);	//"-|<-"
           lcd_testpin(diodes[0].Anode);
        }
 #else
        // the higher test pin number is right side
        if (diodes[0].Anode < diodes[0].Cathode) {
    2110:	90 91 78 01 	lds	r25, 0x0178
    2114:	80 91 79 01 	lds	r24, 0x0179
    2118:	98 17       	cp	r25, r24
    211a:	50 f4       	brcc	.+20     	; 0x2130 <main+0x2e6>
           lcd_testpin(diodes[0].Anode);
    211c:	89 2f       	mov	r24, r25
    211e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2122:	83 e4       	ldi	r24, 0x43	; 67
    2124:	91 e0       	ldi	r25, 0x01	; 1
    2126:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    212a:	80 91 79 01 	lds	r24, 0x0179
    212e:	08 c0       	rjmp	.+16     	; 0x2140 <main+0x2f6>
        } else {
           lcd_testpin(diodes[0].Cathode);
    2130:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    2134:	87 e4       	ldi	r24, 0x47	; 71
    2136:	91 e0       	ldi	r25, 0x01	; 1
    2138:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    213c:	80 91 78 01 	lds	r24, 0x0178
    2140:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
        lcd_testpin(diodes[0].Anode);
        lcd_fix_string(AnKat);		//"->|-"
        lcd_testpin(diodes[0].Cathode);
#endif
#if FLASHEND > 0x1fff
	GetIr(diodes[0].Cathode,diodes[0].Anode);
    2144:	80 91 79 01 	lds	r24, 0x0179
    2148:	60 91 78 01 	lds	r22, 0x0178
    214c:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <GetIr>
#endif
        UfAusgabe(0x70);
    2150:	80 e7       	ldi	r24, 0x70	; 112
    2152:	0e 94 a1 03 	call	0x742	; 0x742 <UfAusgabe>
        /* load current of capacity is (5V-1.1V)/(470000 Ohm) = 8298nA */
        lcd_fix_string(GateCap_str);	//"C="
    2156:	88 ef       	ldi	r24, 0xF8	; 248
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        ReadCapacity(diodes[0].Cathode,diodes[0].Anode);	// Capacity opposite flow direction
    215e:	80 91 79 01 	lds	r24, 0x0179
    2162:	60 91 78 01 	lds	r22, 0x0178
    2166:	0e 94 ef 14 	call	0x29de	; 0x29de <ReadCapacity>
        DisplayValue(cap.cval,cap.cpre,'F',3);
    216a:	60 91 62 01 	lds	r22, 0x0162
    216e:	70 91 63 01 	lds	r23, 0x0163
    2172:	80 91 64 01 	lds	r24, 0x0164
    2176:	90 91 65 01 	lds	r25, 0x0165
    217a:	40 91 74 01 	lds	r20, 0x0174
    217e:	26 e4       	ldi	r18, 0x46	; 70
    2180:	03 e0       	ldi	r16, 0x03	; 3
    2182:	51 c1       	rjmp	.+674    	; 0x2426 <main+0x5dc>
        goto end;
     } else if(NumOfDiodes == 2) { // double diode
    2184:	92 30       	cpi	r25, 0x02	; 2
    2186:	09 f0       	breq	.+2      	; 0x218a <main+0x340>
    2188:	4c c0       	rjmp	.+152    	; 0x2222 <main+0x3d8>
        lcd_data('2');
    218a:	82 e3       	ldi	r24, 0x32	; 50
    218c:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
        lcd_fix_string(Dioden);		//"diodes "
    2190:	8b e4       	ldi	r24, 0x4B	; 75
    2192:	91 e0       	ldi	r25, 0x01	; 1
    2194:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        if(diodes[0].Anode == diodes[1].Anode) { //Common Anode
    2198:	90 91 78 01 	lds	r25, 0x0178
    219c:	20 91 7c 01 	lds	r18, 0x017C
    21a0:	92 17       	cp	r25, r18
    21a2:	59 f4       	brne	.+22     	; 0x21ba <main+0x370>
           lcd_testpin(diodes[0].Cathode);
    21a4:	80 91 79 01 	lds	r24, 0x0179
    21a8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    21ac:	87 e4       	ldi	r24, 0x47	; 71
    21ae:	91 e0       	ldi	r25, 0x01	; 1
    21b0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[0].Anode);
    21b4:	80 91 78 01 	lds	r24, 0x0178
    21b8:	2b c0       	rjmp	.+86     	; 0x2210 <main+0x3c6>
           lcd_fix_string(AnKat);	//"->|-"
           lcd_testpin(diodes[1].Cathode);
           UfAusgabe(0x01);
           goto end;
        } else if(diodes[0].Cathode == diodes[1].Cathode) { //Common Cathode
    21ba:	30 91 79 01 	lds	r19, 0x0179
    21be:	80 91 7d 01 	lds	r24, 0x017D
    21c2:	38 17       	cp	r19, r24
    21c4:	b9 f4       	brne	.+46     	; 0x21f4 <main+0x3aa>
           lcd_testpin(diodes[0].Anode);
    21c6:	89 2f       	mov	r24, r25
    21c8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    21cc:	83 e4       	ldi	r24, 0x43	; 67
    21ce:	91 e0       	ldi	r25, 0x01	; 1
    21d0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
	   lcd_testpin(diodes[0].Cathode);
    21d4:	80 91 79 01 	lds	r24, 0x0179
    21d8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(KatAn);	//"-|<-"
    21dc:	87 e4       	ldi	r24, 0x47	; 71
    21de:	91 e0       	ldi	r25, 0x01	; 1
    21e0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[1].Anode);
    21e4:	80 91 7c 01 	lds	r24, 0x017C
    21e8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           UfAusgabe(0x01);
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	0e 94 a1 03 	call	0x742	; 0x742 <UfAusgabe>
           goto end;
    21f2:	f4 c2       	rjmp	.+1512   	; 0x27dc <main+0x992>
          }
        else if ((diodes[0].Cathode == diodes[1].Anode) && (diodes[1].Cathode == diodes[0].Anode)) {
    21f4:	32 17       	cp	r19, r18
    21f6:	09 f0       	breq	.+2      	; 0x21fa <main+0x3b0>
    21f8:	bf c2       	rjmp	.+1406   	; 0x2778 <main+0x92e>
    21fa:	89 17       	cp	r24, r25
    21fc:	09 f0       	breq	.+2      	; 0x2200 <main+0x3b6>
    21fe:	bc c2       	rjmp	.+1400   	; 0x2778 <main+0x92e>
           //Antiparallel
           lcd_testpin(diodes[0].Anode);
    2200:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2204:	83 e4       	ldi	r24, 0x43	; 67
    2206:	91 e0       	ldi	r25, 0x01	; 1
    2208:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[0].Cathode);
    220c:	80 91 79 01 	lds	r24, 0x0179
    2210:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    2214:	83 e4       	ldi	r24, 0x43	; 67
    2216:	91 e0       	ldi	r25, 0x01	; 1
    2218:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[1].Cathode);
    221c:	80 91 7d 01 	lds	r24, 0x017D
    2220:	e3 cf       	rjmp	.-58     	; 0x21e8 <main+0x39e>
           UfAusgabe(0x01);
           goto end;
        }
     } else if(NumOfDiodes == 3) {
    2222:	93 30       	cpi	r25, 0x03	; 3
    2224:	09 f0       	breq	.+2      	; 0x2228 <main+0x3de>
    2226:	a8 c2       	rjmp	.+1360   	; 0x2778 <main+0x92e>
        //Serial of 2 Diodes; was detected as 3 Diodes 
        trans.b = 3;
    2228:	90 93 5b 01 	sts	0x015B, r25
        trans.c = 3;
    222c:	90 93 5c 01 	sts	0x015C, r25
        /* Check for any constallation of 2 serial diodes:
          Only once the pin No of anyone Cathode is identical of another anode.
          two diodes in series is additionally detected as third big diode.
        */
        if(diodes[0].Cathode == diodes[1].Anode)
    2230:	50 91 79 01 	lds	r21, 0x0179
    2234:	90 91 7c 01 	lds	r25, 0x017C
    2238:	59 17       	cp	r21, r25
    223a:	21 f4       	brne	.+8      	; 0x2244 <main+0x3fa>
          {
           trans.b = 0;
    223c:	10 92 5b 01 	sts	0x015B, r1
           trans.c = 1;
    2240:	80 93 5c 01 	sts	0x015C, r24
          }
        if(diodes[0].Anode == diodes[1].Cathode)
    2244:	40 91 78 01 	lds	r20, 0x0178
    2248:	30 91 7d 01 	lds	r19, 0x017D
    224c:	43 17       	cp	r20, r19
    224e:	29 f4       	brne	.+10     	; 0x225a <main+0x410>
          {
           trans.b = 1;
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	80 93 5b 01 	sts	0x015B, r24
           trans.c = 0;
    2256:	10 92 5c 01 	sts	0x015C, r1
          }
        if(diodes[0].Cathode == diodes[2].Anode)
    225a:	20 91 80 01 	lds	r18, 0x0180
    225e:	52 17       	cp	r21, r18
    2260:	29 f4       	brne	.+10     	; 0x226c <main+0x422>
          {
           trans.b = 0;
    2262:	10 92 5b 01 	sts	0x015B, r1
           trans.c = 2;
    2266:	82 e0       	ldi	r24, 0x02	; 2
    2268:	80 93 5c 01 	sts	0x015C, r24
          }
        if(diodes[0].Anode == diodes[2].Cathode)
    226c:	80 91 81 01 	lds	r24, 0x0181
    2270:	48 17       	cp	r20, r24
    2272:	29 f4       	brne	.+10     	; 0x227e <main+0x434>
          {
           trans.b = 2;
    2274:	42 e0       	ldi	r20, 0x02	; 2
    2276:	40 93 5b 01 	sts	0x015B, r20
           trans.c = 0;
    227a:	10 92 5c 01 	sts	0x015C, r1
          }
        if(diodes[1].Cathode == diodes[2].Anode)
    227e:	32 17       	cp	r19, r18
    2280:	31 f4       	brne	.+12     	; 0x228e <main+0x444>
          {
           trans.b = 1;
    2282:	21 e0       	ldi	r18, 0x01	; 1
    2284:	20 93 5b 01 	sts	0x015B, r18
           trans.c = 2;
    2288:	22 e0       	ldi	r18, 0x02	; 2
    228a:	20 93 5c 01 	sts	0x015C, r18
          }
        if(diodes[1].Anode == diodes[2].Cathode)
    228e:	98 17       	cp	r25, r24
    2290:	31 f4       	brne	.+12     	; 0x229e <main+0x454>
          {
           trans.b = 2;
    2292:	82 e0       	ldi	r24, 0x02	; 2
    2294:	80 93 5b 01 	sts	0x015B, r24
           trans.c = 1;
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	80 93 5c 01 	sts	0x015C, r24
        lcd_testpin(diodes[2].Cathode);
        lcd_space();
        lcd_string(utoa(diodes[2].Voltage, outval, 10));
        lcd_line1();
#endif
        if((trans.b<3) && (trans.c<3)) {
    229e:	80 91 5b 01 	lds	r24, 0x015B
    22a2:	83 30       	cpi	r24, 0x03	; 3
    22a4:	08 f0       	brcs	.+2      	; 0x22a8 <main+0x45e>
    22a6:	68 c2       	rjmp	.+1232   	; 0x2778 <main+0x92e>
    22a8:	80 91 5c 01 	lds	r24, 0x015C
    22ac:	83 30       	cpi	r24, 0x03	; 3
    22ae:	08 f0       	brcs	.+2      	; 0x22b2 <main+0x468>
    22b0:	63 c2       	rjmp	.+1222   	; 0x2778 <main+0x92e>
           lcd_data('3');
    22b2:	83 e3       	ldi	r24, 0x33	; 51
    22b4:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
           lcd_fix_string(Dioden);	//"Diodes "
    22b8:	8b e4       	ldi	r24, 0x4B	; 75
    22ba:	91 e0       	ldi	r25, 0x01	; 1
    22bc:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Anode);
    22c0:	e0 91 5b 01 	lds	r30, 0x015B
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	ee 0f       	add	r30, r30
    22c8:	ff 1f       	adc	r31, r31
    22ca:	ee 0f       	add	r30, r30
    22cc:	ff 1f       	adc	r31, r31
    22ce:	e8 58       	subi	r30, 0x88	; 136
    22d0:	fe 4f       	sbci	r31, 0xFE	; 254
    22d2:	80 81       	ld	r24, Z
    22d4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    22d8:	83 e4       	ldi	r24, 0x43	; 67
    22da:	91 e0       	ldi	r25, 0x01	; 1
    22dc:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[trans.b].Cathode);
    22e0:	e0 91 5b 01 	lds	r30, 0x015B
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	ee 0f       	add	r30, r30
    22e8:	ff 1f       	adc	r31, r31
    22ea:	ee 0f       	add	r30, r30
    22ec:	ff 1f       	adc	r31, r31
    22ee:	e8 58       	subi	r30, 0x88	; 136
    22f0:	fe 4f       	sbci	r31, 0xFE	; 254
    22f2:	81 81       	ldd	r24, Z+1	; 0x01
    22f4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           lcd_fix_string(AnKat);	//"->|-"
    22f8:	83 e4       	ldi	r24, 0x43	; 67
    22fa:	91 e0       	ldi	r25, 0x01	; 1
    22fc:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
           lcd_testpin(diodes[trans.c].Cathode);
    2300:	e0 91 5c 01 	lds	r30, 0x015C
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	ee 0f       	add	r30, r30
    2308:	ff 1f       	adc	r31, r31
    230a:	ee 0f       	add	r30, r30
    230c:	ff 1f       	adc	r31, r31
    230e:	e8 58       	subi	r30, 0x88	; 136
    2310:	fe 4f       	sbci	r31, 0xFE	; 254
    2312:	81 81       	ldd	r24, Z+1	; 0x01
    2314:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
           UfAusgabe( (trans.b<<4)|trans.c);
    2318:	80 91 5b 01 	lds	r24, 0x015B
    231c:	82 95       	swap	r24
    231e:	80 7f       	andi	r24, 0xF0	; 240
    2320:	90 91 5c 01 	lds	r25, 0x015C
    2324:	89 2b       	or	r24, r25
    2326:	63 cf       	rjmp	.-314    	; 0x21ee <main+0x3a4>
           goto end;
        }
     }
     // end (PartFound == PART_DIODE)
  } else if (PartFound == PART_TRANSISTOR) {
    2328:	82 30       	cpi	r24, 0x02	; 2
    232a:	09 f0       	breq	.+2      	; 0x232e <main+0x4e4>
    232c:	7f c0       	rjmp	.+254    	; 0x242c <main+0x5e2>
    if(PartReady != 0) {
    232e:	80 91 04 01 	lds	r24, 0x0104
    2332:	88 23       	and	r24, r24
    2334:	71 f1       	breq	.+92     	; 0x2392 <main+0x548>
       if((trans.hfe[0]>trans.hfe[1])) {
    2336:	80 91 53 01 	lds	r24, 0x0153
    233a:	90 91 54 01 	lds	r25, 0x0154
    233e:	a0 91 55 01 	lds	r26, 0x0155
    2342:	b0 91 56 01 	lds	r27, 0x0156
    2346:	20 91 4f 01 	lds	r18, 0x014F
    234a:	30 91 50 01 	lds	r19, 0x0150
    234e:	40 91 51 01 	lds	r20, 0x0151
    2352:	50 91 52 01 	lds	r21, 0x0152
    2356:	82 17       	cp	r24, r18
    2358:	93 07       	cpc	r25, r19
    235a:	a4 07       	cpc	r26, r20
    235c:	b5 07       	cpc	r27, r21
    235e:	48 f4       	brcc	.+18     	; 0x2372 <main+0x528>
          //if the amplification factor was higher at first testr: swap C and E !
          tmp = trans.c;
    2360:	80 91 5c 01 	lds	r24, 0x015C
          trans.c = trans.e;
    2364:	90 91 5d 01 	lds	r25, 0x015D
    2368:	90 93 5c 01 	sts	0x015C, r25
          trans.e = tmp;
    236c:	80 93 5d 01 	sts	0x015D, r24
    2370:	10 c0       	rjmp	.+32     	; 0x2392 <main+0x548>
       } else {
          trans.hfe[0] = trans.hfe[1];
    2372:	80 93 4f 01 	sts	0x014F, r24
    2376:	90 93 50 01 	sts	0x0150, r25
    237a:	a0 93 51 01 	sts	0x0151, r26
    237e:	b0 93 52 01 	sts	0x0152, r27
          trans.uBE[0] = trans.uBE[1];
    2382:	80 91 59 01 	lds	r24, 0x0159
    2386:	90 91 5a 01 	lds	r25, 0x015A
    238a:	90 93 58 01 	sts	0x0158, r25
    238e:	80 93 57 01 	sts	0x0157, r24
       }
    }

    if(PartMode == PART_MODE_NPN) {
    2392:	80 91 06 01 	lds	r24, 0x0106
    2396:	81 30       	cpi	r24, 0x01	; 1
    2398:	19 f4       	brne	.+6      	; 0x23a0 <main+0x556>
       lcd_fix_string(NPN_str);		//"NPN "
    239a:	8e ef       	ldi	r24, 0xFE	; 254
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	02 c0       	rjmp	.+4      	; 0x23a4 <main+0x55a>
    } else {
       lcd_fix_string(PNP_str);		//"PNP "
    23a0:	83 e0       	ldi	r24, 0x03	; 3
    23a2:	91 e0       	ldi	r25, 0x01	; 1
    23a4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    }
    if( NumOfDiodes > 2) {	//Transistor with protection diode
    23a8:	80 91 05 01 	lds	r24, 0x0105
    23ac:	83 30       	cpi	r24, 0x03	; 3
    23ae:	a0 f0       	brcs	.+40     	; 0x23d8 <main+0x58e>
       // Layout with EBC= style
       if(PartMode == PART_MODE_NPN)
 #endif
#else
       // Layout with 123= style
       if (((PartMode == PART_MODE_NPN) && (trans.c > trans.e)) || ((PartMode != PART_MODE_NPN) && (trans.c < trans.e)))
    23b0:	20 91 06 01 	lds	r18, 0x0106
    23b4:	90 91 5c 01 	lds	r25, 0x015C
    23b8:	80 91 5d 01 	lds	r24, 0x015D
    23bc:	21 30       	cpi	r18, 0x01	; 1
    23be:	19 f4       	brne	.+6      	; 0x23c6 <main+0x57c>
    23c0:	89 17       	cp	r24, r25
    23c2:	18 f0       	brcs	.+6      	; 0x23ca <main+0x580>
    23c4:	05 c0       	rjmp	.+10     	; 0x23d0 <main+0x586>
    23c6:	98 17       	cp	r25, r24
    23c8:	18 f4       	brcc	.+6      	; 0x23d0 <main+0x586>
#endif
       {
          lcd_fix_string(AnKat);	//"->|-"
    23ca:	83 e4       	ldi	r24, 0x43	; 67
    23cc:	91 e0       	ldi	r25, 0x01	; 1
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <main+0x58a>
       } else {
          lcd_fix_string(KatAn);	//"-|<-"
    23d0:	87 e4       	ldi	r24, 0x47	; 71
    23d2:	91 e0       	ldi	r25, 0x01	; 1
    23d4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       }
    }
    PinLayout('E','B','C'); 		//  EBC= or 123=...
    23d8:	85 e4       	ldi	r24, 0x45	; 69
    23da:	62 e4       	ldi	r22, 0x42	; 66
    23dc:	43 e4       	ldi	r20, 0x43	; 67
    23de:	0e 94 45 0a 	call	0x148a	; 0x148a <PinLayout>
    lcd_line2(); //2. row 
    23e2:	80 ec       	ldi	r24, 0xC0	; 192
    23e4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
    lcd_fix_string(hfe_str);		//"B="  (hFE)
    23e8:	8b ef       	ldi	r24, 0xFB	; 251
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    DisplayValue(trans.hfe[0],0,0,3);
    23f0:	60 91 4f 01 	lds	r22, 0x014F
    23f4:	70 91 50 01 	lds	r23, 0x0150
    23f8:	80 91 51 01 	lds	r24, 0x0151
    23fc:	90 91 52 01 	lds	r25, 0x0152
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	03 e0       	ldi	r16, 0x03	; 3
    2406:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
    lcd_space();
    240a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_space>

    lcd_fix_string(Uf_str);		//"Uf="
    240e:	8e e0       	ldi	r24, 0x0E	; 14
    2410:	91 e0       	ldi	r25, 0x01	; 1
    2412:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    DisplayValue(trans.uBE[0],-3,'V',3);
    2416:	60 91 57 01 	lds	r22, 0x0157
    241a:	70 91 58 01 	lds	r23, 0x0158
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	4d ef       	ldi	r20, 0xFD	; 253
    2424:	26 e5       	ldi	r18, 0x56	; 86
    2426:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
    goto end;
    242a:	d8 c1       	rjmp	.+944    	; 0x27dc <main+0x992>
    // end (PartFound == PART_TRANSISTOR)
  } else if (PartFound == PART_FET) {	//JFET or MOSFET
    242c:	83 30       	cpi	r24, 0x03	; 3
    242e:	09 f0       	breq	.+2      	; 0x2432 <main+0x5e8>
    2430:	7f c0       	rjmp	.+254    	; 0x2530 <main+0x6e6>
    if(PartMode&1) {
    2432:	80 91 06 01 	lds	r24, 0x0106
    2436:	80 ff       	sbrs	r24, 0
    2438:	02 c0       	rjmp	.+4      	; 0x243e <main+0x5f4>
       lcd_data('P');			//P-channel
    243a:	80 e5       	ldi	r24, 0x50	; 80
    243c:	01 c0       	rjmp	.+2      	; 0x2440 <main+0x5f6>
    } else {
       lcd_data('N');			//N-channel
    243e:	8e e4       	ldi	r24, 0x4E	; 78
    2440:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
    }
    lcd_data('-');
    2444:	8d e2       	ldi	r24, 0x2D	; 45
    2446:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>

    tmp = PartMode/2;
    244a:	80 91 06 01 	lds	r24, 0x0106
    244e:	86 95       	lsr	r24
    if (tmp == (PART_MODE_N_D_MOS/2)) {
    2450:	82 30       	cpi	r24, 0x02	; 2
    2452:	11 f4       	brne	.+4      	; 0x2458 <main+0x60e>
       lcd_data('D');			// N-D
    2454:	84 e4       	ldi	r24, 0x44	; 68
    2456:	03 c0       	rjmp	.+6      	; 0x245e <main+0x614>
    }
    if (tmp == (PART_MODE_N_E_MOS/2)) {
    2458:	81 30       	cpi	r24, 0x01	; 1
    245a:	21 f4       	brne	.+8      	; 0x2464 <main+0x61a>
       lcd_data('E');			// N-E
    245c:	85 e4       	ldi	r24, 0x45	; 69
    245e:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
    2462:	05 c0       	rjmp	.+10     	; 0x246e <main+0x624>
    }
    if (tmp == (PART_MODE_N_JFET/2)) {
    2464:	83 30       	cpi	r24, 0x03	; 3
    2466:	19 f4       	brne	.+6      	; 0x246e <main+0x624>
       lcd_fix_string(jfet_str);	//"JFET"
    2468:	83 ef       	ldi	r24, 0xF3	; 243
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <main+0x628>
    } else {
       lcd_fix_string(mosfet_str);	//"-MOS "
    246e:	8e ee       	ldi	r24, 0xEE	; 238
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    }
    PinLayout('S','G','D'); 		//  SGD= or 123=...
    2476:	83 e5       	ldi	r24, 0x53	; 83
    2478:	67 e4       	ldi	r22, 0x47	; 71
    247a:	44 e4       	ldi	r20, 0x44	; 68
    247c:	0e 94 45 0a 	call	0x148a	; 0x148a <PinLayout>
    if((NumOfDiodes > 0) && (PartMode < PART_MODE_N_D_MOS)) {
    2480:	80 91 05 01 	lds	r24, 0x0105
    2484:	88 23       	and	r24, r24
    2486:	a1 f0       	breq	.+40     	; 0x24b0 <main+0x666>
    2488:	20 91 06 01 	lds	r18, 0x0106
    248c:	24 30       	cpi	r18, 0x04	; 4
    248e:	80 f4       	brcc	.+32     	; 0x24b0 <main+0x666>
    2490:	90 91 5c 01 	lds	r25, 0x015C
    2494:	80 91 5d 01 	lds	r24, 0x015D
       // Layout with SGD= style
       if (PartMode&1) /* N or P MOS */
 #endif
#else
       // layout with 123= style
       if (((PartMode&1) && (trans.c < trans.e)) || ((!(PartMode&1)) && (trans.c > trans.e)))
    2498:	20 ff       	sbrs	r18, 0
    249a:	03 c0       	rjmp	.+6      	; 0x24a2 <main+0x658>
    249c:	98 17       	cp	r25, r24
    249e:	18 f0       	brcs	.+6      	; 0x24a6 <main+0x65c>
    24a0:	04 c0       	rjmp	.+8      	; 0x24aa <main+0x660>
    24a2:	89 17       	cp	r24, r25
    24a4:	10 f4       	brcc	.+4      	; 0x24aa <main+0x660>
#endif
       {
          lcd_data(LCD_CHAR_DIODE1);	//show Diode symbol >|
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	01 c0       	rjmp	.+2      	; 0x24ac <main+0x662>
       } else {
          lcd_data(LCD_CHAR_DIODE2);	//show Diode symbol |<
    24aa:	82 e0       	ldi	r24, 0x02	; 2
    24ac:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       }
    }
    lcd_line2();			//2. Row
    24b0:	80 ec       	ldi	r24, 0xC0	; 192
    24b2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
    if(PartMode < PART_MODE_N_D_MOS) {	//enhancement-MOSFET
    24b6:	80 91 06 01 	lds	r24, 0x0106
    24ba:	84 30       	cpi	r24, 0x04	; 4
    24bc:	d8 f4       	brcc	.+54     	; 0x24f4 <main+0x6aa>
	//Gate capacity
       lcd_fix_string(GateCap_str);		//"C="
    24be:	88 ef       	ldi	r24, 0xF8	; 248
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       ReadCapacity(trans.b,trans.e);	//measure capacity
    24c6:	80 91 5b 01 	lds	r24, 0x015B
    24ca:	60 91 5d 01 	lds	r22, 0x015D
    24ce:	0e 94 ef 14 	call	0x29de	; 0x29de <ReadCapacity>
       DisplayValue(cap.cval,cap.cpre,'F',3);
    24d2:	60 91 62 01 	lds	r22, 0x0162
    24d6:	70 91 63 01 	lds	r23, 0x0163
    24da:	80 91 64 01 	lds	r24, 0x0164
    24de:	90 91 65 01 	lds	r25, 0x0165
    24e2:	40 91 74 01 	lds	r20, 0x0174
    24e6:	26 e4       	ldi	r18, 0x46	; 70
    24e8:	03 e0       	ldi	r16, 0x03	; 3
    24ea:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
       lcd_fix_string(vt_str);		// "Vt="
    24ee:	82 e1       	ldi	r24, 0x12	; 18
    24f0:	91 e0       	ldi	r25, 0x01	; 1
    24f2:	13 c0       	rjmp	.+38     	; 0x251a <main+0x6d0>
    } else {
       lcd_data('I');
    24f4:	89 e4       	ldi	r24, 0x49	; 73
    24f6:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       lcd_data('=');
    24fa:	8d e3       	ldi	r24, 0x3D	; 61
    24fc:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       DisplayValue(trans.uBE[1],-5,'A',2);
    2500:	60 91 59 01 	lds	r22, 0x0159
    2504:	70 91 5a 01 	lds	r23, 0x015A
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	4b ef       	ldi	r20, 0xFB	; 251
    250e:	21 e4       	ldi	r18, 0x41	; 65
    2510:	02 e0       	ldi	r16, 0x02	; 2
    2512:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
       lcd_fix_string(Vgs_str);		// " Vgs="
    2516:	87 e1       	ldi	r24, 0x17	; 23
    2518:	91 e0       	ldi	r25, 0x01	; 1
    251a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
    }
    //Gate-threshold voltage
    DisplayValue(gthvoltage,-3,'V',2);
    251e:	60 91 5f 01 	lds	r22, 0x015F
    2522:	70 91 60 01 	lds	r23, 0x0160
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	4d ef       	ldi	r20, 0xFD	; 253
    252c:	26 e5       	ldi	r18, 0x56	; 86
    252e:	22 c1       	rjmp	.+580    	; 0x2774 <main+0x92a>
    goto end;
    // end (PartFound == PART_FET)
  } else if (PartFound == PART_THYRISTOR) {
    2530:	85 30       	cpi	r24, 0x05	; 5
    2532:	19 f4       	brne	.+6      	; 0x253a <main+0x6f0>
    lcd_fix_string(Thyristor);		//"Thyristor"
    2534:	85 e8       	ldi	r24, 0x85	; 133
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	04 c0       	rjmp	.+8      	; 0x2542 <main+0x6f8>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    253a:	84 30       	cpi	r24, 0x04	; 4
    253c:	69 f4       	brne	.+26     	; 0x2558 <main+0x70e>
    lcd_fix_string(Triac);		//"Triac"
    253e:	8f e7       	ldi	r24, 0x7F	; 127
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  mess_count = 0;
  goto end2;


gakAusgabe:
  lcd_line2(); //2. row 
    2546:	80 ec       	ldi	r24, 0xC0	; 192
    2548:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
  PinLayout(Cathode_char,'G','A'); 	// CGA= or 123=...
    254c:	83 e4       	ldi	r24, 0x43	; 67
    254e:	67 e4       	ldi	r22, 0x47	; 71
    2550:	41 e4       	ldi	r20, 0x41	; 65
    2552:	0e 94 45 0a 	call	0x148a	; 0x148a <PinLayout>
    2556:	42 c1       	rjmp	.+644    	; 0x27dc <main+0x992>
    goto gakAusgabe;
  } else if (PartFound == PART_TRIAC) {
    lcd_fix_string(Triac);		//"Triac"
    goto gakAusgabe;
  }
  else if(PartFound == PART_RESISTOR) {
    2558:	86 30       	cpi	r24, 0x06	; 6
    255a:	09 f0       	breq	.+2      	; 0x255e <main+0x714>
    255c:	b9 c0       	rjmp	.+370    	; 0x26d0 <main+0x886>
    if (ResistorsFound == 1) { // single resistor
    255e:	60 91 5e 01 	lds	r22, 0x015E
    2562:	61 30       	cpi	r22, 0x01	; 1
    2564:	69 f4       	brne	.+26     	; 0x2580 <main+0x736>
       lcd_testpin(resis[0].rb);  	//Pin-number 1
    2566:	80 91 22 01 	lds	r24, 0x0122
    256a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
       lcd_fix_string(Resistor_str);
    256e:	80 e5       	ldi	r24, 0x50	; 80
    2570:	91 e0       	ldi	r25, 0x01	; 1
    2572:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       lcd_testpin(resis[0].ra);		//Pin-number 2
    2576:	80 91 21 01 	lds	r24, 0x0121
    257a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
    257e:	61 c0       	rjmp	.+194    	; 0x2642 <main+0x7f8>
    } else { // R-Max suchen
       ii = 0;
    2580:	10 92 4b 01 	sts	0x014B, r1
       if (resis[1].rx > resis[0].rx)
    2584:	20 91 24 01 	lds	r18, 0x0124
    2588:	30 91 25 01 	lds	r19, 0x0125
    258c:	40 91 26 01 	lds	r20, 0x0126
    2590:	50 91 27 01 	lds	r21, 0x0127
    2594:	80 91 18 01 	lds	r24, 0x0118
    2598:	90 91 19 01 	lds	r25, 0x0119
    259c:	a0 91 1a 01 	lds	r26, 0x011A
    25a0:	b0 91 1b 01 	lds	r27, 0x011B
    25a4:	82 17       	cp	r24, r18
    25a6:	93 07       	cpc	r25, r19
    25a8:	a4 07       	cpc	r26, r20
    25aa:	b5 07       	cpc	r27, r21
    25ac:	18 f4       	brcc	.+6      	; 0x25b4 <main+0x76a>
          ii = 1;
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	80 93 4b 01 	sts	0x014B, r24
       if (ResistorsFound == 2) {
    25b4:	62 30       	cpi	r22, 0x02	; 2
    25b6:	19 f4       	brne	.+6      	; 0x25be <main+0x774>
          ii = 2;
    25b8:	60 93 4b 01 	sts	0x014B, r22
    25bc:	22 c0       	rjmp	.+68     	; 0x2602 <main+0x7b8>
       } else {
          if (resis[2].rx > resis[ii].rx) {
    25be:	80 91 4b 01 	lds	r24, 0x014B
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	fc 01       	movw	r30, r24
    25c6:	ee 0f       	add	r30, r30
    25c8:	ff 1f       	adc	r31, r31
    25ca:	e8 0f       	add	r30, r24
    25cc:	f9 1f       	adc	r31, r25
    25ce:	ee 0f       	add	r30, r30
    25d0:	ff 1f       	adc	r31, r31
    25d2:	ee 0f       	add	r30, r30
    25d4:	ff 1f       	adc	r31, r31
    25d6:	e8 5e       	subi	r30, 0xE8	; 232
    25d8:	fe 4f       	sbci	r31, 0xFE	; 254
    25da:	20 91 30 01 	lds	r18, 0x0130
    25de:	30 91 31 01 	lds	r19, 0x0131
    25e2:	40 91 32 01 	lds	r20, 0x0132
    25e6:	50 91 33 01 	lds	r21, 0x0133
    25ea:	80 81       	ld	r24, Z
    25ec:	91 81       	ldd	r25, Z+1	; 0x01
    25ee:	a2 81       	ldd	r26, Z+2	; 0x02
    25f0:	b3 81       	ldd	r27, Z+3	; 0x03
    25f2:	82 17       	cp	r24, r18
    25f4:	93 07       	cpc	r25, r19
    25f6:	a4 07       	cpc	r26, r20
    25f8:	b5 07       	cpc	r27, r21
    25fa:	18 f4       	brcc	.+6      	; 0x2602 <main+0x7b8>
             ii = 2;
    25fc:	82 e0       	ldi	r24, 0x02	; 2
    25fe:	80 93 4b 01 	sts	0x014B, r24
       }
       char x = '1';
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
    2602:	80 91 4b 01 	lds	r24, 0x014B
    2606:	81 30       	cpi	r24, 0x01	; 1
    2608:	29 f0       	breq	.+10     	; 0x2614 <main+0x7ca>
          // x = '1';
          y = '2';
          z = '3';
       }
       if (ii == 2) {
    260a:	82 30       	cpi	r24, 0x02	; 2
    260c:	39 f0       	breq	.+14     	; 0x261c <main+0x7d2>
             ii = 2;
          }
       }
       char x = '1';
       char y = '3';
       char z = '2';
    260e:	12 e3       	ldi	r17, 0x32	; 50
          if (resis[2].rx > resis[ii].rx) {
             ii = 2;
          }
       }
       char x = '1';
       char y = '3';
    2610:	03 e3       	ldi	r16, 0x33	; 51
    2612:	02 c0       	rjmp	.+4      	; 0x2618 <main+0x7ce>
       char z = '2';
   
       if (ii == 1) {
          // x = '1';
          y = '2';
          z = '3';
    2614:	13 e3       	ldi	r17, 0x33	; 51
       char y = '3';
       char z = '2';
   
       if (ii == 1) {
          // x = '1';
          y = '2';
    2616:	02 e3       	ldi	r16, 0x32	; 50
       } else {
          if (resis[2].rx > resis[ii].rx) {
             ii = 2;
          }
       }
       char x = '1';
    2618:	81 e3       	ldi	r24, 0x31	; 49
    261a:	03 c0       	rjmp	.+6      	; 0x2622 <main+0x7d8>
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
          z = '3';
    261c:	13 e3       	ldi	r17, 0x33	; 51
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
          y = '1';
    261e:	01 e3       	ldi	r16, 0x31	; 49
          // x = '1';
          y = '2';
          z = '3';
       }
       if (ii == 2) {
          x = '2';
    2620:	82 e3       	ldi	r24, 0x32	; 50
          y = '1';
          z = '3';
       }
       lcd_data(x);
    2622:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    2626:	80 e5       	ldi	r24, 0x50	; 80
    2628:	91 e0       	ldi	r25, 0x01	; 1
    262a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       lcd_data(y);
    262e:	80 2f       	mov	r24, r16
    2630:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
       lcd_fix_string(Resistor_str);    // -[=]-
    2634:	80 e5       	ldi	r24, 0x50	; 80
    2636:	91 e0       	ldi	r25, 0x01	; 1
    2638:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
       lcd_data(z);
    263c:	81 2f       	mov	r24, r17
    263e:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
    }
    lcd_line2(); //2. row 
    2642:	80 ec       	ldi	r24, 0xC0	; 192
    2644:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
    if (ResistorsFound == 1) {
    2648:	80 91 5e 01 	lds	r24, 0x015E
    264c:	81 30       	cpi	r24, 0x01	; 1
    264e:	01 f5       	brne	.+64     	; 0x2690 <main+0x846>
       RvalOut(0);
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	0e 94 52 03 	call	0x6a4	; 0x6a4 <RvalOut>
#if FLASHEND > 0x1fff
       if (resis[0].lx != 0) {
    2656:	80 91 1c 01 	lds	r24, 0x011C
    265a:	90 91 1d 01 	lds	r25, 0x011D
    265e:	a0 91 1e 01 	lds	r26, 0x011E
    2662:	b0 91 1f 01 	lds	r27, 0x011F
    2666:	00 97       	sbiw	r24, 0x00	; 0
    2668:	a1 05       	cpc	r26, r1
    266a:	b1 05       	cpc	r27, r1
    266c:	09 f4       	brne	.+2      	; 0x2670 <main+0x826>
    266e:	b6 c0       	rjmp	.+364    	; 0x27dc <main+0x992>
	  // resistor have also Inductance
          lcd_fix_string(Lis_str);	// "L="
    2670:	8a e3       	ldi	r24, 0x3A	; 58
    2672:	91 e0       	ldi	r25, 0x01	; 1
    2674:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
          DisplayValue(resis[0].lx,resis[0].lpre,'H',3);	// output inductance
    2678:	60 91 1c 01 	lds	r22, 0x011C
    267c:	70 91 1d 01 	lds	r23, 0x011D
    2680:	80 91 1e 01 	lds	r24, 0x011E
    2684:	90 91 1f 01 	lds	r25, 0x011F
    2688:	40 91 20 01 	lds	r20, 0x0120
    268c:	28 e4       	ldi	r18, 0x48	; 72
    268e:	78 cd       	rjmp	.-1296   	; 0x2180 <main+0x336>
       }
#endif
    } else {
       // output resistor values in right order
       if (ii == 0) {
    2690:	80 91 4b 01 	lds	r24, 0x014B
    2694:	88 23       	and	r24, r24
    2696:	31 f4       	brne	.+12     	; 0x26a4 <main+0x85a>
          RvalOut(1);
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <RvalOut>
          RvalOut(2);
    269e:	82 e0       	ldi	r24, 0x02	; 2
    26a0:	0e 94 52 03 	call	0x6a4	; 0x6a4 <RvalOut>
       }
       if (ii == 1) {
    26a4:	80 91 4b 01 	lds	r24, 0x014B
    26a8:	81 30       	cpi	r24, 0x01	; 1
    26aa:	31 f4       	brne	.+12     	; 0x26b8 <main+0x86e>
          RvalOut(0);
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	0e 94 52 03 	call	0x6a4	; 0x6a4 <RvalOut>
          RvalOut(2);
    26b2:	82 e0       	ldi	r24, 0x02	; 2
    26b4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <RvalOut>
       }
       if (ii == 2) {
    26b8:	80 91 4b 01 	lds	r24, 0x014B
    26bc:	82 30       	cpi	r24, 0x02	; 2
    26be:	09 f0       	breq	.+2      	; 0x26c2 <main+0x878>
    26c0:	8d c0       	rjmp	.+282    	; 0x27dc <main+0x992>
          RvalOut(0);
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <RvalOut>
          RvalOut(1);
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	0e 94 52 03 	call	0x6a4	; 0x6a4 <RvalOut>
    26ce:	86 c0       	rjmp	.+268    	; 0x27dc <main+0x992>
    goto end;

  } // end (PartFound == PART_RESISTOR)

//capacity measurement is wanted
  else if(PartFound == PART_CAPACITOR) {
    26d0:	87 30       	cpi	r24, 0x07	; 7
    26d2:	09 f0       	breq	.+2      	; 0x26d6 <main+0x88c>
    26d4:	51 c0       	rjmp	.+162    	; 0x2778 <main+0x92e>
//     lcd_fix_string(Capacitor);
     lcd_testpin(cap.ca);		//Pin number 1
    26d6:	80 91 72 01 	lds	r24, 0x0172
    26da:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
     lcd_fix_string(CapZeich);		// capacitor sign
    26de:	8d e1       	ldi	r24, 0x1D	; 29
    26e0:	91 e0       	ldi	r25, 0x01	; 1
    26e2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_testpin(cap.cb);		//Pin number 2
    26e6:	80 91 73 01 	lds	r24, 0x0173
    26ea:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_testpin>
#if FLASHEND > 0x1fff
     GetVloss();			// get Voltage loss of capacitor
    26ee:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <GetVloss>
     if (cap.v_loss != 0) {
    26f2:	80 91 70 01 	lds	r24, 0x0170
    26f6:	90 91 71 01 	lds	r25, 0x0171
    26fa:	00 97       	sbiw	r24, 0x00	; 0
    26fc:	79 f0       	breq	.+30     	; 0x271c <main+0x8d2>
        lcd_fix_string(VLOSS_str);	// "  Vloss="
    26fe:	82 e3       	ldi	r24, 0x32	; 50
    2700:	91 e0       	ldi	r25, 0x01	; 1
    2702:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        DisplayValue(cap.v_loss,-1,'%',2);
    2706:	60 91 70 01 	lds	r22, 0x0170
    270a:	70 91 71 01 	lds	r23, 0x0171
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	4f ef       	ldi	r20, 0xFF	; 255
    2714:	25 e2       	ldi	r18, 0x25	; 37
    2716:	02 e0       	ldi	r16, 0x02	; 2
    2718:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
     }
#endif
     lcd_line2(); 			//2. row 
    271c:	80 ec       	ldi	r24, 0xC0	; 192
    271e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     DisplayValue(cap.cval_max,cap.cpre_max,'F',4);
    2722:	60 91 66 01 	lds	r22, 0x0166
    2726:	70 91 67 01 	lds	r23, 0x0167
    272a:	80 91 68 01 	lds	r24, 0x0168
    272e:	90 91 69 01 	lds	r25, 0x0169
    2732:	40 91 75 01 	lds	r20, 0x0175
    2736:	26 e4       	ldi	r18, 0x46	; 70
    2738:	04 e0       	ldi	r16, 0x04	; 4
    273a:	0e 94 97 02 	call	0x52e	; 0x52e <DisplayValue>
#if FLASHEND > 0x1fff
     cap.esr = GetESR(cap.cb, cap.ca);		// get ESR of capacitor
    273e:	80 91 73 01 	lds	r24, 0x0173
    2742:	60 91 72 01 	lds	r22, 0x0172
    2746:	0e 94 06 1b 	call	0x360c	; 0x360c <GetESR>
    274a:	90 93 6f 01 	sts	0x016F, r25
    274e:	80 93 6e 01 	sts	0x016E, r24
     if ( cap.esr < 65530) {
    2752:	2f ef       	ldi	r18, 0xFF	; 255
    2754:	8a 3f       	cpi	r24, 0xFA	; 250
    2756:	92 07       	cpc	r25, r18
    2758:	08 f0       	brcs	.+2      	; 0x275c <main+0x912>
    275a:	40 c0       	rjmp	.+128    	; 0x27dc <main+0x992>
        lcd_fix_string(ESR_str);
    275c:	8c e2       	ldi	r24, 0x2C	; 44
    275e:	91 e0       	ldi	r25, 0x01	; 1
    2760:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
        DisplayValue(cap.esr,-2,LCD_CHAR_OMEGA,2);
    2764:	60 91 6e 01 	lds	r22, 0x016E
    2768:	70 91 6f 01 	lds	r23, 0x016F
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	4e ef       	ldi	r20, 0xFE	; 254
    2772:	24 ef       	ldi	r18, 0xF4	; 244
    2774:	02 e0       	ldi	r16, 0x02	; 2
    2776:	57 ce       	rjmp	.-850    	; 0x2426 <main+0x5dc>
     }
#endif
     goto end;
  }
  if(NumOfDiodes == 0) { //no diodes are found
    2778:	80 91 05 01 	lds	r24, 0x0105
    277c:	88 23       	and	r24, r24
    277e:	71 f4       	brne	.+28     	; 0x279c <main+0x952>
     lcd_fix_string(TestFailed1); 	//"Kein,unbek. oder"
    2780:	88 e9       	ldi	r24, 0x98	; 152
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_line2(); //2. row 
    2788:	80 ec       	ldi	r24, 0xC0	; 192
    278a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     lcd_fix_string(TestFailed2); 	//"defektes "
    278e:	81 e7       	ldi	r24, 0x71	; 113
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_fix_string(Bauteil);		//"Bauteil"
    2796:	8a e7       	ldi	r24, 0x7A	; 122
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	16 c0       	rjmp	.+44     	; 0x27c8 <main+0x97e>
  } else {
     lcd_fix_string(Bauteil);		//"Bauteil"
    279c:	8a e7       	ldi	r24, 0x7A	; 122
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_fix_string(Unknown); 		//" unbek."
    27a4:	8f e8       	ldi	r24, 0x8F	; 143
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_line2(); //2. row 
    27ac:	80 ec       	ldi	r24, 0xC0	; 192
    27ae:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_command>
     lcd_fix_string(OrBroken); 		//"oder defekt "
    27b2:	88 ea       	ldi	r24, 0xA8	; 168
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
     lcd_data(NumOfDiodes + '0');
    27ba:	80 91 05 01 	lds	r24, 0x0105
    27be:	80 5d       	subi	r24, 0xD0	; 208
    27c0:	0e 94 a7 00 	call	0x14e	; 0x14e <lcd_data>
     lcd_fix_string(AnKat);		//"->|-"
    27c4:	83 e4       	ldi	r24, 0x43	; 67
    27c6:	91 e0       	ldi	r25, 0x01	; 1
    27c8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <lcd_fix_string>
  }
  empty_count++;
    27cc:	80 91 4a 01 	lds	r24, 0x014A
    27d0:	8f 5f       	subi	r24, 0xFF	; 255
    27d2:	80 93 4a 01 	sts	0x014A, r24
  mess_count = 0;
    27d6:	10 92 0b 01 	sts	0x010B, r1
  goto end2;
    27da:	07 c0       	rjmp	.+14     	; 0x27ea <main+0x9a0>
gakAusgabe:
  lcd_line2(); //2. row 
  PinLayout(Cathode_char,'G','A'); 	// CGA= or 123=...
//- - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 end:
  empty_count = 0;		// reset counter, if part is found
    27dc:	10 92 4a 01 	sts	0x014A, r1
  mess_count++;			// count measurements
    27e0:	80 91 0b 01 	lds	r24, 0x010B
    27e4:	8f 5f       	subi	r24, 0xFF	; 255
    27e6:	80 93 0b 01 	sts	0x010B, r24

 end2:
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
    27ea:	88 e1       	ldi	r24, 0x18	; 24
    27ec:	87 b9       	out	0x07, r24	; 7
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
    27ee:	4f 9b       	sbis	0x09, 7	; 9
    27f0:	fe cf       	rjmp	.-4      	; 0x27ee <main+0x9a4>
  wait_about200ms();
    27f2:	88 e2       	ldi	r24, 0x28	; 40
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
// wait 14 seconds or 5 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage+=10) {
    27fa:	10 92 60 01 	sts	0x0160, r1
    27fe:	10 92 5f 01 	sts	0x015F, r1
    2802:	10 c0       	rjmp	.+32     	; 0x2824 <main+0x9da>
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2804:	4f 9b       	sbis	0x09, 7	; 9
    2806:	78 cb       	rjmp	.-2320   	; 0x1ef8 <main+0xae>
        // If the key is pressed again... 
        // goto start of measurement 
        goto start;
     }
     wdt_reset();
    2808:	a8 95       	wdr
     wait_about10ms();
    280a:	82 e0       	ldi	r24, 0x02	; 2
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
 end2:
  ADC_DDR = (1<<TPREF) | TXD_MSK; 	// switch pin with reference to GND, release relay
  while(!(ON_PIN_REG & (1<<RST_PIN)));	//wait ,until button is released
  wait_about200ms();
// wait 14 seconds or 5 seconds (if repeat function)
  for(gthvoltage = 0;gthvoltage<display_time;gthvoltage+=10) {
    2812:	80 91 5f 01 	lds	r24, 0x015F
    2816:	90 91 60 01 	lds	r25, 0x0160
    281a:	0a 96       	adiw	r24, 0x0a	; 10
    281c:	90 93 60 01 	sts	0x0160, r25
    2820:	80 93 5f 01 	sts	0x015F, r24
    2824:	80 91 5f 01 	lds	r24, 0x015F
    2828:	90 91 60 01 	lds	r25, 0x0160
    282c:	2d e6       	ldi	r18, 0x6D	; 109
    282e:	80 36       	cpi	r24, 0x60	; 96
    2830:	92 07       	cpc	r25, r18
    2832:	40 f3       	brcs	.-48     	; 0x2804 <main+0x9ba>
     goto start;			// repeat measurement POWER_OFF times
  }
 #endif
  // only one Measurement requested, shut off
//  MCUSR = 0;
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    2834:	5e 98       	cbi	0x0b, 6	; 11
  //never ending loop 
  while(1) {
     if(!(ON_PIN_REG & (1<<RST_PIN))) {
    2836:	4f 9b       	sbis	0x09, 7	; 9
    2838:	5f cb       	rjmp	.-2370   	; 0x1ef8 <main+0xae>
        // The statement is only reached if no auto off equipment is installed
        goto start;
     }
     wdt_reset();
    283a:	a8 95       	wdr
     wait_about10ms();
    283c:	82 e0       	ldi	r24, 0x02	; 2
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
  }
    2844:	f8 cf       	rjmp	.-16     	; 0x2836 <main+0x9ec>

00002846 <uart_putc>:
    2846:	2f 93       	push	r18
    2848:	5f b7       	in	r21, 0x3f	; 63
    284a:	2f 93       	push	r18
    284c:	2a e0       	ldi	r18, 0x0A	; 10
    284e:	80 95       	com	r24
    2850:	08 94       	sec

00002852 <putchar0>:
    2852:	10 f4       	brcc	.+4      	; 0x2858 <putchar1>
    2854:	43 98       	cbi	0x08, 3	; 8
    2856:	02 c0       	rjmp	.+4      	; 0x285c <putchar2>

00002858 <putchar1>:
    2858:	43 9a       	sbi	0x08, 3	; 8
	...

0000285c <putchar2>:
    285c:	22 d0       	rcall	.+68     	; 0x28a2 <wait100us>
    285e:	29 d0       	rcall	.+82     	; 0x28b2 <wait3us>
    2860:	86 95       	lsr	r24
    2862:	2a 95       	dec	r18
    2864:	b1 f7       	brne	.-20     	; 0x2852 <putchar0>
    2866:	2f 91       	pop	r18
    2868:	5f bf       	out	0x3f, r21	; 63
    286a:	2f 91       	pop	r18
    286c:	08 95       	ret

0000286e <UART_delay1>:
    286e:	08 95       	ret

00002870 <wait5s>:
    2870:	03 d0       	rcall	.+6      	; 0x2878 <wait1000ms>

00002872 <wait4s>:
    2872:	02 d0       	rcall	.+4      	; 0x2878 <wait1000ms>

00002874 <wait3s>:
    2874:	01 d0       	rcall	.+2      	; 0x2878 <wait1000ms>

00002876 <wait2s>:
    2876:	00 d0       	rcall	.+0      	; 0x2878 <wait1000ms>

00002878 <wait1000ms>:
    2878:	00 d0       	rcall	.+0      	; 0x287a <wait500ms>

0000287a <wait500ms>:
    287a:	03 d0       	rcall	.+6      	; 0x2882 <wait100ms>

0000287c <wait400ms>:
    287c:	02 d0       	rcall	.+4      	; 0x2882 <wait100ms>

0000287e <wait300ms>:
    287e:	01 d0       	rcall	.+2      	; 0x2882 <wait100ms>

00002880 <wait200ms>:
    2880:	00 d0       	rcall	.+0      	; 0x2882 <wait100ms>

00002882 <wait100ms>:
    2882:	a8 95       	wdr
    2884:	00 d0       	rcall	.+0      	; 0x2886 <wait50ms>

00002886 <wait50ms>:
    2886:	03 d0       	rcall	.+6      	; 0x288e <wait10ms>

00002888 <wait40ms>:
    2888:	02 d0       	rcall	.+4      	; 0x288e <wait10ms>

0000288a <wait30ms>:
    288a:	01 d0       	rcall	.+2      	; 0x288e <wait10ms>

0000288c <wait20ms>:
    288c:	00 d0       	rcall	.+0      	; 0x288e <wait10ms>

0000288e <wait10ms>:
    288e:	00 d0       	rcall	.+0      	; 0x2890 <wait5ms>

00002890 <wait5ms>:
    2890:	03 d0       	rcall	.+6      	; 0x2898 <wait1ms>

00002892 <wait4ms>:
    2892:	02 d0       	rcall	.+4      	; 0x2898 <wait1ms>

00002894 <wait3ms>:
    2894:	01 d0       	rcall	.+2      	; 0x2898 <wait1ms>

00002896 <wait2ms>:
    2896:	00 d0       	rcall	.+0      	; 0x2898 <wait1ms>

00002898 <wait1ms>:
    2898:	00 d0       	rcall	.+0      	; 0x289a <wait500us>

0000289a <wait500us>:
    289a:	03 d0       	rcall	.+6      	; 0x28a2 <wait100us>

0000289c <wait400us>:
    289c:	02 d0       	rcall	.+4      	; 0x28a2 <wait100us>

0000289e <wait300us>:
    289e:	01 d0       	rcall	.+2      	; 0x28a2 <wait100us>

000028a0 <wait200us>:
    28a0:	00 d0       	rcall	.+0      	; 0x28a2 <wait100us>

000028a2 <wait100us>:
    28a2:	00 d0       	rcall	.+0      	; 0x28a4 <wait50us>

000028a4 <wait50us>:
    28a4:	03 d0       	rcall	.+6      	; 0x28ac <wait10us>

000028a6 <wait40us>:
    28a6:	02 d0       	rcall	.+4      	; 0x28ac <wait10us>

000028a8 <wait30us>:
    28a8:	01 d0       	rcall	.+2      	; 0x28ac <wait10us>

000028aa <wait20us>:
    28aa:	00 d0       	rcall	.+0      	; 0x28ac <wait10us>

000028ac <wait10us>:
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <wait5us>

000028ae <wait5us>:
    28ae:	03 d0       	rcall	.+6      	; 0x28b6 <wait1us>

000028b0 <wait4us>:
    28b0:	02 d0       	rcall	.+4      	; 0x28b6 <wait1us>

000028b2 <wait3us>:
    28b2:	01 d0       	rcall	.+2      	; 0x28b6 <wait1us>

000028b4 <wait2us>:
    28b4:	00 d0       	rcall	.+0      	; 0x28b6 <wait1us>

000028b6 <wait1us>:
    28b6:	00 00       	nop
    28b8:	08 95       	ret

000028ba <getRLmultip>:
  R_DDR = 0;			// switch all resistor ports to input
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
  return;
 } // end ReadCapacity()

unsigned int getRLmultip(unsigned int cvolt) {
    28ba:	ff 92       	push	r15
    28bc:	0f 93       	push	r16
    28be:	1f 93       	push	r17
    28c0:	cf 93       	push	r28
    28c2:	df 93       	push	r29

  unsigned int uvolt;
  unsigned int y1, y2;
  uint8_t tabind;
  uint8_t tabres;
  if (cvolt >= RL_Tab_Beginn) {
    28c4:	21 e0       	ldi	r18, 0x01	; 1
    28c6:	8c 32       	cpi	r24, 0x2C	; 44
    28c8:	92 07       	cpc	r25, r18
    28ca:	18 f0       	brcs	.+6      	; 0x28d2 <getRLmultip+0x18>
     uvolt = cvolt - RL_Tab_Beginn;
    28cc:	8c 52       	subi	r24, 0x2C	; 44
    28ce:	91 40       	sbci	r25, 0x01	; 1
    28d0:	02 c0       	rjmp	.+4      	; 0x28d6 <getRLmultip+0x1c>
  } else {
     uvolt = 0;			// limit to begin of table
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	90 e0       	ldi	r25, 0x00	; 0
  }
  tabind = uvolt / RL_Tab_Abstand;
    28d6:	69 e1       	ldi	r22, 0x19	; 25
    28d8:	70 e0       	ldi	r23, 0x00	; 0
    28da:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
  tabres = uvolt % RL_Tab_Abstand;
    28de:	f8 2e       	mov	r15, r24
  tabres = RL_Tab_Abstand - tabres;
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
    28e0:	6d 32       	cpi	r22, 0x2D	; 45
    28e2:	08 f0       	brcs	.+2      	; 0x28e6 <getRLmultip+0x2c>
    28e4:	6c e2       	ldi	r22, 0x2C	; 44
    28e6:	c6 2f       	mov	r28, r22
    28e8:	d0 e0       	ldi	r29, 0x00	; 0
    28ea:	ce 01       	movw	r24, r28
    28ec:	88 0f       	add	r24, r24
    28ee:	99 1f       	adc	r25, r25
    28f0:	80 50       	subi	r24, 0x00	; 0
    28f2:	90 40       	sbci	r25, 0x00	; 0
    28f4:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <__eerd_word_m168>
    28f8:	8c 01       	movw	r16, r24
  y2 = MEM_read_word(&RLtab[tabind+1]);
    28fa:	ce 01       	movw	r24, r28
    28fc:	88 0f       	add	r24, r24
    28fe:	99 1f       	adc	r25, r25
    2900:	8e 5f       	subi	r24, 0xFE	; 254
    2902:	9f 4f       	sbci	r25, 0xFF	; 255
    2904:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <__eerd_word_m168>
    2908:	9c 01       	movw	r18, r24
  } else {
     uvolt = 0;			// limit to begin of table
  }
  tabind = uvolt / RL_Tab_Abstand;
  tabres = uvolt % RL_Tab_Abstand;
  tabres = RL_Tab_Abstand - tabres;
    290a:	49 e1       	ldi	r20, 0x19	; 25
    290c:	4f 19       	sub	r20, r15
  if (tabind > (RL_Tab_Length/RL_Tab_Abstand)) {
     tabind = (RL_Tab_Length/RL_Tab_Abstand);	// limit to end of table
  }
  y1 = MEM_read_word(&RLtab[tabind]);
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
    290e:	50 e0       	ldi	r21, 0x00	; 0
    2910:	08 1b       	sub	r16, r24
    2912:	19 0b       	sbc	r17, r25
    2914:	40 9f       	mul	r20, r16
    2916:	c0 01       	movw	r24, r0
    2918:	41 9f       	mul	r20, r17
    291a:	90 0d       	add	r25, r0
    291c:	50 9f       	mul	r21, r16
    291e:	90 0d       	add	r25, r0
    2920:	11 24       	eor	r1, r1
    2922:	0c 96       	adiw	r24, 0x0c	; 12
    2924:	69 e1       	ldi	r22, 0x19	; 25
    2926:	70 e0       	ldi	r23, 0x00	; 0
    2928:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
    292c:	62 0f       	add	r22, r18
    292e:	73 1f       	adc	r23, r19
}
    2930:	cb 01       	movw	r24, r22
    2932:	df 91       	pop	r29
    2934:	cf 91       	pop	r28
    2936:	1f 91       	pop	r17
    2938:	0f 91       	pop	r16
    293a:	ff 90       	pop	r15
    293c:	08 95       	ret

0000293e <Scale_C_with_vcc>:

void Scale_C_with_vcc(void) {
    293e:	8f 92       	push	r8
    2940:	9f 92       	push	r9
    2942:	af 92       	push	r10
    2944:	bf 92       	push	r11
    2946:	df 92       	push	r13
    2948:	ef 92       	push	r14
    294a:	ff 92       	push	r15
    294c:	0f 93       	push	r16
    294e:	1f 93       	push	r17
    2950:	e0 90 62 01 	lds	r14, 0x0162
    2954:	f0 90 63 01 	lds	r15, 0x0163
    2958:	00 91 64 01 	lds	r16, 0x0164
    295c:	10 91 65 01 	lds	r17, 0x0165
    2960:	d0 90 74 01 	lds	r13, 0x0174
   while (cap.cval > 100000) {
      cap.cval /= 10;
    2964:	4a e0       	ldi	r20, 0x0A	; 10
    2966:	84 2e       	mov	r8, r20
    2968:	91 2c       	mov	r9, r1
    296a:	a1 2c       	mov	r10, r1
    296c:	b1 2c       	mov	r11, r1
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    296e:	08 c0       	rjmp	.+16     	; 0x2980 <Scale_C_with_vcc+0x42>
      cap.cval /= 10;
    2970:	c8 01       	movw	r24, r16
    2972:	b7 01       	movw	r22, r14
    2974:	a5 01       	movw	r20, r10
    2976:	94 01       	movw	r18, r8
    2978:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
    297c:	79 01       	movw	r14, r18
    297e:	8a 01       	movw	r16, r20
    2980:	8d 2d       	mov	r24, r13
    2982:	d3 94       	inc	r13
  y2 = MEM_read_word(&RLtab[tabind+1]);
  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
}

void Scale_C_with_vcc(void) {
   while (cap.cval > 100000) {
    2984:	91 ea       	ldi	r25, 0xA1	; 161
    2986:	e9 16       	cp	r14, r25
    2988:	96 e8       	ldi	r25, 0x86	; 134
    298a:	f9 06       	cpc	r15, r25
    298c:	91 e0       	ldi	r25, 0x01	; 1
    298e:	09 07       	cpc	r16, r25
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	19 07       	cpc	r17, r25
    2994:	68 f7       	brcc	.-38     	; 0x2970 <Scale_C_with_vcc+0x32>
    2996:	80 93 74 01 	sts	0x0174, r24
      cap.cval /= 10;
      cap.cpre ++;			// prevent overflow
   }
   cap.cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    299a:	20 91 40 01 	lds	r18, 0x0140
    299e:	30 91 41 01 	lds	r19, 0x0141
    29a2:	40 e0       	ldi	r20, 0x00	; 0
    29a4:	50 e0       	ldi	r21, 0x00	; 0
    29a6:	c8 01       	movw	r24, r16
    29a8:	b7 01       	movw	r22, r14
    29aa:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
    29ae:	28 e8       	ldi	r18, 0x88	; 136
    29b0:	33 e1       	ldi	r19, 0x13	; 19
    29b2:	40 e0       	ldi	r20, 0x00	; 0
    29b4:	50 e0       	ldi	r21, 0x00	; 0
    29b6:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
    29ba:	20 93 62 01 	sts	0x0162, r18
    29be:	30 93 63 01 	sts	0x0163, r19
    29c2:	40 93 64 01 	sts	0x0164, r20
    29c6:	50 93 65 01 	sts	0x0165, r21
}
    29ca:	1f 91       	pop	r17
    29cc:	0f 91       	pop	r16
    29ce:	ff 90       	pop	r15
    29d0:	ef 90       	pop	r14
    29d2:	df 90       	pop	r13
    29d4:	bf 90       	pop	r11
    29d6:	af 90       	pop	r10
    29d8:	9f 90       	pop	r9
    29da:	8f 90       	pop	r8
    29dc:	08 95       	ret

000029de <ReadCapacity>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    29de:	7f 92       	push	r7
    29e0:	8f 92       	push	r8
    29e2:	9f 92       	push	r9
    29e4:	af 92       	push	r10
    29e6:	bf 92       	push	r11
    29e8:	cf 92       	push	r12
    29ea:	df 92       	push	r13
    29ec:	ef 92       	push	r14
    29ee:	ff 92       	push	r15
    29f0:	0f 93       	push	r16
    29f2:	1f 93       	push	r17
    29f4:	cf 93       	push	r28
    29f6:	df 93       	push	r29
    29f8:	18 2f       	mov	r17, r24
    29fa:	76 2e       	mov	r7, r22
#if FLASHEND > 0x1fff
  unsigned int vloss;	// lost voltage after load pulse in 0.1% 
#endif

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
    29fc:	88 0f       	add	r24, r24
    29fe:	81 0f       	add	r24, r17
    2a00:	86 0f       	add	r24, r22
    2a02:	81 50       	subi	r24, 0x01	; 1
    2a04:	80 93 4c 01 	sts	0x014C, r24
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2a08:	e6 2f       	mov	r30, r22
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	e3 5f       	subi	r30, 0xF3	; 243
    2a0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a10:	04 91       	lpm	r16, Z+
  HiPinR_L = pgm_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
    2a12:	e1 2f       	mov	r30, r17
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	e6 5f       	subi	r30, 0xF6	; 246
    2a18:	fe 4f       	sbci	r31, 0xFE	; 254
    2a1a:	a4 90       	lpm	r10, Z+
  lcd_testpin(LowPin);
  lcd_data('C');
  lcd_testpin(HighPin);
  lcd_space();
#endif
  if(PartFound == PART_RESISTOR) {
    2a1c:	80 91 07 01 	lds	r24, 0x0107
    2a20:	86 30       	cpi	r24, 0x06	; 6
    2a22:	09 f4       	brne	.+2      	; 0x2a26 <ReadCapacity+0x48>
    2a24:	a4 c2       	rjmp	.+1352   	; 0x2f6e <ReadCapacity+0x590>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2a26:	30 91 05 01 	lds	r19, 0x0105
    2a2a:	a8 e7       	ldi	r26, 0x78	; 120
    2a2c:	b1 e0       	ldi	r27, 0x01	; 1
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	13 c0       	rjmp	.+38     	; 0x2a58 <ReadCapacity+0x7a>
     if ((diodes[ii].Cathode == LowPin) && (diodes[ii].Anode == HighPin) && (diodes[ii].Voltage < 1500)) {
    2a32:	11 96       	adiw	r26, 0x01	; 1
    2a34:	8c 91       	ld	r24, X
    2a36:	11 97       	sbiw	r26, 0x01	; 1
    2a38:	87 15       	cp	r24, r7
    2a3a:	61 f4       	brne	.+24     	; 0x2a54 <ReadCapacity+0x76>
    2a3c:	8c 91       	ld	r24, X
    2a3e:	81 17       	cp	r24, r17
    2a40:	49 f4       	brne	.+18     	; 0x2a54 <ReadCapacity+0x76>
    2a42:	12 96       	adiw	r26, 0x02	; 2
    2a44:	8d 91       	ld	r24, X+
    2a46:	9c 91       	ld	r25, X
    2a48:	13 97       	sbiw	r26, 0x03	; 3
    2a4a:	45 e0       	ldi	r20, 0x05	; 5
    2a4c:	8c 3d       	cpi	r24, 0xDC	; 220
    2a4e:	94 07       	cpc	r25, r20
    2a50:	08 f4       	brcc	.+2      	; 0x2a54 <ReadCapacity+0x76>
    2a52:	8d c2       	rjmp	.+1306   	; 0x2f6e <ReadCapacity+0x590>
     lcd_data('R');
     wait_about2s();
#endif
     return;	//We have found a resistor already 
  }
  for (ii=0;ii<NumOfDiodes;ii++) {
    2a54:	2f 5f       	subi	r18, 0xFF	; 255
    2a56:	14 96       	adiw	r26, 0x04	; 4
    2a58:	23 17       	cp	r18, r19
    2a5a:	58 f3       	brcs	.-42     	; 0x2a32 <ReadCapacity+0x54>

#ifdef AUTO_CAL
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
    2a5c:	08 60       	ori	r16, 0x08	; 8
        return;
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
    2a5e:	10 92 6f 01 	sts	0x016F, r1
    2a62:	10 92 6e 01 	sts	0x016E, r1
  vloss = 0;				// set lost voltage to zero
#endif
  cap.cval = 0;				// set capacity value to zero
    2a66:	10 92 62 01 	sts	0x0162, r1
    2a6a:	10 92 63 01 	sts	0x0163, r1
    2a6e:	10 92 64 01 	sts	0x0164, r1
    2a72:	10 92 65 01 	sts	0x0165, r1
  cap.cpre = -12;			//default unit is pF
    2a76:	84 ef       	ldi	r24, 0xF4	; 244
    2a78:	80 93 74 01 	sts	0x0174, r24
  EntladePins();			// discharge capacitor
    2a7c:	0e 94 b2 01 	call	0x364	; 0x364 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    2a80:	88 e0       	ldi	r24, 0x08	; 8
    2a82:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    2a84:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    2a86:	07 b9       	out	0x07, r16	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    2a88:	a4 b8       	out	0x04, r10	; 4
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    2a8a:	81 2f       	mov	r24, r17
    2a8c:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
    2a90:	7c 01       	movw	r14, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2a92:	10 92 4e 01 	sts	0x014E, r1
    2a96:	10 92 4d 01 	sts	0x014D, r1
  EntladePins();			// discharge capacitor
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
  R_PORT = 0;				// switch R-Port to GND
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
    2a9a:	ec 01       	movw	r28, r24
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2a9c:	2d c0       	rjmp	.+90     	; 0x2af8 <ReadCapacity+0x11a>
     R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    2a9e:	a5 b8       	out	0x05, r10	; 5
     R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    2aa0:	a4 b8       	out	0x04, r10	; 4
     wait10ms();			// wait exactly 10ms, do not sleep
    2aa2:	0e 94 47 14 	call	0x288e	; 0x288e <wait10ms>
     R_DDR = 0;				// switch back to input
    2aa6:	14 b8       	out	0x04, r1	; 4
     R_PORT = 0;			// no Pull up
    2aa8:	15 b8       	out	0x05, r1	; 5
     wait500us();			//wait a little time
    2aaa:	0e 94 4d 14 	call	0x289a	; 0x289a <wait500us>
     wdt_reset();
    2aae:	a8 95       	wdr
     // read voltage without current, is already charged enough?
     adcv[2] = ReadADC(HighPin);
    2ab0:	81 2f       	mov	r24, r17
    2ab2:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
     if (adcv[2] > adcv[0]) {
    2ab6:	e8 16       	cp	r14, r24
    2ab8:	f9 06       	cpc	r15, r25
    2aba:	20 f4       	brcc	.+8      	; 0x2ac4 <ReadCapacity+0xe6>
        adcv[2] -= adcv[0];		//difference to beginning voltage
    2abc:	ec 01       	movw	r28, r24
    2abe:	ce 19       	sub	r28, r14
    2ac0:	df 09       	sbc	r29, r15
    2ac2:	02 c0       	rjmp	.+4      	; 0x2ac8 <ReadCapacity+0xea>
     } else {
        adcv[2] = 0;			// voltage is lower or same as beginning voltage
    2ac4:	c0 e0       	ldi	r28, 0x00	; 0
    2ac6:	d0 e0       	ldi	r29, 0x00	; 0
     }
     if ((ovcnt16 == 126) && (adcv[2] < 75)) {
    2ac8:	80 91 4d 01 	lds	r24, 0x014D
    2acc:	90 91 4e 01 	lds	r25, 0x014E
    2ad0:	8e 37       	cpi	r24, 0x7E	; 126
    2ad2:	91 05       	cpc	r25, r1
    2ad4:	21 f4       	brne	.+8      	; 0x2ade <ReadCapacity+0x100>
    2ad6:	cb 34       	cpi	r28, 0x4B	; 75
    2ad8:	d1 05       	cpc	r29, r1
    2ada:	08 f4       	brcc	.+2      	; 0x2ade <ReadCapacity+0x100>
    2adc:	43 c2       	rjmp	.+1158   	; 0x2f64 <ReadCapacity+0x586>
        // 300mV can not be reached well-timed 
        break;		// don't try to load any more
     }
     if (adcv[2] > 300) {
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	cd 32       	cpi	r28, 0x2D	; 45
    2ae2:	d8 07       	cpc	r29, r24
    2ae4:	b0 f4       	brcc	.+44     	; 0x2b12 <ReadCapacity+0x134>
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
  adcv[0] = ReadADC(HighPin);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  adcv[2] = adcv[0];			// preset to prevent compiler warning
  for (ovcnt16=0;ovcnt16<500;ovcnt16++) {
    2ae6:	80 91 4d 01 	lds	r24, 0x014D
    2aea:	90 91 4e 01 	lds	r25, 0x014E
    2aee:	01 96       	adiw	r24, 0x01	; 1
    2af0:	90 93 4e 01 	sts	0x014E, r25
    2af4:	80 93 4d 01 	sts	0x014D, r24
    2af8:	80 91 4d 01 	lds	r24, 0x014D
    2afc:	90 91 4e 01 	lds	r25, 0x014E
    2b00:	21 e0       	ldi	r18, 0x01	; 1
    2b02:	84 3f       	cpi	r24, 0xF4	; 244
    2b04:	92 07       	cpc	r25, r18
    2b06:	58 f2       	brcs	.-106    	; 0x2a9e <ReadCapacity+0xc0>
//  wdt_reset();
#if DebugOut == 10
  DisplayValue(ovcnt16,0,' ',4);
  DisplayValue(adcv[2],-3,'V',4);
#endif
  if (adcv[2] < 301) {
    2b08:	41 e0       	ldi	r20, 0x01	; 1
    2b0a:	cd 32       	cpi	r28, 0x2D	; 45
    2b0c:	d4 07       	cpc	r29, r20
    2b0e:	08 f4       	brcc	.+2      	; 0x2b12 <ReadCapacity+0x134>
    2b10:	29 c2       	rjmp	.+1106   	; 0x2f64 <ReadCapacity+0x586>
#endif
//     if (NumOfDiodes != 0) goto messe_mit_rh; /* ****************************** */
     goto keinC;		// was never charged enough, >100mF or shorted
  }
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2b12:	80 91 4d 01 	lds	r24, 0x014D
    2b16:	90 91 4e 01 	lds	r25, 0x014E
    2b1a:	00 97       	sbiw	r24, 0x00	; 0
    2b1c:	81 f4       	brne	.+32     	; 0x2b3e <ReadCapacity+0x160>
    2b1e:	85 e0       	ldi	r24, 0x05	; 5
    2b20:	c5 31       	cpi	r28, 0x15	; 21
    2b22:	d8 07       	cpc	r29, r24
    2b24:	08 f0       	brcs	.+2      	; 0x2b28 <ReadCapacity+0x14a>
    2b26:	92 c0       	rjmp	.+292    	; 0x2c4c <ReadCapacity+0x26e>
    2b28:	0a c0       	rjmp	.+20     	; 0x2b3e <ReadCapacity+0x160>
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
     wait5ms();
    2b2a:	0e 94 48 14 	call	0x2890	; 0x2890 <wait5ms>
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
    2b2e:	81 2f       	mov	r24, r17
    2b30:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
     wdt_reset();
    2b34:	a8 95       	wdr
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2b36:	08 94       	sec
    2b38:	c1 1c       	adc	r12, r1
    2b3a:	d1 1c       	adc	r13, r1
    2b3c:	03 c0       	rjmp	.+6      	; 0x2b44 <ReadCapacity+0x166>
#endif
//     if (NumOfDiodes != 0) goto messe_mit_rh; /* ****************************** */
     goto keinC;		// was never charged enough, >100mF or shorted
  }
  //voltage is rised properly and keeps the voltage enough
  if ((ovcnt16 == 0 ) && (adcv[2] > 1300)) {
    2b3e:	ce 01       	movw	r24, r28
    2b40:	cc 24       	eor	r12, r12
    2b42:	dd 24       	eor	r13, r13
  cap.cval_uncorrected.dw = ovcnt16 + 1;
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]);		// get factor to convert time to capacity from table
#else
  // wait the half the time which was required for loading
  adcv[3] = adcv[2];			// preset to prevent compiler warning
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    2b44:	20 91 4d 01 	lds	r18, 0x014D
    2b48:	30 91 4e 01 	lds	r19, 0x014E
    2b4c:	2c 15       	cp	r18, r12
    2b4e:	3d 05       	cpc	r19, r13
    2b50:	60 f7       	brcc	.-40     	; 0x2b2a <ReadCapacity+0x14c>
     wait5ms();
     adcv[3] = ReadADC(HighPin);	// read voltage again, is discharged only a little bit ?
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
    2b52:	e8 16       	cp	r14, r24
    2b54:	f9 06       	cpc	r15, r25
    2b56:	30 f4       	brcc	.+12     	; 0x2b64 <ReadCapacity+0x186>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    2b58:	8e 19       	sub	r24, r14
    2b5a:	9f 09       	sbc	r25, r15
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2b5c:	8c 17       	cp	r24, r28
    2b5e:	9d 07       	cpc	r25, r29
    2b60:	10 f5       	brcc	.+68     	; 0x2ba6 <ReadCapacity+0x1c8>
    2b62:	02 c0       	rjmp	.+4      	; 0x2b68 <ReadCapacity+0x18a>
     wdt_reset();
  }
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    2b64:	80 e0       	ldi	r24, 0x00	; 0
    2b66:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
     // build difference to load voltage
     adcv[3] = adcv[2] - adcv[3];	// lost voltage during load time wait
    2b68:	7e 01       	movw	r14, r28
    2b6a:	e8 1a       	sub	r14, r24
    2b6c:	f9 0a       	sbc	r15, r25
  } else {
     adcv[3] = 0;			// no lost voltage
  }
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
    2b6e:	e9 f0       	breq	.+58     	; 0x2baa <ReadCapacity+0x1cc>
     // there is any voltage drop (adcv[3]) !
     // adcv[2] is the loaded voltage.
     vloss = (unsigned long)(adcv[3] * 1000UL) / adcv[2];
    2b70:	b7 01       	movw	r22, r14
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	28 ee       	ldi	r18, 0xE8	; 232
    2b78:	33 e0       	ldi	r19, 0x03	; 3
    2b7a:	40 e0       	ldi	r20, 0x00	; 0
    2b7c:	50 e0       	ldi	r21, 0x00	; 0
    2b7e:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
    2b82:	9e 01       	movw	r18, r28
    2b84:	40 e0       	ldi	r20, 0x00	; 0
    2b86:	50 e0       	ldi	r21, 0x00	; 0
    2b88:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
    2b8c:	49 01       	movw	r8, r18
  }
#endif
  if (adcv[3] > 100) {
    2b8e:	25 e6       	ldi	r18, 0x65	; 101
    2b90:	e2 16       	cp	r14, r18
    2b92:	f1 04       	cpc	r15, r1
    2b94:	60 f0       	brcs	.+24     	; 0x2bae <ReadCapacity+0x1d0>
 #if DebugOut == 10
     lcd_data('L');
     lcd_space();
     wait_about1s();
 #endif
     if (ovcnt16 == 0 )  {
    2b96:	80 91 4d 01 	lds	r24, 0x014D
    2b9a:	90 91 4e 01 	lds	r25, 0x014E
    2b9e:	00 97       	sbiw	r24, 0x00	; 0
    2ba0:	09 f4       	brne	.+2      	; 0x2ba4 <ReadCapacity+0x1c6>
    2ba2:	56 c0       	rjmp	.+172    	; 0x2c50 <ReadCapacity+0x272>
    2ba4:	df c1       	rjmp	.+958    	; 0x2f64 <ReadCapacity+0x586>
  if (adcv[3] > adcv[0]) {
     adcv[3] -= adcv[0];		// difference to beginning voltage
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    2ba6:	ee 24       	eor	r14, r14
    2ba8:	ff 24       	eor	r15, r15
  } else {
     adcv[3] = 0;			// no lost voltage
  }
#if FLASHEND > 0x1fff
  // compute equivalent parallel resistance from voltage drop
  if (adcv[3] > 0) {
    2baa:	88 24       	eor	r8, r8
    2bac:	99 24       	eor	r9, r9
     if (ovcnt16 == 0 )  {
        goto messe_mit_rh;		// Voltage of more than 1300mV is reached in one pulse, but not hold
     }
     goto keinC;			// capacitor does not keep the voltage about 5ms
  }
  cap.cval_uncorrected.dw = ovcnt16 + 1;
    2bae:	a0 90 4d 01 	lds	r10, 0x014D
    2bb2:	b0 90 4e 01 	lds	r11, 0x014E
    2bb6:	08 94       	sec
    2bb8:	a1 1c       	adc	r10, r1
    2bba:	b1 1c       	adc	r11, r1
    2bbc:	cc 24       	eor	r12, r12
    2bbe:	dd 24       	eor	r13, r13
    2bc0:	a0 92 6a 01 	sts	0x016A, r10
    2bc4:	b0 92 6b 01 	sts	0x016B, r11
    2bc8:	c0 92 6c 01 	sts	0x016C, r12
    2bcc:	d0 92 6d 01 	sts	0x016D, r13
  // compute factor with load voltage + lost voltage during the voltage load time
  cap.cval_uncorrected.dw *= getRLmultip(adcv[2]+adcv[3]);	// get factor to convert time to capacity from table
    2bd0:	c7 01       	movw	r24, r14
    2bd2:	8c 0f       	add	r24, r28
    2bd4:	9d 1f       	adc	r25, r29
    2bd6:	0e 94 5d 14 	call	0x28ba	; 0x28ba <getRLmultip>
    2bda:	bc 01       	movw	r22, r24
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	a6 01       	movw	r20, r12
    2be2:	95 01       	movw	r18, r10
    2be4:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
    2be8:	60 93 6a 01 	sts	0x016A, r22
    2bec:	70 93 6b 01 	sts	0x016B, r23
    2bf0:	80 93 6c 01 	sts	0x016C, r24
    2bf4:	90 93 6d 01 	sts	0x016D, r25
#endif
   cap.cval = cap.cval_uncorrected.dw;	// set result to uncorrected
    2bf8:	60 93 62 01 	sts	0x0162, r22
    2bfc:	70 93 63 01 	sts	0x0163, r23
    2c00:	80 93 64 01 	sts	0x0164, r24
    2c04:	90 93 65 01 	sts	0x0165, r25
   cap.cpre = -9;		// switch units to nF 
    2c08:	87 ef       	ldi	r24, 0xF7	; 247
    2c0a:	80 93 74 01 	sts	0x0174, r24
   Scale_C_with_vcc();
    2c0e:	0e 94 9f 14 	call	0x293e	; 0x293e <Scale_C_with_vcc>
   // cap.cval for this type is at least 40000nF, so the last digit will be never shown
   cap.cval *= (1000 - C_H_KORR);	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    2c12:	60 91 62 01 	lds	r22, 0x0162
    2c16:	70 91 63 01 	lds	r23, 0x0163
    2c1a:	80 91 64 01 	lds	r24, 0x0164
    2c1e:	90 91 65 01 	lds	r25, 0x0165
    2c22:	28 ee       	ldi	r18, 0xE8	; 232
    2c24:	33 e0       	ldi	r19, 0x03	; 3
    2c26:	40 e0       	ldi	r20, 0x00	; 0
    2c28:	50 e0       	ldi	r21, 0x00	; 0
    2c2a:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
   cap.cval /= 100;
    2c2e:	24 e6       	ldi	r18, 0x64	; 100
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	40 e0       	ldi	r20, 0x00	; 0
    2c34:	50 e0       	ldi	r21, 0x00	; 0
    2c36:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
    2c3a:	20 93 62 01 	sts	0x0162, r18
    2c3e:	30 93 63 01 	sts	0x0163, r19
    2c42:	40 93 64 01 	sts	0x0164, r20
    2c46:	50 93 65 01 	sts	0x0165, r21
   DisplayValue(cap.cval,cap.cpre,'F',4);
   lcd_space();
   lcd_string(utoa(ovcnt16,outval,10));
   wait_about3s();
#endif
   goto checkDiodes;
    2c4a:	4d c1       	rjmp	.+666    	; 0x2ee6 <ReadCapacity+0x508>
     }
  }
  
#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
  vloss = 0;				// set lost voltage to zero
    2c4c:	88 24       	eor	r8, r8
    2c4e:	99 24       	eor	r9, r9
  pin_combination = (HighPin * 3) + LowPin - 1;	// coded Pin combination for capacity zero offset
#endif

  LoADC = pgm_read_byte(&PinADCtab[LowPin]) | TXD_MSK;
  HiPinR_L = pgm_read_byte(&PinRLtab[HighPin]);	//R_L mask for HighPin R_L load
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    2c50:	ea 2c       	mov	r14, r10
    2c52:	ee 0c       	add	r14, r14

//==================================================================================
// Measurement of little capacity values
messe_mit_rh:
  //little capacity value, about  < 50 µF
  EntladePins();			// discharge capacitor
    2c54:	0e 94 b2 01 	call	0x364	; 0x364 <EntladePins>
  //measure with the R_H (470kOhm) resistor 
  R_PORT = 0;		// R_DDR ist HiPinR_L
    2c58:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | (1<<TxD);	//switch all Pins to output
    2c5a:	8f e0       	ldi	r24, 0x0F	; 15
    2c5c:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    2c5e:	88 e0       	ldi	r24, 0x08	; 8
    2c60:	88 b9       	out	0x08, r24	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    2c62:	e4 b8       	out	0x04, r14	; 4
// setup Analog Comparator
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    2c64:	80 e4       	ldi	r24, 0x40	; 64
    2c66:	80 93 7b 00 	sts	0x007B, r24
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    2c6a:	84 e5       	ldi	r24, 0x54	; 84
    2c6c:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    2c6e:	81 2f       	mov	r24, r17
    2c70:	80 64       	ori	r24, 0x40	; 64
    2c72:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    2c76:	86 e1       	ldi	r24, 0x16	; 22
    2c78:	80 93 7a 00 	sts	0x007A, r24
  wait200us();			//wait for bandgap to start up
    2c7c:	0e 94 50 14 	call	0x28a0	; 0x28a0 <wait200us>

// setup Counter1
  ovcnt16 = 0;
    2c80:	10 92 4e 01 	sts	0x014E, r1
    2c84:	10 92 4d 01 	sts	0x014D, r1
  TCCR1A = 0;			// set Counter1 to normal Mode
    2c88:	10 92 80 00 	sts	0x0080, r1
  TCNT1 = 0;			//set Counter to 0
    2c8c:	10 92 85 00 	sts	0x0085, r1
    2c90:	10 92 84 00 	sts	0x0084, r1
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// clear interrupt flags
    2c94:	87 e2       	ldi	r24, 0x27	; 39
    2c96:	86 bb       	out	0x16, r24	; 22
#ifndef INHIBIT_SLEEP_MODE
  TIMSK1 = (1<<TOIE1) | (1<<ICIE1);	// enable Timer overflow interrupt and input capture interrupt
    2c98:	81 e2       	ldi	r24, 0x21	; 33
    2c9a:	80 93 6f 00 	sts	0x006F, r24
  unfinished = 1;
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	80 93 61 01 	sts	0x0161, r24
#endif
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    2ca4:	e5 b8       	out	0x05, r14	; 5
  if(PartFound == PART_FET) {
    2ca6:	90 91 07 01 	lds	r25, 0x0107
    2caa:	93 30       	cpi	r25, 0x03	; 3
    2cac:	71 f4       	brne	.+28     	; 0x2cca <ReadCapacity+0x2ec>
     // charge capacitor with R_H resistor
     TCCR1B = (1<<CS10);	//Start counter 1MHz or 8MHz
    2cae:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	01 2e       	mov	r0, r17
    2cb8:	02 c0       	rjmp	.+4      	; 0x2cbe <ReadCapacity+0x2e0>
    2cba:	88 0f       	add	r24, r24
    2cbc:	99 1f       	adc	r25, r25
    2cbe:	0a 94       	dec	r0
    2cc0:	e2 f7       	brpl	.-8      	; 0x2cba <ReadCapacity+0x2dc>
    2cc2:	80 95       	com	r24
    2cc4:	8f 70       	andi	r24, 0x0F	; 15
    2cc6:	87 b9       	out	0x07, r24	; 7
    2cc8:	17 c0       	rjmp	.+46     	; 0x2cf8 <ReadCapacity+0x31a>
  } else {
     TCCR1B =  (1<<CS10);	//start counter 1MHz or 8MHz
    2cca:	80 93 81 00 	sts	0x0081, r24
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    2cce:	07 b9       	out	0x07, r16	; 7
    2cd0:	13 c0       	rjmp	.+38     	; 0x2cf8 <ReadCapacity+0x31a>
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
     ovcnt16++;
  }
#else
  while(unfinished) {
    set_sleep_mode(SLEEP_MODE_IDLE);
    2cd2:	83 b7       	in	r24, 0x33	; 51
    2cd4:	81 7f       	andi	r24, 0xF1	; 241
    2cd6:	83 bf       	out	0x33, r24	; 51
    sleep_mode();       /* wait for interrupt */
    2cd8:	83 b7       	in	r24, 0x33	; 51
    2cda:	81 60       	ori	r24, 0x01	; 1
    2cdc:	83 bf       	out	0x33, r24	; 51
    2cde:	88 95       	sleep
    2ce0:	83 b7       	in	r24, 0x33	; 51
    2ce2:	8e 7f       	andi	r24, 0xFE	; 254
    2ce4:	83 bf       	out	0x33, r24	; 51
    wdt_reset();
    2ce6:	a8 95       	wdr
    if(ovcnt16 == (F_CPU/5000)) {
    2ce8:	80 91 4d 01 	lds	r24, 0x014D
    2cec:	90 91 4e 01 	lds	r25, 0x014E
    2cf0:	46 e0       	ldi	r20, 0x06	; 6
    2cf2:	80 34       	cpi	r24, 0x40	; 64
    2cf4:	94 07       	cpc	r25, r20
    2cf6:	21 f0       	breq	.+8      	; 0x2d00 <ReadCapacity+0x322>
     // this OV was not counted, but was before the Input Capture
     TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
     ovcnt16++;
  }
#else
  while(unfinished) {
    2cf8:	80 91 61 01 	lds	r24, 0x0161
    2cfc:	88 23       	and	r24, r24
    2cfe:	49 f7       	brne	.-46     	; 0x2cd2 <ReadCapacity+0x2f4>
    wdt_reset();
    if(ovcnt16 == (F_CPU/5000)) {
       break; 		//Timeout for Charging, above 12 s
    }
  }
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    2d00:	10 92 81 00 	sts	0x0081, r1
  tmpint = ICR1;		// get previous Input Capture Counter flag
    2d04:	c0 91 86 00 	lds	r28, 0x0086
    2d08:	d0 91 87 00 	lds	r29, 0x0087
  TIMSK1 = (0<<TOIE1) | (0<<ICIE1);	// disable Timer overflow interrupt and input capture interrupt
    2d0c:	10 92 6f 00 	sts	0x006F, r1
  if (TCNT1 < tmpint) {
    2d10:	80 91 84 00 	lds	r24, 0x0084
    2d14:	90 91 85 00 	lds	r25, 0x0085
    2d18:	8c 17       	cp	r24, r28
    2d1a:	9d 07       	cpc	r25, r29
    2d1c:	48 f4       	brcc	.+18     	; 0x2d30 <ReadCapacity+0x352>
     ovcnt16--;			// one ov to much
    2d1e:	80 91 4d 01 	lds	r24, 0x014D
    2d22:	90 91 4e 01 	lds	r25, 0x014E
    2d26:	01 97       	sbiw	r24, 0x01	; 1
    2d28:	90 93 4e 01 	sts	0x014E, r25
    2d2c:	80 93 4d 01 	sts	0x014D, r24
  }

#endif
//############################################################
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    2d30:	86 e9       	ldi	r24, 0x96	; 150
    2d32:	80 93 7a 00 	sts	0x007A, r24
  R_DDR = 0;			// switch R_H resistor port for input
    2d36:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    2d38:	15 b8       	out	0x05, r1	; 5
  adcv[2] = ReadADC(HighPin);   // get loaded voltage
    2d3a:	81 2f       	mov	r24, r17
    2d3c:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
  load_diff = adcv[2] + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    2d40:	20 91 44 01 	lds	r18, 0x0144
    2d44:	30 91 45 01 	lds	r19, 0x0145
    2d48:	82 1b       	sub	r24, r18
    2d4a:	93 0b       	sbc	r25, r19
    2d4c:	0c 96       	adiw	r24, 0x0c	; 12
    2d4e:	90 93 77 01 	sts	0x0177, r25
    2d52:	80 93 76 01 	sts	0x0176, r24
//############################################################
  if (ovcnt16 >= (F_CPU/10000)) {
    2d56:	80 91 4d 01 	lds	r24, 0x014D
    2d5a:	90 91 4e 01 	lds	r25, 0x014E
    2d5e:	23 e0       	ldi	r18, 0x03	; 3
    2d60:	80 32       	cpi	r24, 0x20	; 32
    2d62:	92 07       	cpc	r25, r18
    2d64:	08 f0       	brcs	.+2      	; 0x2d68 <ReadCapacity+0x38a>
    2d66:	fe c0       	rjmp	.+508    	; 0x2f64 <ReadCapacity+0x586>
     wait_about1s();
#endif
     goto keinC;	// no normal end
  }
//  cap.cval_uncorrected = CombineII2Long(ovcnt16, tmpint);
  cap.cval_uncorrected.w[1] = ovcnt16;
    2d68:	80 91 4d 01 	lds	r24, 0x014D
    2d6c:	90 91 4e 01 	lds	r25, 0x014E
    2d70:	90 93 6d 01 	sts	0x016D, r25
    2d74:	80 93 6c 01 	sts	0x016C, r24
  cap.cval_uncorrected.w[0] = tmpint;
    2d78:	d0 93 6b 01 	sts	0x016B, r29
    2d7c:	c0 93 6a 01 	sts	0x016A, r28

  cap.cpre = -12;			// cap.cval unit is pF 
    2d80:	84 ef       	ldi	r24, 0xF4	; 244
    2d82:	80 93 74 01 	sts	0x0174, r24
  if (ovcnt16 > 65) {
    2d86:	80 91 4d 01 	lds	r24, 0x014D
    2d8a:	90 91 4e 01 	lds	r25, 0x014E
    2d8e:	82 34       	cpi	r24, 0x42	; 66
    2d90:	91 05       	cpc	r25, r1
    2d92:	c8 f0       	brcs	.+50     	; 0x2dc6 <ReadCapacity+0x3e8>
     cap.cval_uncorrected.dw /= 100;	// switch to next unit
    2d94:	60 91 6a 01 	lds	r22, 0x016A
    2d98:	70 91 6b 01 	lds	r23, 0x016B
    2d9c:	80 91 6c 01 	lds	r24, 0x016C
    2da0:	90 91 6d 01 	lds	r25, 0x016D
    2da4:	24 e6       	ldi	r18, 0x64	; 100
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	40 e0       	ldi	r20, 0x00	; 0
    2daa:	50 e0       	ldi	r21, 0x00	; 0
    2dac:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
    2db0:	20 93 6a 01 	sts	0x016A, r18
    2db4:	30 93 6b 01 	sts	0x016B, r19
    2db8:	40 93 6c 01 	sts	0x016C, r20
    2dbc:	50 93 6d 01 	sts	0x016D, r21
     cap.cpre += 2;			// set unit, prevent overflow
    2dc0:	86 ef       	ldi	r24, 0xF6	; 246
    2dc2:	80 93 74 01 	sts	0x0174, r24
  }
  cap.cval_uncorrected.dw *= RHmultip;		// 708
    2dc6:	60 91 00 01 	lds	r22, 0x0100
    2dca:	70 91 01 01 	lds	r23, 0x0101
    2dce:	80 e0       	ldi	r24, 0x00	; 0
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	20 91 6a 01 	lds	r18, 0x016A
    2dd6:	30 91 6b 01 	lds	r19, 0x016B
    2dda:	40 91 6c 01 	lds	r20, 0x016C
    2dde:	50 91 6d 01 	lds	r21, 0x016D
    2de2:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
  cap.cval_uncorrected.dw /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    2de6:	20 e2       	ldi	r18, 0x20	; 32
    2de8:	33 e0       	ldi	r19, 0x03	; 3
    2dea:	40 e0       	ldi	r20, 0x00	; 0
    2dec:	50 e0       	ldi	r21, 0x00	; 0
    2dee:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
    2df2:	20 93 6a 01 	sts	0x016A, r18
    2df6:	30 93 6b 01 	sts	0x016B, r19
    2dfa:	40 93 6c 01 	sts	0x016C, r20
    2dfe:	50 93 6d 01 	sts	0x016D, r21
  cap.cval = cap.cval_uncorrected.dw;		// set the corrected cap.cval
    2e02:	e2 e6       	ldi	r30, 0x62	; 98
    2e04:	f1 e0       	ldi	r31, 0x01	; 1
    2e06:	20 93 62 01 	sts	0x0162, r18
    2e0a:	31 83       	std	Z+1, r19	; 0x01
    2e0c:	42 83       	std	Z+2, r20	; 0x02
    2e0e:	53 83       	std	Z+3, r21	; 0x03
  Scale_C_with_vcc();
    2e10:	0e 94 9f 14 	call	0x293e	; 0x293e <Scale_C_with_vcc>
  if (cap.cpre == -12) {
    2e14:	80 91 74 01 	lds	r24, 0x0174
    2e18:	84 3f       	cpi	r24, 0xF4	; 244
    2e1a:	09 f0       	breq	.+2      	; 0x2e1e <ReadCapacity+0x440>
    2e1c:	55 c0       	rjmp	.+170    	; 0x2ec8 <ReadCapacity+0x4ea>
#if COMP_SLEW1 > COMP_SLEW2
     if (cap.cval < COMP_SLEW1) {
    2e1e:	c0 90 62 01 	lds	r12, 0x0162
    2e22:	d0 90 63 01 	lds	r13, 0x0163
    2e26:	e0 90 64 01 	lds	r14, 0x0164
    2e2a:	f0 90 65 01 	lds	r15, 0x0165
    2e2e:	40 ea       	ldi	r20, 0xA0	; 160
    2e30:	c4 16       	cp	r12, r20
    2e32:	4f e0       	ldi	r20, 0x0F	; 15
    2e34:	d4 06       	cpc	r13, r20
    2e36:	40 e0       	ldi	r20, 0x00	; 0
    2e38:	e4 06       	cpc	r14, r20
    2e3a:	40 e0       	ldi	r20, 0x00	; 0
    2e3c:	f4 06       	cpc	r15, r20
    2e3e:	c0 f4       	brcc	.+48     	; 0x2e70 <ReadCapacity+0x492>
        // add slew rate dependent offset
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
    2e40:	a7 01       	movw	r20, r14
    2e42:	96 01       	movw	r18, r12
    2e44:	24 52       	subi	r18, 0x24	; 36
    2e46:	3f 4f       	sbci	r19, 0xFF	; 255
    2e48:	4f 4f       	sbci	r20, 0xFF	; 255
    2e4a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e4c:	60 ea       	ldi	r22, 0xA0	; 160
    2e4e:	7f e0       	ldi	r23, 0x0F	; 15
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
    2e58:	2c 0d       	add	r18, r12
    2e5a:	3d 1d       	adc	r19, r13
    2e5c:	4e 1d       	adc	r20, r14
    2e5e:	5f 1d       	adc	r21, r15
    2e60:	20 93 62 01 	sts	0x0162, r18
    2e64:	30 93 63 01 	sts	0x0163, r19
    2e68:	40 93 64 01 	sts	0x0164, r20
    2e6c:	50 93 65 01 	sts	0x0165, r21
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2e70:	80 91 4c 01 	lds	r24, 0x014C
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	87 53       	subi	r24, 0x37	; 55
    2e78:	9e 4f       	sbci	r25, 0xFE	; 254
    2e7a:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <__eerd_byte_m168>
     if (cap.cval > tmpint) {
    2e7e:	20 91 62 01 	lds	r18, 0x0162
    2e82:	30 91 63 01 	lds	r19, 0x0163
    2e86:	40 91 64 01 	lds	r20, 0x0164
    2e8a:	50 91 65 01 	lds	r21, 0x0165
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
     }
#endif
#ifdef AUTO_CAL
     // auto calibration mode, cap_null can be updated in selftest section
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
     if (cap.cval > tmpint) {
    2e90:	a0 e0       	ldi	r26, 0x00	; 0
    2e92:	b0 e0       	ldi	r27, 0x00	; 0
    2e94:	82 17       	cp	r24, r18
    2e96:	93 07       	cpc	r25, r19
    2e98:	a4 07       	cpc	r26, r20
    2e9a:	b5 07       	cpc	r27, r21
    2e9c:	68 f4       	brcc	.+26     	; 0x2eb8 <ReadCapacity+0x4da>
         cap.cval -= tmpint;		//subtract zero offset (pF)
    2e9e:	28 1b       	sub	r18, r24
    2ea0:	39 0b       	sbc	r19, r25
    2ea2:	4a 0b       	sbc	r20, r26
    2ea4:	5b 0b       	sbc	r21, r27
    2ea6:	20 93 62 01 	sts	0x0162, r18
    2eaa:	30 93 63 01 	sts	0x0163, r19
    2eae:	40 93 64 01 	sts	0x0164, r20
    2eb2:	50 93 65 01 	sts	0x0165, r21
    2eb6:	08 c0       	rjmp	.+16     	; 0x2ec8 <ReadCapacity+0x4ea>
     } else {
         cap.cval = 0;			//unsigned long may not reach negativ value
    2eb8:	10 92 62 01 	sts	0x0162, r1
    2ebc:	10 92 63 01 	sts	0x0163, r1
    2ec0:	10 92 64 01 	sts	0x0164, r1
    2ec4:	10 92 65 01 	sts	0x0165, r1
  lcd_testpin(HighPin);
  lcd_space();
  DisplayValue(cap.cval,cap.cpre,'F',4);
  wait_about3s();
#endif
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    2ec8:	a4 b8       	out	0x04, r10	; 4
#if F_CPU < 2000001
   if(cap.cval < 50)
#else 
   if(cap.cval < 25)
    2eca:	80 91 62 01 	lds	r24, 0x0162
    2ece:	90 91 63 01 	lds	r25, 0x0163
    2ed2:	a0 91 64 01 	lds	r26, 0x0164
    2ed6:	b0 91 65 01 	lds	r27, 0x0165
    2eda:	89 31       	cpi	r24, 0x19	; 25
    2edc:	91 05       	cpc	r25, r1
    2ede:	a1 05       	cpc	r26, r1
    2ee0:	b1 05       	cpc	r27, r1
    2ee2:	08 f4       	brcc	.+2      	; 0x2ee6 <ReadCapacity+0x508>
    2ee4:	3f c0       	rjmp	.+126    	; 0x2f64 <ReadCapacity+0x586>
#endif
      goto keinC;	//capacity to low, < 50pF @1MHz (25pF @8MHz)
   }
   // end low capacity 
checkDiodes:
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    2ee6:	80 91 05 01 	lds	r24, 0x0105
    2eea:	88 23       	and	r24, r24
    2eec:	21 f0       	breq	.+8      	; 0x2ef6 <ReadCapacity+0x518>
    2eee:	80 91 07 01 	lds	r24, 0x0107
    2ef2:	83 30       	cpi	r24, 0x03	; 3
    2ef4:	b9 f5       	brne	.+110    	; 0x2f64 <ReadCapacity+0x586>
      wait_about1s();
#endif
      // nearly shure, that there is one or more diodes in reverse direction,
      // which would be wrongly detected as capacitor 
   } else {
      PartFound = PART_CAPACITOR;	//capacitor is found
    2ef6:	87 e0       	ldi	r24, 0x07	; 7
    2ef8:	80 93 07 01 	sts	0x0107, r24
      if ((cap.cpre > cap.cpre_max) || ((cap.cpre == cap.cpre_max) && (cap.cval > cap.cval_max))) {
    2efc:	60 91 74 01 	lds	r22, 0x0174
    2f00:	80 91 75 01 	lds	r24, 0x0175
    2f04:	86 17       	cp	r24, r22
    2f06:	bc f0       	brlt	.+46     	; 0x2f36 <ReadCapacity+0x558>
    2f08:	68 17       	cp	r22, r24
    2f0a:	61 f5       	brne	.+88     	; 0x2f64 <ReadCapacity+0x586>
    2f0c:	20 91 62 01 	lds	r18, 0x0162
    2f10:	30 91 63 01 	lds	r19, 0x0163
    2f14:	40 91 64 01 	lds	r20, 0x0164
    2f18:	50 91 65 01 	lds	r21, 0x0165
    2f1c:	80 91 66 01 	lds	r24, 0x0166
    2f20:	90 91 67 01 	lds	r25, 0x0167
    2f24:	a0 91 68 01 	lds	r26, 0x0168
    2f28:	b0 91 69 01 	lds	r27, 0x0169
    2f2c:	82 17       	cp	r24, r18
    2f2e:	93 07       	cpc	r25, r19
    2f30:	a4 07       	cpc	r26, r20
    2f32:	b5 07       	cpc	r27, r21
    2f34:	b8 f4       	brcc	.+46     	; 0x2f64 <ReadCapacity+0x586>
         // we have found a greater one
         cap.cval_max = cap.cval;
    2f36:	e2 e6       	ldi	r30, 0x62	; 98
    2f38:	f1 e0       	ldi	r31, 0x01	; 1
    2f3a:	80 91 62 01 	lds	r24, 0x0162
    2f3e:	90 91 63 01 	lds	r25, 0x0163
    2f42:	a0 91 64 01 	lds	r26, 0x0164
    2f46:	b0 91 65 01 	lds	r27, 0x0165
    2f4a:	80 93 66 01 	sts	0x0166, r24
    2f4e:	90 93 67 01 	sts	0x0167, r25
    2f52:	a0 93 68 01 	sts	0x0168, r26
    2f56:	b0 93 69 01 	sts	0x0169, r27
         cap.cpre_max = cap.cpre;
    2f5a:	63 8b       	std	Z+19, r22	; 0x13
#if FLASHEND > 0x1fff
         cap.v_loss = vloss;		// lost voltage in 0.01%
    2f5c:	97 86       	std	Z+15, r9	; 0x0f
    2f5e:	86 86       	std	Z+14, r8	; 0x0e
#endif
         cap.ca = LowPin;		// save LowPin
    2f60:	70 8a       	std	Z+16, r7	; 0x10
         cap.cb = HighPin;		// save HighPin
    2f62:	11 8b       	std	Z+17, r17	; 0x11
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    2f64:	88 e0       	ldi	r24, 0x08	; 8
    2f66:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    2f68:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    2f6a:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    2f6c:	15 b8       	out	0x05, r1	; 5
  return;
 } // end ReadCapacity()
    2f6e:	df 91       	pop	r29
    2f70:	cf 91       	pop	r28
    2f72:	1f 91       	pop	r17
    2f74:	0f 91       	pop	r16
    2f76:	ff 90       	pop	r15
    2f78:	ef 90       	pop	r14
    2f7a:	df 90       	pop	r13
    2f7c:	cf 90       	pop	r12
    2f7e:	bf 90       	pop	r11
    2f80:	af 90       	pop	r10
    2f82:	9f 90       	pop	r9
    2f84:	8f 90       	pop	r8
    2f86:	7f 90       	pop	r7
    2f88:	08 95       	ret

00002f8a <__vector_13>:
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
}
#ifndef INHIBIT_SLEEP_MODE
/* Interrupt Service Routine for timer1 Overflow */
 ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    2f8a:	1f 92       	push	r1
    2f8c:	0f 92       	push	r0
    2f8e:	0f b6       	in	r0, 0x3f	; 63
    2f90:	0f 92       	push	r0
    2f92:	11 24       	eor	r1, r1
    2f94:	8f 93       	push	r24
    2f96:	9f 93       	push	r25
 ovcnt16++;				// count overflow
    2f98:	80 91 4d 01 	lds	r24, 0x014D
    2f9c:	90 91 4e 01 	lds	r25, 0x014E
    2fa0:	01 96       	adiw	r24, 0x01	; 1
    2fa2:	90 93 4e 01 	sts	0x014E, r25
    2fa6:	80 93 4d 01 	sts	0x014D, r24
}
    2faa:	9f 91       	pop	r25
    2fac:	8f 91       	pop	r24
    2fae:	0f 90       	pop	r0
    2fb0:	0f be       	out	0x3f, r0	; 63
    2fb2:	0f 90       	pop	r0
    2fb4:	1f 90       	pop	r1
    2fb6:	18 95       	reti

00002fb8 <__vector_10>:
/* Interrupt Service Routine for timer1 capture event (Comparator) */
 ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    2fb8:	1f 92       	push	r1
    2fba:	0f 92       	push	r0
    2fbc:	0f b6       	in	r0, 0x3f	; 63
    2fbe:	0f 92       	push	r0
    2fc0:	11 24       	eor	r1, r1
 unfinished = 0;			// clear unfinished flag
    2fc2:	10 92 61 01 	sts	0x0161, r1
}
    2fc6:	0f 90       	pop	r0
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	0f 90       	pop	r0
    2fcc:	1f 90       	pop	r1
    2fce:	18 95       	reti

00002fd0 <get_log>:
 } // end ReadInductance()


#if FLASHEND > 0x1fff
// get_log interpolate a table with the function -log(1 - (permil/1000))
uint16_t get_log(uint16_t permil) {
    2fd0:	cf 93       	push	r28
    2fd2:	df 93       	push	r29
  uint16_t y1, y2;			// table values
  uint16_t result;			// result of interpolation
  uint8_t tabind;			// index to table value
  uint8_t tabres;			// distance to lower table value, fraction of Log_Tab_Distance

  tabind = permil / Log_Tab_Distance;	// index to table
    2fd4:	24 e1       	ldi	r18, 0x14	; 20
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	b9 01       	movw	r22, r18
    2fda:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
    2fde:	dc 01       	movw	r26, r24
  tabres = permil % Log_Tab_Distance;	// fraction of table distance
  // interpolate the table of factors
  y1 = pgm_read_word(&LogTab[tabind]);	// get the lower table value
    2fe0:	70 e0       	ldi	r23, 0x00	; 0
    2fe2:	fb 01       	movw	r30, r22
    2fe4:	ee 0f       	add	r30, r30
    2fe6:	ff 1f       	adc	r31, r31
    2fe8:	e8 59       	subi	r30, 0x98	; 152
    2fea:	ff 4f       	sbci	r31, 0xFF	; 255
    2fec:	c5 91       	lpm	r28, Z+
    2fee:	d4 91       	lpm	r29, Z+
  y2 = pgm_read_word(&LogTab[tabind+1]); // get the higher table value
    2ff0:	fb 01       	movw	r30, r22
    2ff2:	ee 0f       	add	r30, r30
    2ff4:	ff 1f       	adc	r31, r31
    2ff6:	e6 59       	subi	r30, 0x96	; 150
    2ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffa:	45 91       	lpm	r20, Z+
    2ffc:	54 91       	lpm	r21, Z+
  result = ((y2 - y1) * tabres ) / Log_Tab_Distance + y1; // interpolate
    2ffe:	4c 1b       	sub	r20, r28
    3000:	5d 0b       	sbc	r21, r29
    3002:	4a 9f       	mul	r20, r26
    3004:	c0 01       	movw	r24, r0
    3006:	4b 9f       	mul	r20, r27
    3008:	90 0d       	add	r25, r0
    300a:	5a 9f       	mul	r21, r26
    300c:	90 0d       	add	r25, r0
    300e:	11 24       	eor	r1, r1
    3010:	b9 01       	movw	r22, r18
    3012:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
    3016:	6c 0f       	add	r22, r28
    3018:	7d 1f       	adc	r23, r29
  return(result);
 }
    301a:	cb 01       	movw	r24, r22
    301c:	df 91       	pop	r29
    301e:	cf 91       	pop	r28
    3020:	08 95       	ret

00003022 <ReadInductance>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadInductance(void) {
    3022:	2f 92       	push	r2
    3024:	3f 92       	push	r3
    3026:	4f 92       	push	r4
    3028:	5f 92       	push	r5
    302a:	6f 92       	push	r6
    302c:	7f 92       	push	r7
    302e:	8f 92       	push	r8
    3030:	9f 92       	push	r9
    3032:	af 92       	push	r10
    3034:	bf 92       	push	r11
    3036:	cf 92       	push	r12
    3038:	df 92       	push	r13
    303a:	ef 92       	push	r14
    303c:	ff 92       	push	r15
    303e:	0f 93       	push	r16
    3040:	1f 93       	push	r17
    3042:	df 93       	push	r29
    3044:	cf 93       	push	r28
    3046:	cd b7       	in	r28, 0x3d	; 61
    3048:	de b7       	in	r29, 0x3e	; 62
    304a:	68 97       	sbiw	r28, 0x18	; 24
    304c:	0f b6       	in	r0, 0x3f	; 63
    304e:	f8 94       	cli
    3050:	de bf       	out	0x3e, r29	; 62
    3052:	0f be       	out	0x3f, r0	; 63
    3054:	cd bf       	out	0x3d, r28	; 61
  int8_t ukorr;		// correction of comparator voltage
  uint8_t nr_pol1;	// number of successfull inductance measurement with polarity 1
  uint8_t nr_pol2;	// number of successfull inductance measurement with polarity 2


  if(PartFound != PART_RESISTOR) {
    3056:	80 91 07 01 	lds	r24, 0x0107
    305a:	86 30       	cpi	r24, 0x06	; 6
    305c:	09 f0       	breq	.+2      	; 0x3060 <ReadInductance+0x3e>
    305e:	4b c2       	rjmp	.+1174   	; 0x34f6 <ReadInductance+0x4d4>
     return;	//We have found no resistor  
  }
  if (ResistorsFound != 1) {
    3060:	80 91 5e 01 	lds	r24, 0x015E
    3064:	81 30       	cpi	r24, 0x01	; 1
    3066:	09 f0       	breq	.+2      	; 0x306a <ReadInductance+0x48>
    3068:	46 c2       	rjmp	.+1164   	; 0x34f6 <ReadInductance+0x4d4>
     return;	// do not search for inductance, more than 1 resistor
  }
//  for (found=0;found<ResistorsFound;found++) {
//     if (resis[found].rx > 21000) continue;
     if (resis[found].rx > 21000) return;
    306a:	80 91 18 01 	lds	r24, 0x0118
    306e:	90 91 19 01 	lds	r25, 0x0119
    3072:	a0 91 1a 01 	lds	r26, 0x011A
    3076:	b0 91 1b 01 	lds	r27, 0x011B
    307a:	89 30       	cpi	r24, 0x09	; 9
    307c:	22 e5       	ldi	r18, 0x52	; 82
    307e:	92 07       	cpc	r25, r18
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	a2 07       	cpc	r26, r18
    3084:	20 e0       	ldi	r18, 0x00	; 0
    3086:	b2 07       	cpc	r27, r18
    3088:	08 f0       	brcs	.+2      	; 0x308c <ReadInductance+0x6a>
    308a:	35 c2       	rjmp	.+1130   	; 0x34f6 <ReadInductance+0x4d4>
    308c:	99 24       	eor	r9, r9
    308e:	80 91 21 01 	lds	r24, 0x0121
    3092:	40 90 22 01 	lds	r4, 0x0122

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
        // Try four times (different direction and with delayed counter start)
        if (count < 2) {
    3096:	99 2d       	mov	r25, r9
    3098:	92 30       	cpi	r25, 0x02	; 2
    309a:	10 f4       	brcc	.+4      	; 0x30a0 <ReadInductance+0x7e>
           // first and second pass, direction 1
           LowPin = resis[found].ra;
    309c:	88 2e       	mov	r8, r24
    309e:	02 c0       	rjmp	.+4      	; 0x30a4 <ReadInductance+0x82>
           HighPin = resis[found].rb;
        } else {
           // third and fourth pass, direction 2
           LowPin = resis[found].rb;
    30a0:	84 2c       	mov	r8, r4
           HighPin = resis[found].ra;
    30a2:	48 2e       	mov	r4, r24
        }
        HiADC = pgm_read_byte(&PinADCtab[HighPin]);
    30a4:	e4 2d       	mov	r30, r4
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	e3 5f       	subi	r30, 0xF3	; 243
    30aa:	fe 4f       	sbci	r31, 0xFE	; 254
    30ac:	24 91       	lpm	r18, Z+
        LoPinR_L = pgm_read_byte(&PinRLtab[LowPin]);	//R_L mask for HighPin R_L load
    30ae:	e8 2d       	mov	r30, r8
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	e6 5f       	subi	r30, 0xF6	; 246
    30b4:	fe 4f       	sbci	r31, 0xFE	; 254
    30b6:	e4 91       	lpm	r30, Z+
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
    30b8:	15 b8       	out	0x05, r1	; 5
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    30ba:	a8 e0       	ldi	r26, 0x08	; 8
    30bc:	a8 b9       	out	0x08, r26	; 8
        if ((resis[found].rx < 240) && ((count & 0x01) == 0)) {
    30be:	80 91 18 01 	lds	r24, 0x0118
    30c2:	90 91 19 01 	lds	r25, 0x0119
    30c6:	a0 91 1a 01 	lds	r26, 0x011A
    30ca:	b0 91 1b 01 	lds	r27, 0x011B
    30ce:	80 3f       	cpi	r24, 0xF0	; 240
    30d0:	91 05       	cpc	r25, r1
    30d2:	a1 05       	cpc	r26, r1
    30d4:	b1 05       	cpc	r27, r1
    30d6:	b8 f4       	brcc	.+46     	; 0x3106 <ReadInductance+0xe4>
    30d8:	90 fc       	sbrc	r9, 0
    30da:	15 c0       	rjmp	.+42     	; 0x3106 <ReadInductance+0xe4>
           // we can use PinR_L for measurement
           mess_r = RR680MI - R_L_VAL;			// use only pin output resistance
    30dc:	a0 90 02 01 	lds	r10, 0x0102
    30e0:	b0 90 03 01 	lds	r11, 0x0103
    30e4:	80 e7       	ldi	r24, 0x70	; 112
    30e6:	95 ee       	ldi	r25, 0xE5	; 229
    30e8:	a8 0e       	add	r10, r24
    30ea:	b9 1e       	adc	r11, r25
           ADC_DDR = HiADC | (1<<LowPin) | TXD_MSK;	// switch HiADC and Low Pin to GND, 
    30ec:	32 2f       	mov	r19, r18
    30ee:	38 60       	ori	r19, 0x08	; 8
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	08 2c       	mov	r0, r8
    30f6:	02 c0       	rjmp	.+4      	; 0x30fc <ReadInductance+0xda>
    30f8:	88 0f       	add	r24, r24
    30fa:	99 1f       	adc	r25, r25
    30fc:	0a 94       	dec	r0
    30fe:	e2 f7       	brpl	.-8      	; 0x30f8 <ReadInductance+0xd6>
    3100:	38 2b       	or	r19, r24
    3102:	37 b9       	out	0x07, r19	; 7
    3104:	08 c0       	rjmp	.+16     	; 0x3116 <ReadInductance+0xf4>
        } else {
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    3106:	e4 b9       	out	0x04, r30	; 4
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
    3108:	82 2f       	mov	r24, r18
    310a:	88 60       	ori	r24, 0x08	; 8
    310c:	87 b9       	out	0x07, r24	; 7
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
    310e:	a0 90 02 01 	lds	r10, 0x0102
    3112:	b0 90 03 01 	lds	r11, 0x0103
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    3116:	30 e0       	ldi	r19, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    3118:	88 2d       	mov	r24, r8
    311a:	28 8f       	std	Y+24, r18	; 0x18
    311c:	3f 8b       	std	Y+23, r19	; 0x17
    311e:	0e 94 9a 1a 	call	0x3534	; 0x3534 <W10msReadADC>
    3122:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    3124:	84 2d       	mov	r24, r4
    3126:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
    312a:	ac 01       	movw	r20, r24
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    312c:	28 8d       	ldd	r18, Y+24	; 0x18
    312e:	3f 89       	ldd	r19, Y+23	; 0x17
    3130:	92 e0       	ldi	r25, 0x02	; 2
    3132:	c9 16       	cp	r12, r25
    3134:	d1 04       	cpc	r13, r1
    3136:	18 f4       	brcc	.+6      	; 0x313e <ReadInductance+0x11c>
    3138:	42 30       	cpi	r20, 0x02	; 2
    313a:	51 05       	cpc	r21, r1
    313c:	18 f0       	brcs	.+6      	; 0x3144 <ReadInductance+0x122>
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
    313e:	3f 5f       	subi	r19, 0xFF	; 255
    3140:	34 31       	cpi	r19, 0x14	; 20
    3142:	51 f7       	brne	.-44     	; 0x3118 <ReadInductance+0xf6>
            umax = W10msReadADC(LowPin);
            total_r =  ReadADC(HighPin);
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
        }
        // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    3144:	a0 e4       	ldi	r26, 0x40	; 64
    3146:	a0 93 7b 00 	sts	0x007B, r26
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    314a:	b4 e5       	ldi	r27, 0x54	; 84
    314c:	b0 bf       	out	0x30, r27	; 48
        ADMUX = (1<<REFS0) | LowPin;			// switch Mux to Low-Pin
    314e:	88 2d       	mov	r24, r8
    3150:	80 64       	ori	r24, 0x40	; 64
    3152:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    3156:	86 e1       	ldi	r24, 0x16	; 22
    3158:	80 93 7a 00 	sts	0x007A, r24
   
      // setup Counter1
        timeconstant.w[1] = 0;		// set ov counter to 0
    315c:	00 e0       	ldi	r16, 0x00	; 0
    315e:	10 e0       	ldi	r17, 0x00	; 0
        TCCR1A = 0;			// set Counter1 to normal Mode
    3160:	10 92 80 00 	sts	0x0080, r1
        TCNT1 = 0;			//set Counter to 0
    3164:	10 92 85 00 	sts	0x0085, r1
    3168:	10 92 84 00 	sts	0x0084, r1
        TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// reset TIFR or TIFR1
    316c:	97 e2       	ldi	r25, 0x27	; 39
    316e:	96 bb       	out	0x16, r25	; 22
        HiADC |= TXD_VAL;
    3170:	28 60       	ori	r18, 0x08	; 8
        wait200us();			// wait for bandgap to start up
    3172:	28 8f       	std	Y+24, r18	; 0x18
    3174:	0e 94 50 14 	call	0x28a0	; 0x28a0 <wait200us>
        if ((count & 0x01) == 0 ) {
    3178:	29 2c       	mov	r2, r9
    317a:	33 24       	eor	r3, r3
    317c:	d1 01       	movw	r26, r2
    317e:	a1 70       	andi	r26, 0x01	; 1
    3180:	b0 70       	andi	r27, 0x00	; 0
    3182:	ba 8b       	std	Y+18, r27	; 0x12
    3184:	a9 8b       	std	Y+17, r26	; 0x11
    3186:	28 8d       	ldd	r18, Y+24	; 0x18
    3188:	90 fc       	sbrc	r9, 0
    318a:	05 c0       	rjmp	.+10     	; 0x3196 <ReadInductance+0x174>
           //first start counter, then start current
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    318c:	b1 e8       	ldi	r27, 0x81	; 129
    318e:	b0 93 81 00 	sts	0x0081, r27
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    3192:	28 b9       	out	0x08, r18	; 8
    3194:	08 c0       	rjmp	.+16     	; 0x31a6 <ReadInductance+0x184>
        } else {
           //first start current, then start counter with delay
           //parasitic capacity of coil can cause high current at the beginning
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    3196:	28 b9       	out	0x08, r18	; 8
      #if F_CPU >= 8000000UL
           wait3us();		// ignore current peak from capacity
    3198:	0e 94 59 14 	call	0x28b2	; 0x28b2 <wait3us>
      #else
           wdt_reset();			// delay
           wdt_reset();			// delay
      #endif
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    319c:	20 e2       	ldi	r18, 0x20	; 32
    319e:	26 bb       	out	0x16, r18	; 22
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    31a0:	81 e8       	ldi	r24, 0x81	; 129
    31a2:	80 93 81 00 	sts	0x0081, r24
    31a6:	c8 01       	movw	r24, r16
        }
      
      //******************************
        while(1) {
           // Wait, until  Input Capture is set
           ii = TI1_INT_FLAGS;		//read Timer flags
    31a8:	46 b3       	in	r20, 0x16	; 22
           if (ii & (1<<ICF1))  {
    31aa:	45 ff       	sbrs	r20, 5
    31ac:	02 c0       	rjmp	.+4      	; 0x31b2 <ReadInductance+0x190>
    31ae:	8c 01       	movw	r16, r24
    31b0:	0b c0       	rjmp	.+22     	; 0x31c8 <ReadInductance+0x1a6>
              break;
           }
           if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    31b2:	40 ff       	sbrs	r20, 0
    31b4:	f9 cf       	rjmp	.-14     	; 0x31a8 <ReadInductance+0x186>
              TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    31b6:	a1 e0       	ldi	r26, 0x01	; 1
    31b8:	a6 bb       	out	0x16, r26	; 22
              wdt_reset();
    31ba:	a8 95       	wdr
    31bc:	01 96       	adiw	r24, 0x01	; 1
              timeconstant.w[1]++;		// count one OV
              if(timeconstant.w[1] == (F_CPU/100000UL)) {
    31be:	80 35       	cpi	r24, 0x50	; 80
    31c0:	91 05       	cpc	r25, r1
    31c2:	91 f7       	brne	.-28     	; 0x31a8 <ReadInductance+0x186>
    31c4:	00 e5       	ldi	r16, 0x50	; 80
    31c6:	10 e0       	ldi	r17, 0x00	; 0
                 break; 	//Timeout for Charging, above 0.13 s
              }
           }
        }
        TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    31c8:	10 92 81 00 	sts	0x0081, r1
        TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    31cc:	b0 e2       	ldi	r27, 0x20	; 32
    31ce:	b6 bb       	out	0x16, r27	; 22
        timeconstant.w[0] = ICR1;		// get previous Input Capture Counter flag
    31d0:	20 91 86 00 	lds	r18, 0x0086
    31d4:	30 91 87 00 	lds	r19, 0x0087
    31d8:	79 01       	movw	r14, r18
      // check actual counter, if an additional overflow must be added
        if((TCNT1 > timeconstant.w[0]) && (ii & (1<<TOV1))) {
    31da:	80 91 84 00 	lds	r24, 0x0084
    31de:	90 91 85 00 	lds	r25, 0x0085
    31e2:	28 17       	cp	r18, r24
    31e4:	39 07       	cpc	r19, r25
    31e6:	30 f4       	brcc	.+12     	; 0x31f4 <ReadInductance+0x1d2>
    31e8:	40 ff       	sbrs	r20, 0
    31ea:	04 c0       	rjmp	.+8      	; 0x31f4 <ReadInductance+0x1d2>
           // this OV was not counted, but was before the Input Capture
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    31ec:	21 e0       	ldi	r18, 0x01	; 1
    31ee:	26 bb       	out	0x16, r18	; 22
           timeconstant.w[1]++;			// count one additional OV
    31f0:	0f 5f       	subi	r16, 0xFF	; 255
    31f2:	1f 4f       	sbci	r17, 0xFF	; 255
        }

        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    31f4:	88 e0       	ldi	r24, 0x08	; 8
    31f6:	88 b9       	out	0x08, r24	; 8
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    31f8:	96 e9       	ldi	r25, 0x96	; 150
    31fa:	90 93 7a 00 	sts	0x007A, r25
        for (ii=0;ii<20;ii++) {
    31fe:	20 e0       	ldi	r18, 0x00	; 0
            // wait for current is near zero
            umax = W10msReadADC(LowPin);
    3200:	88 2d       	mov	r24, r8
    3202:	28 8f       	std	Y+24, r18	; 0x18
    3204:	0e 94 9a 1a 	call	0x3534	; 0x3534 <W10msReadADC>
    3208:	6c 01       	movw	r12, r24
            total_r =  ReadADC(HighPin);
    320a:	84 2d       	mov	r24, r4
    320c:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
            if ((umax < 2) && (total_r < 2)) break;	// low current detected
    3210:	28 8d       	ldd	r18, Y+24	; 0x18
    3212:	a2 e0       	ldi	r26, 0x02	; 2
    3214:	ca 16       	cp	r12, r26
    3216:	d1 04       	cpc	r13, r1
    3218:	18 f4       	brcc	.+6      	; 0x3220 <ReadInductance+0x1fe>
    321a:	82 30       	cpi	r24, 0x02	; 2
    321c:	91 05       	cpc	r25, r1
    321e:	18 f0       	brcs	.+6      	; 0x3226 <ReadInductance+0x204>
           timeconstant.w[1]++;			// count one additional OV
        }

        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
        for (ii=0;ii<20;ii++) {
    3220:	2f 5f       	subi	r18, 0xFF	; 255
    3222:	24 31       	cpi	r18, 0x14	; 20
    3224:	69 f7       	brne	.-38     	; 0x3200 <ReadInductance+0x1de>
//  #undef CNT_ZERO_42
//  #undef CNT_ZERO_720
//  #define CNT_ZERO_42 7
//  #define CNT_ZERO_720 10
//#endif
        total_r = (mess_r + resis[found].rx + RRpinMI);
    3226:	c0 90 18 01 	lds	r12, 0x0118
    322a:	d0 90 19 01 	lds	r13, 0x0119
    322e:	80 91 47 01 	lds	r24, 0x0147
    3232:	90 91 48 01 	lds	r25, 0x0148
    3236:	c8 0e       	add	r12, r24
    3238:	d9 1e       	adc	r13, r25
    323a:	ca 0c       	add	r12, r10
    323c:	db 1c       	adc	r13, r11
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
        // Voltage of comparator in % of umax
     #ifdef AUTO_CAL
        tmpint = (ref_mv + (int16_t)eeprom_read_word((uint16_t *)(&ref_offset))) ;
    323e:	87 ec       	ldi	r24, 0xC7	; 199
    3240:	91 e0       	ldi	r25, 0x01	; 1
    3242:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <__eerd_word_m168>
    3246:	20 91 44 01 	lds	r18, 0x0144
    324a:	30 91 45 01 	lds	r19, 0x0145
    324e:	28 0f       	add	r18, r24
    3250:	39 1f       	adc	r19, r25
     #else
        tmpint = (ref_mv + REF_C_KORR);
     #endif
        if (mess_r < R_L_VAL) {
    3252:	b0 e9       	ldi	r27, 0x90	; 144
    3254:	ab 16       	cp	r10, r27
    3256:	ba e1       	ldi	r27, 0x1A	; 26
    3258:	bb 06       	cpc	r11, r27
    325a:	b8 f4       	brcc	.+46     	; 0x328a <ReadInductance+0x268>
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
           if (timeconstant.dw < 225) {
    325c:	81 ee       	ldi	r24, 0xE1	; 225
    325e:	e8 16       	cp	r14, r24
    3260:	f1 04       	cpc	r15, r1
    3262:	01 05       	cpc	r16, r1
    3264:	11 05       	cpc	r17, r1
    3266:	38 f4       	brcc	.+14     	; 0x3276 <ReadInductance+0x254>
              ukorr = (timeconstant.w[0] / 5) - 20;
    3268:	c7 01       	movw	r24, r14
    326a:	65 e0       	ldi	r22, 0x05	; 5
    326c:	70 e0       	ldi	r23, 0x00	; 0
    326e:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
    3272:	64 51       	subi	r22, 0x14	; 20
    3274:	01 c0       	rjmp	.+2      	; 0x3278 <ReadInductance+0x256>
           } else {
              ukorr = 25;
    3276:	69 e1       	ldi	r22, 0x19	; 25
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
    3278:	28 52       	subi	r18, 0x28	; 40
    327a:	30 40       	sbci	r19, 0x00	; 0
    327c:	77 27       	eor	r23, r23
    327e:	67 fd       	sbrc	r22, 7
    3280:	70 95       	com	r23
    3282:	26 1b       	sub	r18, r22
    3284:	37 0b       	sbc	r19, r23
     #else
        tmpint = (ref_mv + REF_C_KORR);
     #endif
        if (mess_r < R_L_VAL) {
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
    3286:	66 e0       	ldi	r22, 0x06	; 6
    3288:	08 c0       	rjmp	.+16     	; 0x329a <ReadInductance+0x278>
//#endif
        total_r = (mess_r + resis[found].rx + RRpinMI);
//        cnt_diff = 0;
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
    328a:	c6 01       	movw	r24, r12
    328c:	60 eb       	ldi	r22, 0xB0	; 176
    328e:	76 e3       	ldi	r23, 0x36	; 54
    3290:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
        } else {
           // measurement with 680 Ohm resistor
           // if 680 Ohm resistor is used, use REF_L_KORR for correction
           cnt_diff += CNT_ZERO_720;
    3294:	69 5f       	subi	r22, 0xF9	; 249
           tmpint += REF_L_KORR;
    3296:	28 5d       	subi	r18, 0xD8	; 216
    3298:	3f 4f       	sbci	r19, 0xFF	; 255
        }
        if (timeconstant.dw > cnt_diff) timeconstant.dw -= cnt_diff;
    329a:	70 e0       	ldi	r23, 0x00	; 0
    329c:	80 e0       	ldi	r24, 0x00	; 0
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	6e 15       	cp	r22, r14
    32a2:	7f 05       	cpc	r23, r15
    32a4:	80 07       	cpc	r24, r16
    32a6:	91 07       	cpc	r25, r17
    32a8:	28 f4       	brcc	.+10     	; 0x32b4 <ReadInductance+0x292>
    32aa:	e6 1a       	sub	r14, r22
    32ac:	f7 0a       	sbc	r15, r23
    32ae:	08 0b       	sbc	r16, r24
    32b0:	19 0b       	sbc	r17, r25
    32b2:	03 c0       	rjmp	.+6      	; 0x32ba <ReadInductance+0x298>
        else          timeconstant.dw = 0;
    32b4:	ee 24       	eor	r14, r14
    32b6:	ff 24       	eor	r15, r15
    32b8:	87 01       	movw	r16, r14
       
        if ((count&0x01) == 1) {
    32ba:	a9 89       	ldd	r26, Y+17	; 0x11
    32bc:	ba 89       	ldd	r27, Y+18	; 0x12
    32be:	10 97       	sbiw	r26, 0x00	; 0
    32c0:	41 f0       	breq	.+16     	; 0x32d2 <ReadInductance+0x2b0>
           // second pass with delayed counter start
           timeconstant.dw += (3 * (F_CPU/1000000UL))+10;
    32c2:	82 e2       	ldi	r24, 0x22	; 34
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	a0 e0       	ldi	r26, 0x00	; 0
    32c8:	b0 e0       	ldi	r27, 0x00	; 0
    32ca:	e8 0e       	add	r14, r24
    32cc:	f9 1e       	adc	r15, r25
    32ce:	0a 1f       	adc	r16, r26
    32d0:	1b 1f       	adc	r17, r27
        }
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
    32d2:	00 35       	cpi	r16, 0x50	; 80
    32d4:	11 05       	cpc	r17, r1
    32d6:	18 f0       	brcs	.+6      	; 0x32de <ReadInductance+0x2bc>
    32d8:	ee 24       	eor	r14, r14
    32da:	ff 24       	eor	r15, r15
    32dc:	87 01       	movw	r16, r14
        if (timeconstant.dw > 10) {
    32de:	9b e0       	ldi	r25, 0x0B	; 11
    32e0:	e9 16       	cp	r14, r25
    32e2:	f1 04       	cpc	r15, r1
    32e4:	01 05       	cpc	r16, r1
    32e6:	11 05       	cpc	r17, r1
    32e8:	28 f0       	brcs	.+10     	; 0x32f4 <ReadInductance+0x2d2>
           timeconstant.dw -= 1;
    32ea:	08 94       	sec
    32ec:	e1 08       	sbc	r14, r1
    32ee:	f1 08       	sbc	r15, r1
    32f0:	01 09       	sbc	r16, r1
    32f2:	11 09       	sbc	r17, r1
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    32f4:	c6 01       	movw	r24, r12
    32f6:	a0 e0       	ldi	r26, 0x00	; 0
    32f8:	b0 e0       	ldi	r27, 0x00	; 0
    32fa:	8b 8b       	std	Y+19, r24	; 0x13
    32fc:	9c 8b       	std	Y+20, r25	; 0x14
    32fe:	ad 8b       	std	Y+21, r26	; 0x15
    3300:	be 8b       	std	Y+22, r27	; 0x16
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    3302:	b9 01       	movw	r22, r18
    3304:	80 e0       	ldi	r24, 0x00	; 0
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	28 ee       	ldi	r18, 0xE8	; 232
    330a:	33 e0       	ldi	r19, 0x03	; 3
    330c:	40 e0       	ldi	r20, 0x00	; 0
    330e:	50 e0       	ldi	r21, 0x00	; 0
    3310:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
    3314:	2b 01       	movw	r4, r22
    3316:	3c 01       	movw	r6, r24
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
        if (timeconstant.dw > 10) {
           timeconstant.dw -= 1;
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    3318:	b5 01       	movw	r22, r10
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	20 91 40 01 	lds	r18, 0x0140
    3322:	30 91 41 01 	lds	r19, 0x0141
    3326:	40 e0       	ldi	r20, 0x00	; 0
    3328:	50 e0       	ldi	r21, 0x00	; 0
    332a:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
    332e:	2b 89       	ldd	r18, Y+19	; 0x13
    3330:	3c 89       	ldd	r19, Y+20	; 0x14
    3332:	4d 89       	ldd	r20, Y+21	; 0x15
    3334:	5e 89       	ldd	r21, Y+22	; 0x16
    3336:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    333a:	40 e0       	ldi	r20, 0x00	; 0
    333c:	50 e0       	ldi	r21, 0x00	; 0
    333e:	c3 01       	movw	r24, r6
    3340:	b2 01       	movw	r22, r4
    3342:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
//        per_ref2 = (uint8_t)MEM2_read_byte(&LogTab[per_ref1]);	// -log(1 - per_ref1/100)
        per_ref2 = get_log(per_ref1);		// -log(1 - per_ref1/1000)
    3346:	c9 01       	movw	r24, r18
    3348:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <get_log>
    334c:	6c 01       	movw	r12, r24
          }
#endif
/* ********************************************************* */
        // lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    334e:	6b 89       	ldd	r22, Y+19	; 0x13
    3350:	7c 89       	ldd	r23, Y+20	; 0x14
    3352:	8d 89       	ldd	r24, Y+21	; 0x15
    3354:	9e 89       	ldd	r25, Y+22	; 0x16
    3356:	a8 01       	movw	r20, r16
    3358:	97 01       	movw	r18, r14
    335a:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
    335e:	2b 01       	movw	r4, r22
    3360:	3c 01       	movw	r6, r24
             wait_about2s();
          }
#endif
/* ********************************************************* */
        // lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
    3362:	b6 01       	movw	r22, r12
    3364:	80 e0       	ldi	r24, 0x00	; 0
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	e3 e0       	ldi	r30, 0x03	; 3
    336a:	66 0f       	add	r22, r22
    336c:	77 1f       	adc	r23, r23
    336e:	88 1f       	adc	r24, r24
    3370:	99 1f       	adc	r25, r25
    3372:	ea 95       	dec	r30
    3374:	d1 f7       	brne	.-12     	; 0x336a <ReadInductance+0x348>
    3376:	6b 5f       	subi	r22, 0xFB	; 251
    3378:	7f 4f       	sbci	r23, 0xFF	; 255
    337a:	8f 4f       	sbci	r24, 0xFF	; 255
    337c:	9f 4f       	sbci	r25, 0xFF	; 255
    337e:	2a e0       	ldi	r18, 0x0A	; 10
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	40 e0       	ldi	r20, 0x00	; 0
    3384:	50 e0       	ldi	r21, 0x00	; 0
    3386:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    338a:	40 e0       	ldi	r20, 0x00	; 0
    338c:	50 e0       	ldi	r21, 0x00	; 0
    338e:	c3 01       	movw	r24, r6
    3390:	b2 01       	movw	r22, r4
    3392:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
    3396:	f1 01       	movw	r30, r2
    3398:	ee 0f       	add	r30, r30
    339a:	ff 1f       	adc	r31, r31
    339c:	ee 0f       	add	r30, r30
    339e:	ff 1f       	adc	r31, r31
    33a0:	a1 e0       	ldi	r26, 0x01	; 1
    33a2:	b0 e0       	ldi	r27, 0x00	; 0
    33a4:	ac 0f       	add	r26, r28
    33a6:	bd 1f       	adc	r27, r29
    33a8:	ea 0f       	add	r30, r26
    33aa:	fb 1f       	adc	r31, r27
    33ac:	20 83       	st	Z, r18
    33ae:	31 83       	std	Z+1, r19	; 0x01
    33b0:	42 83       	std	Z+2, r20	; 0x02
    33b2:	53 83       	std	Z+3, r21	; 0x03
        if (((count&0x01) == 0) && (timeconstant.dw > ((F_CPU/1000000UL)+3))) {
    33b4:	89 89       	ldd	r24, Y+17	; 0x11
    33b6:	9a 89       	ldd	r25, Y+18	; 0x12
    33b8:	00 97       	sbiw	r24, 0x00	; 0
    33ba:	99 f4       	brne	.+38     	; 0x33e2 <ReadInductance+0x3c0>
    33bc:	9c e0       	ldi	r25, 0x0C	; 12
    33be:	e9 16       	cp	r14, r25
    33c0:	f1 04       	cpc	r15, r1
    33c2:	01 05       	cpc	r16, r1
    33c4:	11 05       	cpc	r17, r1
    33c6:	68 f0       	brcs	.+26     	; 0x33e2 <ReadInductance+0x3c0>
           // transition is found, measurement with delayed counter start is not necessary
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
    33c8:	f1 01       	movw	r30, r2
    33ca:	31 96       	adiw	r30, 0x01	; 1
    33cc:	ee 0f       	add	r30, r30
    33ce:	ff 1f       	adc	r31, r31
    33d0:	ee 0f       	add	r30, r30
    33d2:	ff 1f       	adc	r31, r31
    33d4:	ea 0f       	add	r30, r26
    33d6:	fb 1f       	adc	r31, r27
    33d8:	20 83       	st	Z, r18
    33da:	31 83       	std	Z+1, r19	; 0x01
    33dc:	42 83       	std	Z+2, r20	; 0x02
    33de:	53 83       	std	Z+3, r21	; 0x03
           count++;		// skip the delayed measurement
    33e0:	93 94       	inc	r9
        }
        wdt_reset();
    33e2:	a8 95       	wdr
//  for (found=0;found<ResistorsFound;found++) {
//     if (resis[found].rx > 21000) continue;
     if (resis[found].rx > 21000) return;

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
    33e4:	93 94       	inc	r9
    33e6:	a9 2d       	mov	r26, r9
    33e8:	a4 30       	cpi	r26, 0x04	; 4
    33ea:	08 f4       	brcc	.+2      	; 0x33ee <ReadInductance+0x3cc>
    33ec:	50 ce       	rjmp	.-864    	; 0x308e <ReadInductance+0x6c>
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
           count++;		// skip the delayed measurement
        }
        wdt_reset();
     }  //end for count
     ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    33ee:	88 e0       	ldi	r24, 0x08	; 8
    33f0:	88 b9       	out	0x08, r24	; 8
     wait_about20ms();
    33f2:	84 e0       	ldi	r24, 0x04	; 4
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
        resis[found].lx = inductance[0];
     }
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];		// other polarity, delayed start
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
#else
     nr_pol1 = 0;
    33fa:	61 e0       	ldi	r22, 0x01	; 1
    33fc:	2d 81       	ldd	r18, Y+5	; 0x05
    33fe:	3e 81       	ldd	r19, Y+6	; 0x06
    3400:	4f 81       	ldd	r20, Y+7	; 0x07
    3402:	58 85       	ldd	r21, Y+8	; 0x08
    3404:	89 81       	ldd	r24, Y+1	; 0x01
    3406:	9a 81       	ldd	r25, Y+2	; 0x02
    3408:	ab 81       	ldd	r26, Y+3	; 0x03
    340a:	bc 81       	ldd	r27, Y+4	; 0x04
    340c:	82 17       	cp	r24, r18
    340e:	93 07       	cpc	r25, r19
    3410:	a4 07       	cpc	r26, r20
    3412:	b5 07       	cpc	r27, r21
    3414:	08 f0       	brcs	.+2      	; 0x3418 <ReadInductance+0x3f6>
    3416:	60 e0       	ldi	r22, 0x00	; 0
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
     nr_pol2 = 2;
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    3418:	2d 85       	ldd	r18, Y+13	; 0x0d
    341a:	3e 85       	ldd	r19, Y+14	; 0x0e
    341c:	4f 85       	ldd	r20, Y+15	; 0x0f
    341e:	58 89       	ldd	r21, Y+16	; 0x10
    3420:	89 85       	ldd	r24, Y+9	; 0x09
    3422:	9a 85       	ldd	r25, Y+10	; 0x0a
    3424:	ab 85       	ldd	r26, Y+11	; 0x0b
    3426:	bc 85       	ldd	r27, Y+12	; 0x0c
    3428:	82 17       	cp	r24, r18
    342a:	93 07       	cpc	r25, r19
    342c:	a4 07       	cpc	r26, r20
    342e:	b5 07       	cpc	r27, r21
    3430:	10 f0       	brcs	.+4      	; 0x3436 <ReadInductance+0x414>
     if (inductance[3] > inductance[2]) inductance[2] = inductance[3];		// other polarity, delayed start
     if (inductance[2] < resis[found].lx) resis[found].lx = inductance[2];	// use the other polarity
#else
     nr_pol1 = 0;
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
     nr_pol2 = 2;
    3432:	72 e0       	ldi	r23, 0x02	; 2
    3434:	01 c0       	rjmp	.+2      	; 0x3438 <ReadInductance+0x416>
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    3436:	73 e0       	ldi	r23, 0x03	; 3
     if (inductance[nr_pol2] < inductance[nr_pol1]) nr_pol1 = nr_pol2;
    3438:	a7 2f       	mov	r26, r23
    343a:	b0 e0       	ldi	r27, 0x00	; 0
    343c:	aa 0f       	add	r26, r26
    343e:	bb 1f       	adc	r27, r27
    3440:	aa 0f       	add	r26, r26
    3442:	bb 1f       	adc	r27, r27
    3444:	ce 01       	movw	r24, r28
    3446:	01 96       	adiw	r24, 0x01	; 1
    3448:	a8 0f       	add	r26, r24
    344a:	b9 1f       	adc	r27, r25
    344c:	e6 2f       	mov	r30, r22
    344e:	f0 e0       	ldi	r31, 0x00	; 0
    3450:	ee 0f       	add	r30, r30
    3452:	ff 1f       	adc	r31, r31
    3454:	ee 0f       	add	r30, r30
    3456:	ff 1f       	adc	r31, r31
    3458:	e8 0f       	add	r30, r24
    345a:	f9 1f       	adc	r31, r25
    345c:	2d 91       	ld	r18, X+
    345e:	3d 91       	ld	r19, X+
    3460:	4d 91       	ld	r20, X+
    3462:	5c 91       	ld	r21, X
    3464:	80 81       	ld	r24, Z
    3466:	91 81       	ldd	r25, Z+1	; 0x01
    3468:	a2 81       	ldd	r26, Z+2	; 0x02
    346a:	b3 81       	ldd	r27, Z+3	; 0x03
    346c:	28 17       	cp	r18, r24
    346e:	39 07       	cpc	r19, r25
    3470:	4a 07       	cpc	r20, r26
    3472:	5b 07       	cpc	r21, r27
    3474:	08 f4       	brcc	.+2      	; 0x3478 <ReadInductance+0x456>
    3476:	67 2f       	mov	r22, r23
     resis[found].lx = inductance[nr_pol1];
    3478:	26 2f       	mov	r18, r22
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	f9 01       	movw	r30, r18
    347e:	ee 0f       	add	r30, r30
    3480:	ff 1f       	adc	r31, r31
    3482:	ee 0f       	add	r30, r30
    3484:	ff 1f       	adc	r31, r31
    3486:	ec 0f       	add	r30, r28
    3488:	fd 1f       	adc	r31, r29
    348a:	61 81       	ldd	r22, Z+1	; 0x01
    348c:	72 81       	ldd	r23, Z+2	; 0x02
    348e:	83 81       	ldd	r24, Z+3	; 0x03
    3490:	94 81       	ldd	r25, Z+4	; 0x04
    3492:	60 93 1c 01 	sts	0x011C, r22
    3496:	70 93 1d 01 	sts	0x011D, r23
    349a:	80 93 1e 01 	sts	0x011E, r24
    349e:	90 93 1f 01 	sts	0x011F, r25
     resis[found].lpre = -5;	// 10 uH units
    34a2:	4b ef       	ldi	r20, 0xFB	; 251
    34a4:	40 93 20 01 	sts	0x0120, r20
     if (((nr_pol1 & 1) == 1) || (resis[found].rx >= 240)) {
    34a8:	20 fd       	sbrc	r18, 0
    34aa:	0d c0       	rjmp	.+26     	; 0x34c6 <ReadInductance+0x4a4>
    34ac:	20 91 18 01 	lds	r18, 0x0118
    34b0:	30 91 19 01 	lds	r19, 0x0119
    34b4:	40 91 1a 01 	lds	r20, 0x011A
    34b8:	50 91 1b 01 	lds	r21, 0x011B
    34bc:	20 3f       	cpi	r18, 0xF0	; 240
    34be:	31 05       	cpc	r19, r1
    34c0:	41 05       	cpc	r20, r1
    34c2:	51 05       	cpc	r21, r1
    34c4:	a8 f0       	brcs	.+42     	; 0x34f0 <ReadInductance+0x4ce>
        // with 680 Ohm resistor total_r is more than 7460
        resis[found].lpre = -4;	// 100 uH units
    34c6:	2c ef       	ldi	r18, 0xFC	; 252
    34c8:	20 93 20 01 	sts	0x0120, r18
        resis[found].lx = (resis[found].lx + 5) / 10;
    34cc:	6b 5f       	subi	r22, 0xFB	; 251
    34ce:	7f 4f       	sbci	r23, 0xFF	; 255
    34d0:	8f 4f       	sbci	r24, 0xFF	; 255
    34d2:	9f 4f       	sbci	r25, 0xFF	; 255
    34d4:	2a e0       	ldi	r18, 0x0A	; 10
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	40 e0       	ldi	r20, 0x00	; 0
    34da:	50 e0       	ldi	r21, 0x00	; 0
    34dc:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
    34e0:	20 93 1c 01 	sts	0x011C, r18
    34e4:	30 93 1d 01 	sts	0x011D, r19
    34e8:	40 93 1e 01 	sts	0x011E, r20
    34ec:	50 93 1f 01 	sts	0x011F, r21
     } 
#endif
//  } // end loop for all resistors

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    34f0:	88 e0       	ldi	r24, 0x08	; 8
    34f2:	87 b9       	out	0x07, r24	; 7
  R_DDR = 0;			// switch all resistor ports to input
    34f4:	14 b8       	out	0x04, r1	; 4
#endif
  return;
 } // end ReadInductance()
    34f6:	68 96       	adiw	r28, 0x18	; 24
    34f8:	0f b6       	in	r0, 0x3f	; 63
    34fa:	f8 94       	cli
    34fc:	de bf       	out	0x3e, r29	; 62
    34fe:	0f be       	out	0x3f, r0	; 63
    3500:	cd bf       	out	0x3d, r28	; 61
    3502:	cf 91       	pop	r28
    3504:	df 91       	pop	r29
    3506:	1f 91       	pop	r17
    3508:	0f 91       	pop	r16
    350a:	ff 90       	pop	r15
    350c:	ef 90       	pop	r14
    350e:	df 90       	pop	r13
    3510:	cf 90       	pop	r12
    3512:	bf 90       	pop	r11
    3514:	af 90       	pop	r10
    3516:	9f 90       	pop	r9
    3518:	8f 90       	pop	r8
    351a:	7f 90       	pop	r7
    351c:	6f 90       	pop	r6
    351e:	5f 90       	pop	r5
    3520:	4f 90       	pop	r4
    3522:	3f 90       	pop	r3
    3524:	2f 90       	pop	r2
    3526:	08 95       	ret

00003528 <W20msReadADC>:
    3528:	8f 93       	push	r24
    352a:	84 e0       	ldi	r24, 0x04	; 4
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
    3532:	0b c0       	rjmp	.+22     	; 0x354a <to_read>

00003534 <W10msReadADC>:
    3534:	8f 93       	push	r24
    3536:	82 e0       	ldi	r24, 0x02	; 2
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>
    353e:	05 c0       	rjmp	.+10     	; 0x354a <to_read>

00003540 <W5msReadADC>:
    3540:	8f 93       	push	r24
    3542:	81 e0       	ldi	r24, 0x01	; 1
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	0e 94 b5 03 	call	0x76a	; 0x76a <sleep_5ms>

0000354a <to_read>:
    354a:	8f 91       	pop	r24

0000354c <ReadADC>:
    354c:	1f 93       	push	r17
    354e:	18 2f       	mov	r17, r24
    3550:	10 64       	ori	r17, 0x40	; 64

00003552 <get_sample>:
    3552:	10 93 7c 00 	sts	0x007C, r17
    3556:	e1 2f       	mov	r30, r17
    3558:	e0 78       	andi	r30, 0x80	; 128
    355a:	80 91 3d 01 	lds	r24, 0x013D
    355e:	e8 17       	cp	r30, r24
    3560:	61 f0       	breq	.+24     	; 0x357a <r2aa2>
    3562:	0e 94 51 14 	call	0x28a2	; 0x28a2 <wait100us>
    3566:	8e e9       	ldi	r24, 0x9E	; 158
    3568:	80 93 7a 00 	sts	0x007A, r24
    356c:	83 e0       	ldi	r24, 0x03	; 3
    356e:	83 bf       	out	0x33, r24	; 51
    3570:	88 95       	sleep
    3572:	82 e0       	ldi	r24, 0x02	; 2
    3574:	83 bf       	out	0x33, r24	; 51
    3576:	e0 93 3d 01 	sts	0x013D, r30

0000357a <r2aa2>:
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	a9 01       	movw	r20, r18
    3580:	e0 e0       	ldi	r30, 0x00	; 0
    3582:	1f c0       	rjmp	.+62     	; 0x35c2 <r2ae8>

00003584 <Loop>:
    3584:	8e e9       	ldi	r24, 0x9E	; 158
    3586:	80 93 7a 00 	sts	0x007A, r24
    358a:	83 e0       	ldi	r24, 0x03	; 3
    358c:	83 bf       	out	0x33, r24	; 51
    358e:	88 95       	sleep
    3590:	82 e0       	ldi	r24, 0x02	; 2
    3592:	83 bf       	out	0x33, r24	; 51
    3594:	60 91 78 00 	lds	r22, 0x0078
    3598:	70 91 79 00 	lds	r23, 0x0079
    359c:	26 0f       	add	r18, r22
    359e:	37 1f       	adc	r19, r23
    35a0:	41 1d       	adc	r20, r1
    35a2:	51 1d       	adc	r21, r1
    35a4:	e4 30       	cpi	r30, 0x04	; 4
    35a6:	61 f4       	brne	.+24     	; 0x35c0 <r2ae6>
    35a8:	80 91 3f 01 	lds	r24, 0x013F
    35ac:	80 30       	cpi	r24, 0x00	; 0
    35ae:	41 f0       	breq	.+16     	; 0x35c0 <r2ae6>
    35b0:	84 e0       	ldi	r24, 0x04	; 4
    35b2:	20 30       	cpi	r18, 0x00	; 0
    35b4:	38 07       	cpc	r19, r24
    35b6:	20 f4       	brcc	.+8      	; 0x35c0 <r2ae6>
    35b8:	17 fd       	sbrc	r17, 7
    35ba:	02 c0       	rjmp	.+4      	; 0x35c0 <r2ae6>
    35bc:	10 68       	ori	r17, 0x80	; 128
    35be:	c9 cf       	rjmp	.-110    	; 0x3552 <get_sample>

000035c0 <r2ae6>:
    35c0:	ef 5f       	subi	r30, 0xFF	; 255

000035c2 <r2ae8>:
    35c2:	80 91 3c 01 	lds	r24, 0x013C
    35c6:	e8 17       	cp	r30, r24
    35c8:	e8 f2       	brcs	.-70     	; 0x3584 <Loop>
    35ca:	17 ff       	sbrs	r17, 7
    35cc:	05 c0       	rjmp	.+10     	; 0x35d8 <r2afe>
    35ce:	60 91 3e 01 	lds	r22, 0x013E
    35d2:	70 91 3f 01 	lds	r23, 0x013F
    35d6:	04 c0       	rjmp	.+8      	; 0x35e0 <r2b02>

000035d8 <r2afe>:
    35d8:	60 91 40 01 	lds	r22, 0x0140
    35dc:	70 91 41 01 	lds	r23, 0x0141

000035e0 <r2b02>:
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
    35e8:	2f ef       	ldi	r18, 0xFF	; 255
    35ea:	33 e0       	ldi	r19, 0x03	; 3
    35ec:	40 e0       	ldi	r20, 0x00	; 0
    35ee:	50 e0       	ldi	r21, 0x00	; 0
    35f0:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
    35f4:	b9 01       	movw	r22, r18
    35f6:	ca 01       	movw	r24, r20
    35f8:	20 91 3c 01 	lds	r18, 0x013C
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	40 e0       	ldi	r20, 0x00	; 0
    3600:	50 e0       	ldi	r21, 0x00	; 0
    3602:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
    3606:	c9 01       	movw	r24, r18
    3608:	1f 91       	pop	r17
    360a:	08 95       	ret

0000360c <GetESR>:
    360c:	2f 92       	push	r2
    360e:	3f 92       	push	r3
    3610:	4f 92       	push	r4
    3612:	5f 92       	push	r5
    3614:	6f 92       	push	r6
    3616:	7f 92       	push	r7
    3618:	8f 92       	push	r8
    361a:	9f 92       	push	r9
    361c:	af 92       	push	r10
    361e:	bf 92       	push	r11
    3620:	cf 92       	push	r12
    3622:	df 92       	push	r13
    3624:	ef 92       	push	r14
    3626:	ff 92       	push	r15
    3628:	0f 93       	push	r16
    362a:	1f 93       	push	r17
    362c:	df 93       	push	r29
    362e:	cf 93       	push	r28
    3630:	cd b7       	in	r28, 0x3d	; 61
    3632:	de b7       	in	r29, 0x3e	; 62
    3634:	6e 97       	sbiw	r28, 0x1e	; 30
    3636:	0f b6       	in	r0, 0x3f	; 63
    3638:	f8 94       	cli
    363a:	de bf       	out	0x3e, r29	; 62
    363c:	0f be       	out	0x3f, r0	; 63
    363e:	cd bf       	out	0x3d, r28	; 61
    3640:	66 2e       	mov	r6, r22
    3642:	b8 2e       	mov	r11, r24
    3644:	86 0f       	add	r24, r22
    3646:	89 83       	std	Y+1, r24	; 0x01
    3648:	20 91 07 01 	lds	r18, 0x0107
    364c:	27 30       	cpi	r18, 0x07	; 7
    364e:	19 f5       	brne	.+70     	; 0x3696 <ad_35e4>
    3650:	20 91 66 01 	lds	r18, 0x0166
    3654:	30 91 67 01 	lds	r19, 0x0167
    3658:	40 91 68 01 	lds	r20, 0x0168
    365c:	50 91 69 01 	lds	r21, 0x0169
    3660:	10 91 75 01 	lds	r17, 0x0175
    3664:	09 c0       	rjmp	.+18     	; 0x3678 <ad_35ba>

00003666 <ad_35ac>:
    3666:	ca 01       	movw	r24, r20
    3668:	b9 01       	movw	r22, r18
    366a:	2a e0       	ldi	r18, 0x0A	; 10
    366c:	31 2d       	mov	r19, r1
    366e:	41 2d       	mov	r20, r1
    3670:	51 2d       	mov	r21, r1
    3672:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
    3676:	1f 5f       	subi	r17, 0xFF	; 255

00003678 <ad_35ba>:
    3678:	17 3f       	cpi	r17, 0xF7	; 247
    367a:	ac f3       	brlt	.-22     	; 0x3666 <ad_35ac>
    367c:	2c 8b       	std	Y+20, r18	; 0x14
    367e:	3d 8b       	std	Y+21, r19	; 0x15
    3680:	4e 8b       	std	Y+22, r20	; 0x16
    3682:	5f 8b       	std	Y+23, r21	; 0x17
    3684:	24 3b       	cpi	r18, 0xB4	; 180
    3686:	60 e0       	ldi	r22, 0x00	; 0
    3688:	36 07       	cpc	r19, r22
    368a:	41 05       	cpc	r20, r1
    368c:	51 05       	cpc	r21, r1
    368e:	18 f4       	brcc	.+6      	; 0x3696 <ad_35e4>
    3690:	8f ef       	ldi	r24, 0xFF	; 255
    3692:	9f ef       	ldi	r25, 0xFF	; 255
    3694:	71 c1       	rjmp	.+738    	; 0x3978 <ad_exit>

00003696 <ad_35e4>:
    3696:	26 ed       	ldi	r18, 0xD6	; 214
    3698:	a2 2e       	mov	r10, r18
    369a:	02 c0       	rjmp	.+4      	; 0x36a0 <ad_3604>

0000369c <ad_35fe>:
    369c:	94 ed       	ldi	r25, 0xD4	; 212
    369e:	a9 2e       	mov	r10, r25

000036a0 <ad_3604>:
    36a0:	ed e0       	ldi	r30, 0x0D	; 13
    36a2:	f1 e0       	ldi	r31, 0x01	; 1
    36a4:	e6 0d       	add	r30, r6
    36a6:	f1 1d       	adc	r31, r1
    36a8:	85 91       	lpm	r24, Z+
    36aa:	88 60       	ori	r24, 0x08	; 8
    36ac:	8e 87       	std	Y+14, r24	; 0x0e
    36ae:	ed e0       	ldi	r30, 0x0D	; 13
    36b0:	f1 e0       	ldi	r31, 0x01	; 1
    36b2:	eb 0d       	add	r30, r11
    36b4:	f1 1d       	adc	r31, r1
    36b6:	85 91       	lpm	r24, Z+
    36b8:	88 60       	ori	r24, 0x08	; 8
    36ba:	8f 87       	std	Y+15, r24	; 0x0f
    36bc:	ea e0       	ldi	r30, 0x0A	; 10
    36be:	f1 e0       	ldi	r31, 0x01	; 1
    36c0:	e6 0d       	add	r30, r6
    36c2:	f1 1d       	adc	r31, r1
    36c4:	75 90       	lpm	r7, Z+
    36c6:	ea e0       	ldi	r30, 0x0A	; 10
    36c8:	f1 e0       	ldi	r31, 0x01	; 1
    36ca:	eb 0d       	add	r30, r11
    36cc:	f1 1d       	adc	r31, r1
    36ce:	c5 90       	lpm	r12, Z+
    36d0:	90 ec       	ldi	r25, 0xC0	; 192
    36d2:	69 2a       	or	r6, r25
    36d4:	b9 2a       	or	r11, r25
    36d6:	81 e0       	ldi	r24, 0x01	; 1
    36d8:	e8 2e       	mov	r14, r24
    36da:	f1 2c       	mov	r15, r1
    36dc:	01 2d       	mov	r16, r1
    36de:	11 2d       	mov	r17, r1
    36e0:	8e 83       	std	Y+6, r24	; 0x06
    36e2:	1f 82       	std	Y+7, r1	; 0x07
    36e4:	18 86       	std	Y+8, r1	; 0x08
    36e6:	19 86       	std	Y+9, r1	; 0x09
    36e8:	1a 86       	std	Y+10, r1	; 0x0a
    36ea:	1b 86       	std	Y+11, r1	; 0x0b
    36ec:	1c 86       	std	Y+12, r1	; 0x0c
    36ee:	1d 86       	std	Y+13, r1	; 0x0d
    36f0:	18 8e       	std	Y+24, r1	; 0x18
    36f2:	19 8e       	std	Y+25, r1	; 0x19
    36f4:	0e 94 b2 01 	call	0x364	; 0x364 <EntladePins>
    36f8:	88 e0       	ldi	r24, 0x08	; 8
    36fa:	88 b9       	out	0x08, r24	; 8
    36fc:	60 92 7c 00 	sts	0x007C, r6
    3700:	0e 94 51 14 	call	0x28a2	; 0x28a2 <wait100us>
    3704:	3f 85       	ldd	r19, Y+15	; 0x0f
    3706:	37 b9       	out	0x07, r19	; 7
    3708:	75 b8       	out	0x05, r7	; 5
    370a:	74 b8       	out	0x04, r7	; 4
    370c:	0e 94 56 14 	call	0x28ac	; 0x28ac <wait10us>
    3710:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <wait2us>
    3714:	15 b8       	out	0x05, r1	; 5
    3716:	14 b8       	out	0x04, r1	; 4
    3718:	dd 24       	eor	r13, r13
    371a:	b4 ed       	ldi	r27, 0xD4	; 212
    371c:	9b 2e       	mov	r9, r27
    371e:	a6 ed       	ldi	r26, 0xD6	; 214
    3720:	8a 2e       	mov	r8, r26

00003722 <ad_3692>:
    3722:	3e 85       	ldd	r19, Y+14	; 0x0e
    3724:	37 b9       	out	0x07, r19	; 7
    3726:	75 b8       	out	0x05, r7	; 5
    3728:	74 b8       	out	0x04, r7	; 4
    372a:	60 92 7c 00 	sts	0x007C, r6
    372e:	a8 95       	wdr
    3730:	a0 92 7a 00 	sts	0x007A, r10
    3734:	80 91 7a 00 	lds	r24, 0x007A
    3738:	86 fd       	sbrc	r24, 6
    373a:	fc cf       	rjmp	.-8      	; 0x3734 <ad_3692+0x12>
    373c:	a0 92 7a 00 	sts	0x007A, r10
    3740:	80 91 7a 00 	lds	r24, 0x007A
    3744:	86 fd       	sbrc	r24, 6
    3746:	fc cf       	rjmp	.-8      	; 0x3740 <ad_3692+0x1e>
    3748:	20 90 78 00 	lds	r2, 0x0078
    374c:	30 90 79 00 	lds	r3, 0x0079
    3750:	b0 92 7c 00 	sts	0x007C, r11
    3754:	a0 92 7a 00 	sts	0x007A, r10
    3758:	80 91 7a 00 	lds	r24, 0x007A
    375c:	86 fd       	sbrc	r24, 6
    375e:	fc cf       	rjmp	.-8      	; 0x3758 <ad_3692+0x36>
    3760:	80 92 7a 00 	sts	0x007A, r8
    3764:	0e 94 57 14 	call	0x28ae	; 0x28ae <wait5us>
    3768:	c5 b8       	out	0x05, r12	; 5
    376a:	c4 b8       	out	0x04, r12	; 4
    376c:	0e 94 55 14 	call	0x28aa	; 0x28aa <wait20us>
    3770:	0e 94 57 14 	call	0x28ae	; 0x28ae <wait5us>
    3774:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <wait1us>
    3778:	8f 93       	push	r24
    377a:	8f 91       	pop	r24
    377c:	a8 95       	wdr
    377e:	a8 95       	wdr
    3780:	14 b8       	out	0x04, r1	; 4
    3782:	15 b8       	out	0x05, r1	; 5

00003784 <ad_370c>:
    3784:	80 91 7a 00 	lds	r24, 0x007A
    3788:	86 fd       	sbrc	r24, 6
    378a:	fc cf       	rjmp	.-8      	; 0x3784 <ad_370c>
    378c:	20 91 78 00 	lds	r18, 0x0078
    3790:	30 91 79 00 	lds	r19, 0x0079
    3794:	28 8b       	std	Y+16, r18	; 0x10
    3796:	39 8b       	std	Y+17, r19	; 0x11
    3798:	3f 85       	ldd	r19, Y+15	; 0x0f
    379a:	37 b9       	out	0x07, r19	; 7
    379c:	c5 b8       	out	0x05, r12	; 5
    379e:	c4 b8       	out	0x04, r12	; 4
    37a0:	a8 95       	wdr
    37a2:	b0 92 7c 00 	sts	0x007C, r11
    37a6:	a0 92 7a 00 	sts	0x007A, r10
    37aa:	80 91 7a 00 	lds	r24, 0x007A
    37ae:	86 fd       	sbrc	r24, 6
    37b0:	fc cf       	rjmp	.-8      	; 0x37aa <ad_370c+0x26>
    37b2:	a0 92 7a 00 	sts	0x007A, r10
    37b6:	80 91 7a 00 	lds	r24, 0x007A
    37ba:	86 fd       	sbrc	r24, 6
    37bc:	fc cf       	rjmp	.-8      	; 0x37b6 <ad_370c+0x32>
    37be:	60 91 78 00 	lds	r22, 0x0078
    37c2:	70 91 79 00 	lds	r23, 0x0079
    37c6:	60 92 7c 00 	sts	0x007C, r6
    37ca:	a0 92 7a 00 	sts	0x007A, r10
    37ce:	80 91 7a 00 	lds	r24, 0x007A
    37d2:	86 fd       	sbrc	r24, 6
    37d4:	fc cf       	rjmp	.-8      	; 0x37ce <ad_370c+0x4a>
    37d6:	80 92 7a 00 	sts	0x007A, r8
    37da:	0e 94 57 14 	call	0x28ae	; 0x28ae <wait5us>
    37de:	75 b8       	out	0x05, r7	; 5
    37e0:	74 b8       	out	0x04, r7	; 4
    37e2:	0e 94 55 14 	call	0x28aa	; 0x28aa <wait20us>
    37e6:	0e 94 57 14 	call	0x28ae	; 0x28ae <wait5us>
    37ea:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <wait1us>
    37ee:	8f 93       	push	r24
    37f0:	8f 91       	pop	r24
    37f2:	a8 95       	wdr
    37f4:	a8 95       	wdr
    37f6:	14 b8       	out	0x04, r1	; 4
    37f8:	15 b8       	out	0x05, r1	; 5

000037fa <ad_37f4>:
    37fa:	80 91 7a 00 	lds	r24, 0x007A
    37fe:	86 fd       	sbrc	r24, 6
    3800:	fc cf       	rjmp	.-8      	; 0x37fa <ad_37f4>
    3802:	40 91 78 00 	lds	r20, 0x0078
    3806:	50 91 79 00 	lds	r21, 0x0079
    380a:	14 b8       	out	0x04, r1	; 4
    380c:	cb 01       	movw	r24, r22
    380e:	82 0d       	add	r24, r2
    3810:	93 1d       	adc	r25, r3
    3812:	e8 0e       	add	r14, r24
    3814:	f9 1e       	adc	r15, r25
    3816:	01 1d       	adc	r16, r1
    3818:	11 1d       	adc	r17, r1
    381a:	ea 82       	std	Y+2, r14	; 0x02
    381c:	fb 82       	std	Y+3, r15	; 0x03
    381e:	0c 83       	std	Y+4, r16	; 0x04
    3820:	1d 83       	std	Y+5, r17	; 0x05
    3822:	88 89       	ldd	r24, Y+16	; 0x10
    3824:	99 89       	ldd	r25, Y+17	; 0x11
    3826:	84 0f       	add	r24, r20
    3828:	95 1f       	adc	r25, r21
    382a:	2e 81       	ldd	r18, Y+6	; 0x06
    382c:	3f 81       	ldd	r19, Y+7	; 0x07
    382e:	68 85       	ldd	r22, Y+8	; 0x08
    3830:	79 85       	ldd	r23, Y+9	; 0x09
    3832:	28 0f       	add	r18, r24
    3834:	39 1f       	adc	r19, r25
    3836:	61 1d       	adc	r22, r1
    3838:	71 1d       	adc	r23, r1
    383a:	2e 83       	std	Y+6, r18	; 0x06
    383c:	3f 83       	std	Y+7, r19	; 0x07
    383e:	68 87       	std	Y+8, r22	; 0x08
    3840:	79 87       	std	Y+9, r23	; 0x09
    3842:	24 e6       	ldi	r18, 0x64	; 100
    3844:	24 17       	cp	r18, r20
    3846:	15 06       	cpc	r1, r21
    3848:	50 f0       	brcs	.+20     	; 0x385e <is_ok1>
    384a:	75 b8       	out	0x05, r7	; 5
    384c:	74 b8       	out	0x04, r7	; 4
    384e:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <wait2us>
    3852:	14 b8       	out	0x04, r1	; 4
    3854:	15 b8       	out	0x05, r1	; 5
    3856:	88 8d       	ldd	r24, Y+24	; 0x18
    3858:	83 95       	inc	r24
    385a:	88 8f       	std	Y+24, r24	; 0x18
    385c:	07 c0       	rjmp	.+14     	; 0x386c <is_ok1b>

0000385e <is_ok1>:
    385e:	48 3e       	cpi	r20, 0xE8	; 232
    3860:	73 e0       	ldi	r23, 0x03	; 3
    3862:	57 07       	cpc	r21, r23
    3864:	18 f0       	brcs	.+6      	; 0x386c <is_ok1b>
    3866:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3868:	83 95       	inc	r24
    386a:	8a 8f       	std	Y+26, r24	; 0x1a

0000386c <is_ok1b>:
    386c:	88 89       	ldd	r24, Y+16	; 0x10
    386e:	99 89       	ldd	r25, Y+17	; 0x11
    3870:	28 17       	cp	r18, r24
    3872:	19 06       	cpc	r1, r25
    3874:	b0 f0       	brcs	.+44     	; 0x38a2 <is_ok2>
    3876:	3e 85       	ldd	r19, Y+14	; 0x0e
    3878:	37 b9       	out	0x07, r19	; 7
    387a:	c5 b8       	out	0x05, r12	; 5
    387c:	c4 b8       	out	0x04, r12	; 4
    387e:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <wait2us>
    3882:	0e 94 55 14 	call	0x28aa	; 0x28aa <wait20us>
    3886:	0e 94 57 14 	call	0x28ae	; 0x28ae <wait5us>
    388a:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <wait1us>
    388e:	8f 93       	push	r24
    3890:	8f 91       	pop	r24
    3892:	a8 95       	wdr
    3894:	a8 95       	wdr
    3896:	14 b8       	out	0x04, r1	; 4
    3898:	15 b8       	out	0x05, r1	; 5
    389a:	89 8d       	ldd	r24, Y+25	; 0x19
    389c:	83 95       	inc	r24
    389e:	89 8f       	std	Y+25, r24	; 0x19
    38a0:	07 c0       	rjmp	.+14     	; 0x38b0 <is_ok2b>

000038a2 <is_ok2>:
    38a2:	88 3e       	cpi	r24, 0xE8	; 232
    38a4:	73 e0       	ldi	r23, 0x03	; 3
    38a6:	97 07       	cpc	r25, r23
    38a8:	18 f0       	brcs	.+6      	; 0x38b0 <is_ok2b>
    38aa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    38ac:	83 95       	inc	r24
    38ae:	8a 8f       	std	Y+26, r24	; 0x1a

000038b0 <is_ok2b>:
    38b0:	d3 94       	inc	r13
    38b2:	5d 2d       	mov	r21, r13
    38b4:	5f 3f       	cpi	r21, 0xFF	; 255
    38b6:	09 f0       	breq	.+2      	; 0x38ba <ad_38ac>
    38b8:	34 cf       	rjmp	.-408    	; 0x3722 <ad_3692>

000038ba <ad_38ac>:
    38ba:	40 90 47 01 	lds	r4, 0x0147
    38be:	50 90 48 01 	lds	r5, 0x0148
    38c2:	44 0c       	add	r4, r4
    38c4:	55 1c       	adc	r5, r5
    38c6:	92 01       	movw	r18, r4
    38c8:	e4 e0       	ldi	r30, 0x04	; 4

000038ca <ad_3924>:
    38ca:	24 0d       	add	r18, r4
    38cc:	35 1d       	adc	r19, r5
    38ce:	ea 95       	dec	r30
    38d0:	e1 f7       	brne	.-8      	; 0x38ca <ad_3924>
    38d2:	29 01       	movw	r4, r18
    38d4:	57 01       	movw	r10, r14
    38d6:	68 01       	movw	r12, r16
    38d8:	6e 80       	ldd	r6, Y+6	; 0x06
    38da:	7f 80       	ldd	r7, Y+7	; 0x07
    38dc:	88 84       	ldd	r8, Y+8	; 0x08
    38de:	99 84       	ldd	r9, Y+9	; 0x09
    38e0:	20 91 07 01 	lds	r18, 0x0107
    38e4:	27 30       	cpi	r18, 0x07	; 7
    38e6:	c1 f4       	brne	.+48     	; 0x3918 <no_sub>
    38e8:	6c 89       	ldd	r22, Y+20	; 0x14
    38ea:	7d 89       	ldd	r23, Y+21	; 0x15
    38ec:	8e 89       	ldd	r24, Y+22	; 0x16
    38ee:	9f 89       	ldd	r25, Y+23	; 0x17
    38f0:	9b 01       	movw	r18, r22
    38f2:	ac 01       	movw	r20, r24
    38f4:	6d 5e       	subi	r22, 0xED	; 237
    38f6:	7f 4f       	sbci	r23, 0xFF	; 255
    38f8:	8f 4f       	sbci	r24, 0xFF	; 255
    38fa:	9f 4f       	sbci	r25, 0xFF	; 255
    38fc:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
    3900:	9b 01       	movw	r18, r22
    3902:	ac 01       	movw	r20, r24
    3904:	66 e3       	ldi	r22, 0x36	; 54
    3906:	79 e2       	ldi	r23, 0x29	; 41
    3908:	86 e8       	ldi	r24, 0x86	; 134
    390a:	9a e1       	ldi	r25, 0x1A	; 26
    390c:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
    3910:	62 1a       	sub	r6, r18
    3912:	73 0a       	sbc	r7, r19
    3914:	84 0a       	sbc	r8, r20
    3916:	95 0a       	sbc	r9, r21

00003918 <no_sub>:
    3918:	a6 14       	cp	r10, r6
    391a:	b7 04       	cpc	r11, r7
    391c:	c8 04       	cpc	r12, r8
    391e:	d9 04       	cpc	r13, r9
    3920:	28 f4       	brcc	.+10     	; 0x392c <ad_396c>
    3922:	6a 18       	sub	r6, r10
    3924:	7b 08       	sbc	r7, r11
    3926:	8c 08       	sbc	r8, r12
    3928:	9d 08       	sbc	r9, r13
    392a:	03 c0       	rjmp	.+6      	; 0x3932 <ad_3972>

0000392c <ad_396c>:
    392c:	66 24       	eor	r6, r6
    392e:	77 24       	eor	r7, r7
    3930:	43 01       	movw	r8, r6

00003932 <ad_3972>:
    3932:	b2 01       	movw	r22, r4
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	93 01       	movw	r18, r6
    393a:	a4 01       	movw	r20, r8
    393c:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
    3940:	95 01       	movw	r18, r10
    3942:	a6 01       	movw	r20, r12
    3944:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
    3948:	80 ed       	ldi	r24, 0xD0	; 208
    394a:	91 e0       	ldi	r25, 0x01	; 1
    394c:	79 81       	ldd	r23, Y+1	; 0x01
    394e:	87 0f       	add	r24, r23
    3950:	91 1d       	adc	r25, r1
    3952:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <__eerd_byte_m168>
    3956:	68 2e       	mov	r6, r24
    3958:	c9 01       	movw	r24, r18
    395a:	60 e1       	ldi	r22, 0x10	; 16
    395c:	70 e0       	ldi	r23, 0x00	; 0
    395e:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
    3962:	26 0f       	add	r18, r22
    3964:	37 1f       	adc	r19, r23
    3966:	c9 01       	movw	r24, r18
    3968:	68 16       	cp	r6, r24
    396a:	19 06       	cpc	r1, r25
    396c:	18 f4       	brcc	.+6      	; 0x3974 <esr_too_less>
    396e:	86 19       	sub	r24, r6
    3970:	91 09       	sbc	r25, r1
    3972:	02 c0       	rjmp	.+4      	; 0x3978 <ad_exit>

00003974 <esr_too_less>:
    3974:	81 2d       	mov	r24, r1
    3976:	91 2d       	mov	r25, r1

00003978 <ad_exit>:
    3978:	6e 96       	adiw	r28, 0x1e	; 30
    397a:	0f b6       	in	r0, 0x3f	; 63
    397c:	f8 94       	cli
    397e:	de bf       	out	0x3e, r29	; 62
    3980:	0f be       	out	0x3f, r0	; 63
    3982:	cd bf       	out	0x3d, r28	; 61
    3984:	cf 91       	pop	r28
    3986:	df 91       	pop	r29
    3988:	1f 91       	pop	r17
    398a:	0f 91       	pop	r16
    398c:	ff 90       	pop	r15
    398e:	ef 90       	pop	r14
    3990:	df 90       	pop	r13
    3992:	cf 90       	pop	r12
    3994:	bf 90       	pop	r11
    3996:	af 90       	pop	r10
    3998:	9f 90       	pop	r9
    399a:	8f 90       	pop	r8
    399c:	7f 90       	pop	r7
    399e:	6f 90       	pop	r6
    39a0:	5f 90       	pop	r5
    39a2:	4f 90       	pop	r4
    39a4:	3f 90       	pop	r3
    39a6:	2f 90       	pop	r2
    39a8:	08 95       	ret

000039aa <GetVloss>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void GetVloss() {
    39aa:	cf 92       	push	r12
    39ac:	df 92       	push	r13
    39ae:	ef 92       	push	r14
    39b0:	ff 92       	push	r15
    39b2:	0f 93       	push	r16
    39b4:	1f 93       	push	r17
    39b6:	cf 93       	push	r28
    39b8:	df 93       	push	r29
  } lval;
  uint8_t ii;
  uint8_t HiPinR_L;
  uint8_t LoADC;

  if (cap.v_loss > 0) return;		// Voltage loss is already known
    39ba:	80 91 70 01 	lds	r24, 0x0170
    39be:	90 91 71 01 	lds	r25, 0x0171
    39c2:	00 97       	sbiw	r24, 0x00	; 0
    39c4:	09 f0       	breq	.+2      	; 0x39c8 <GetVloss+0x1e>
    39c6:	a2 c0       	rjmp	.+324    	; 0x3b0c <GetVloss+0x162>
  LoADC = pgm_read_byte(&PinADCtab[cap.ca]) | TXD_MSK;
    39c8:	e0 91 72 01 	lds	r30, 0x0172
    39cc:	f0 e0       	ldi	r31, 0x00	; 0
    39ce:	e3 5f       	subi	r30, 0xF3	; 243
    39d0:	fe 4f       	sbci	r31, 0xFE	; 254
    39d2:	04 91       	lpm	r16, Z+
    39d4:	08 60       	ori	r16, 0x08	; 8
  HiPinR_L = pgm_read_byte(&PinRLtab[cap.cb]);	//R_L mask for HighPin R_L load
    39d6:	e0 91 73 01 	lds	r30, 0x0173
    39da:	f0 e0       	ldi	r31, 0x00	; 0
    39dc:	e6 5f       	subi	r30, 0xF6	; 246
    39de:	fe 4f       	sbci	r31, 0xFE	; 254
    39e0:	14 91       	lpm	r17, Z+

  EntladePins();			// discharge capacitor
    39e2:	0e 94 b2 01 	call	0x364	; 0x364 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    39e6:	88 e0       	ldi	r24, 0x08	; 8
    39e8:	88 b9       	out	0x08, r24	; 8
  R_PORT = 0;				// switch R-Port to GND
    39ea:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    39ec:	07 b9       	out	0x07, r16	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    39ee:	14 b9       	out	0x04, r17	; 4
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
    39f0:	80 91 73 01 	lds	r24, 0x0173
    39f4:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
    39f8:	ec 01       	movw	r28, r24
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
    39fa:	00 91 75 01 	lds	r16, 0x0175
    39fe:	08 3f       	cpi	r16, 0xF8	; 248
    3a00:	0c f0       	brlt	.+2      	; 0x3a04 <GetVloss+0x5a>
    3a02:	84 c0       	rjmp	.+264    	; 0x3b0c <GetVloss+0x162>
  lval.dw = cap.cval_max;
    3a04:	20 91 66 01 	lds	r18, 0x0166
    3a08:	30 91 67 01 	lds	r19, 0x0167
    3a0c:	40 91 68 01 	lds	r20, 0x0168
    3a10:	50 91 69 01 	lds	r21, 0x0169
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3a14:	04 5f       	subi	r16, 0xF4	; 244
     lval.dw = (lval.dw + 5) / 10;
    3a16:	8a e0       	ldi	r24, 0x0A	; 10
    3a18:	c8 2e       	mov	r12, r24
    3a1a:	d1 2c       	mov	r13, r1
    3a1c:	e1 2c       	mov	r14, r1
    3a1e:	f1 2c       	mov	r15, r1
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
  lval.dw = cap.cval_max;
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3a20:	0b c0       	rjmp	.+22     	; 0x3a38 <GetVloss+0x8e>
     lval.dw = (lval.dw + 5) / 10;
    3a22:	ca 01       	movw	r24, r20
    3a24:	b9 01       	movw	r22, r18
    3a26:	6b 5f       	subi	r22, 0xFB	; 251
    3a28:	7f 4f       	sbci	r23, 0xFF	; 255
    3a2a:	8f 4f       	sbci	r24, 0xFF	; 255
    3a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a2e:	a7 01       	movw	r20, r14
    3a30:	96 01       	movw	r18, r12
    3a32:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
// ******** should adcv[0] be measured without current???
  if (cap.cpre_max > -9) return;	// too much capacity
  lval.dw = cap.cval_max;
//  for (ii=cap.cpre_max+12;ii<5;ii++) {
  for (ii=cap.cpre_max+12;ii<4;ii++) {
    3a36:	0f 5f       	subi	r16, 0xFF	; 255
    3a38:	04 30       	cpi	r16, 0x04	; 4
    3a3a:	98 f3       	brcs	.-26     	; 0x3a22 <GetVloss+0x78>
    3a3c:	79 01       	movw	r14, r18
     lval.dw = (lval.dw + 5) / 10;
  }
//  if ((lval.dw == 0) || (lval.dw > 500)) {
  if ((lval.dw == 0) || (lval.dw > 5000)) {
    3a3e:	21 50       	subi	r18, 0x01	; 1
    3a40:	30 40       	sbci	r19, 0x00	; 0
    3a42:	40 40       	sbci	r20, 0x00	; 0
    3a44:	50 40       	sbci	r21, 0x00	; 0
    3a46:	28 38       	cpi	r18, 0x88	; 136
    3a48:	83 e1       	ldi	r24, 0x13	; 19
    3a4a:	38 07       	cpc	r19, r24
    3a4c:	80 e0       	ldi	r24, 0x00	; 0
    3a4e:	48 07       	cpc	r20, r24
    3a50:	80 e0       	ldi	r24, 0x00	; 0
    3a52:	58 07       	cpc	r21, r24
    3a54:	08 f0       	brcs	.+2      	; 0x3a58 <GetVloss+0xae>
    3a56:	5a c0       	rjmp	.+180    	; 0x3b0c <GetVloss+0x162>
     /* capacity more than 50uF, Voltage loss is already measured  */
     return;
  }
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    3a58:	15 b9       	out	0x05, r17	; 5
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    3a5a:	14 b9       	out	0x04, r17	; 4
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    3a5c:	00 e0       	ldi	r16, 0x00	; 0
    3a5e:	10 e0       	ldi	r17, 0x00	; 0
    3a60:	04 c0       	rjmp	.+8      	; 0x3a6a <GetVloss+0xc0>
//     wait50us();			// wait exactly 50us
     wait5us();			// wait exactly 5us
    3a62:	0e 94 57 14 	call	0x28ae	; 0x28ae <wait5us>
     /* capacity more than 50uF, Voltage loss is already measured  */
     return;
  }
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    3a66:	0e 5f       	subi	r16, 0xFE	; 254
    3a68:	1f 4f       	sbci	r17, 0xFF	; 255
    3a6a:	67 01       	movw	r12, r14
    3a6c:	0e 15       	cp	r16, r14
    3a6e:	1f 05       	cpc	r17, r15
    3a70:	c0 f3       	brcs	.-16     	; 0x3a62 <GetVloss+0xb8>
//     wait50us();			// wait exactly 50us
     wait5us();			// wait exactly 5us
  }
  R_DDR = 0;				// switch back to input
    3a72:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// no Pull up
    3a74:	15 b8       	out	0x05, r1	; 5
 // wait10us();			//wait a little time
  wdt_reset();
    3a76:	a8 95       	wdr
  // read voltage without current
  ADCconfig.Samples = 5;		// set ADC to only 5 samples
    3a78:	85 e0       	ldi	r24, 0x05	; 5
    3a7a:	80 93 3c 01 	sts	0x013C, r24
  adcv[2] = ReadADC(cap.cb);
    3a7e:	80 91 73 01 	lds	r24, 0x0173
    3a82:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
  if (adcv[2] > adcv[0]) {
    3a86:	c8 17       	cp	r28, r24
    3a88:	d9 07       	cpc	r29, r25
    3a8a:	20 f4       	brcc	.+8      	; 0x3a94 <GetVloss+0xea>
     adcv[2] -= adcv[0];		//difference to beginning voltage
    3a8c:	8c 01       	movw	r16, r24
    3a8e:	0c 1b       	sub	r16, r28
    3a90:	1d 0b       	sbc	r17, r29
    3a92:	02 c0       	rjmp	.+4      	; 0x3a98 <GetVloss+0xee>
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
    3a94:	00 e0       	ldi	r16, 0x00	; 0
    3a96:	10 e0       	ldi	r17, 0x00	; 0
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    3a98:	ee 24       	eor	r14, r14
    3a9a:	ff 24       	eor	r15, r15
    3a9c:	05 c0       	rjmp	.+10     	; 0x3aa8 <GetVloss+0xfe>
//     wait50us();
     wait5us();
    3a9e:	0e 94 57 14 	call	0x28ae	; 0x28ae <wait5us>
     adcv[2] -= adcv[0];		//difference to beginning voltage
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    3aa2:	08 94       	sec
    3aa4:	e1 1c       	adc	r14, r1
    3aa6:	f1 1c       	adc	r15, r1
    3aa8:	ec 14       	cp	r14, r12
    3aaa:	fd 04       	cpc	r15, r13
    3aac:	c0 f3       	brcs	.-16     	; 0x3a9e <GetVloss+0xf4>
//     wait50us();
     wait5us();
  }
  adcv[3] = ReadADC(cap.cb);	// read voltage again, is discharged only a little bit ?
    3aae:	80 91 73 01 	lds	r24, 0x0173
    3ab2:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
  ADCconfig.Samples = ANZ_MESS;		// set ADC back to configured No. of samples
    3ab6:	29 e1       	ldi	r18, 0x19	; 25
    3ab8:	20 93 3c 01 	sts	0x013C, r18
  wdt_reset();
    3abc:	a8 95       	wdr
  if (adcv[3] > adcv[0]) {
    3abe:	c8 17       	cp	r28, r24
    3ac0:	d9 07       	cpc	r29, r25
    3ac2:	18 f4       	brcc	.+6      	; 0x3aca <GetVloss+0x120>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    3ac4:	8c 1b       	sub	r24, r28
    3ac6:	9d 0b       	sbc	r25, r29
    3ac8:	02 c0       	rjmp	.+4      	; 0x3ace <GetVloss+0x124>
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
    3aca:	80 e0       	ldi	r24, 0x00	; 0
    3acc:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (adcv[2] > adcv[3]) {
    3ace:	80 17       	cp	r24, r16
    3ad0:	91 07       	cpc	r25, r17
    3ad2:	a8 f4       	brcc	.+42     	; 0x3afe <GetVloss+0x154>
     // build difference to load voltage
     adcv[1] = adcv[2] - adcv[3];	// lost voltage during load time wait
    3ad4:	b8 01       	movw	r22, r16
    3ad6:	68 1b       	sub	r22, r24
    3ad8:	79 0b       	sbc	r23, r25
  } else {
     adcv[1] = 0;			// no lost voltage
  }
  // compute voltage drop as part from loaded voltage
  if (adcv[1] > 0) {
    3ada:	89 f0       	breq	.+34     	; 0x3afe <GetVloss+0x154>
     // there is any voltage drop (adcv[1]) !
     // adcv[2] is the loaded voltage.
     cap.v_loss = (unsigned long)(adcv[1] * 500UL) / adcv[2];
    3adc:	80 e0       	ldi	r24, 0x00	; 0
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	24 ef       	ldi	r18, 0xF4	; 244
    3ae2:	31 e0       	ldi	r19, 0x01	; 1
    3ae4:	40 e0       	ldi	r20, 0x00	; 0
    3ae6:	50 e0       	ldi	r21, 0x00	; 0
    3ae8:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
    3aec:	98 01       	movw	r18, r16
    3aee:	40 e0       	ldi	r20, 0x00	; 0
    3af0:	50 e0       	ldi	r21, 0x00	; 0
    3af2:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
    3af6:	30 93 71 01 	sts	0x0171, r19
    3afa:	20 93 70 01 	sts	0x0170, r18
  lcd_line4();
  DisplayValue(lval.w[0],0,'x',4);
#endif

  // discharge capacitor again
  EntladePins();		// discharge capacitors
    3afe:	0e 94 b2 01 	call	0x364	; 0x364 <EntladePins>
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    3b02:	88 e0       	ldi	r24, 0x08	; 8
    3b04:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    3b06:	88 b9       	out	0x08, r24	; 8
  R_DDR = 0;			// switch all resistor ports to input
    3b08:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    3b0a:	15 b8       	out	0x05, r1	; 5
#endif
  return;
 } // end GetVdrop()
    3b0c:	df 91       	pop	r29
    3b0e:	cf 91       	pop	r28
    3b10:	1f 91       	pop	r17
    3b12:	0f 91       	pop	r16
    3b14:	ff 90       	pop	r15
    3b16:	ef 90       	pop	r14
    3b18:	df 90       	pop	r13
    3b1a:	cf 90       	pop	r12
    3b1c:	08 95       	ret

00003b1e <Calibrate_UR>:
#include "Transistortester.h"
void Calibrate_UR(void) {
    3b1e:	8f 92       	push	r8
    3b20:	9f 92       	push	r9
    3b22:	af 92       	push	r10
    3b24:	bf 92       	push	r11
    3b26:	cf 92       	push	r12
    3b28:	df 92       	push	r13
    3b2a:	ef 92       	push	r14
    3b2c:	ff 92       	push	r15
    3b2e:	0f 93       	push	r16
    3b30:	1f 93       	push	r17
    3b32:	cf 93       	push	r28
    3b34:	df 93       	push	r29
  uint16_t u680;	// 3 * (Voltage at 680 Ohm)
 #endif


                                        //############################################
  ADCconfig.U_AVCC = U_VCC;     // set initial VCC Voltage
    3b36:	88 e8       	ldi	r24, 0x88	; 136
    3b38:	93 e1       	ldi	r25, 0x13	; 19
    3b3a:	90 93 41 01 	sts	0x0141, r25
    3b3e:	80 93 40 01 	sts	0x0140, r24
  ADCconfig.Samples = 190;	// set number of ADC reads near to maximum
    3b42:	8e eb       	ldi	r24, 0xBE	; 190
    3b44:	80 93 3c 01 	sts	0x013C, r24
#if FLASHEND > 0x1fff
  ADC_PORT = TXD_VAL;                   // switch to 0V
    3b48:	08 e0       	ldi	r16, 0x08	; 8
    3b4a:	08 b9       	out	0x08, r16	; 8
  ADC_DDR = (1<<TPREF) | TXD_MSK;       // switch pin with 2.5V reference to GND
    3b4c:	88 e1       	ldi	r24, 0x18	; 24
    3b4e:	87 b9       	out	0x07, r24	; 7
  wait1ms();
    3b50:	0e 94 4c 14 	call	0x2898	; 0x2898 <wait1ms>
  ADC_DDR =  TXD_MSK;   // switch pin with reference back to input
    3b54:	07 b9       	out	0x07, r16	; 7
  trans.uBE[1] = W5msReadADC(TPREF); // read voltage of 2.5V precision reference
    3b56:	84 e0       	ldi	r24, 0x04	; 4
    3b58:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
    3b5c:	ec 01       	movw	r28, r24
    3b5e:	90 93 5a 01 	sts	0x015A, r25
    3b62:	80 93 59 01 	sts	0x0159, r24
  if ((trans.uBE[1] > 2250) && (trans.uBE[1] < 2750)) {
    3b66:	8b 5c       	subi	r24, 0xCB	; 203
    3b68:	98 40       	sbci	r25, 0x08	; 8
    3b6a:	21 e0       	ldi	r18, 0x01	; 1
    3b6c:	83 3f       	cpi	r24, 0xF3	; 243
    3b6e:	92 07       	cpc	r25, r18
    3b70:	c0 f4       	brcc	.+48     	; 0x3ba2 <Calibrate_UR+0x84>
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    3b72:	81 e0       	ldi	r24, 0x01	; 1
    3b74:	80 93 49 01 	sts	0x0149, r24
     ADCconfig.U_AVCC = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / trans.uBE[1];
    3b78:	60 91 40 01 	lds	r22, 0x0140
    3b7c:	70 91 41 01 	lds	r23, 0x0141
    3b80:	80 e0       	ldi	r24, 0x00	; 0
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	2f eb       	ldi	r18, 0xBF	; 191
    3b86:	39 e0       	ldi	r19, 0x09	; 9
    3b88:	40 e0       	ldi	r20, 0x00	; 0
    3b8a:	50 e0       	ldi	r21, 0x00	; 0
    3b8c:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
    3b90:	9e 01       	movw	r18, r28
    3b92:	40 e0       	ldi	r20, 0x00	; 0
    3b94:	50 e0       	ldi	r21, 0x00	; 0
    3b96:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
    3b9a:	30 93 41 01 	sts	0x0141, r19
    3b9e:	20 93 40 01 	sts	0x0140, r18
  }
#endif
 #ifdef WITH_AUTO_REF
  (void) ReadADC(MUX_INT_REF);	// read reference voltage 
    3ba2:	8e e0       	ldi	r24, 0x0E	; 14
    3ba4:	0e 94 a6 1a 	call	0x354c	; 0x354c <ReadADC>
  ref_mv = W5msReadADC(MUX_INT_REF);	// read reference voltage 
    3ba8:	8e e0       	ldi	r24, 0x0E	; 14
    3baa:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
    3bae:	90 93 45 01 	sts	0x0145, r25
    3bb2:	80 93 44 01 	sts	0x0144, r24
  RefVoltage();		//compute RHmultip = f(reference voltage)
    3bb6:	0e 94 4d 02 	call	0x49a	; 0x49a <RefVoltage>
 #else
  ref_mv = DEFAULT_BAND_GAP;    // set to default Reference Voltage
 #endif
  ADCconfig.U_Bandgap = ADC_internal_reference; // set internal reference voltage for ADC
    3bba:	8f eb       	ldi	r24, 0xBF	; 191
    3bbc:	91 e0       	ldi	r25, 0x01	; 1
    3bbe:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <__eerd_byte_m168>
    3bc2:	99 27       	eor	r25, r25
    3bc4:	87 fd       	sbrc	r24, 7
    3bc6:	90 95       	com	r25
    3bc8:	20 91 44 01 	lds	r18, 0x0144
    3bcc:	30 91 45 01 	lds	r19, 0x0145
    3bd0:	82 0f       	add	r24, r18
    3bd2:	93 1f       	adc	r25, r19
    3bd4:	90 93 3f 01 	sts	0x013F, r25
    3bd8:	80 93 3e 01 	sts	0x013E, r24
                                        //############################################

 #ifdef AUTO_CAL
  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    3bdc:	79 e0       	ldi	r23, 0x09	; 9
    3bde:	d7 2e       	mov	r13, r23
    3be0:	d7 b8       	out	0x07, r13	; 7
  R_PORT = 1<<(TP1*2);		//R_L-PORT 1 to VCC
    3be2:	aa 24       	eor	r10, r10
    3be4:	a3 94       	inc	r10
    3be6:	a5 b8       	out	0x05, r10	; 5
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to VCC
    3be8:	a4 b8       	out	0x04, r10	; 4
  sum_rm = W5msReadADC(TP1);
    3bea:	80 e0       	ldi	r24, 0x00	; 0
    3bec:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
    3bf0:	8c 01       	movw	r16, r24

  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    3bf2:	6a e0       	ldi	r22, 0x0A	; 10
    3bf4:	86 2e       	mov	r8, r22
    3bf6:	87 b8       	out	0x07, r8	; 7
  R_PORT =  1<<(TP2*2);		//R_L-PORT 2 to VCC
    3bf8:	54 e0       	ldi	r21, 0x04	; 4
    3bfa:	c5 2e       	mov	r12, r21
    3bfc:	c5 b8       	out	0x05, r12	; 5
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to VCC
    3bfe:	c4 b8       	out	0x04, r12	; 4
  sum_rm += W5msReadADC(TP2);
    3c00:	81 e0       	ldi	r24, 0x01	; 1
    3c02:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
    3c06:	08 0f       	add	r16, r24
    3c08:	19 1f       	adc	r17, r25

  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    3c0a:	4c e0       	ldi	r20, 0x0C	; 12
    3c0c:	f4 2e       	mov	r15, r20
    3c0e:	f7 b8       	out	0x07, r15	; 7
  R_PORT =  1<<(TP3*2);		//R_L-PORT 3 to VCC
    3c10:	30 e1       	ldi	r19, 0x10	; 16
    3c12:	e3 2e       	mov	r14, r19
    3c14:	e5 b8       	out	0x05, r14	; 5
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to VCC
    3c16:	e4 b8       	out	0x04, r14	; 4
  sum_rm += W5msReadADC(TP3);	//add all three values
    3c18:	82 e0       	ldi	r24, 0x02	; 2
    3c1a:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
    3c1e:	08 0f       	add	r16, r24
    3c20:	19 1f       	adc	r17, r25

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    3c22:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    3c24:	d8 b8       	out	0x08, r13	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    3c26:	d7 b8       	out	0x07, r13	; 7
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
    3c28:	a4 b8       	out	0x04, r10	; 4
  sum_rp = ADCconfig.U_AVCC - W5msReadADC(TP1);
    3c2a:	c0 91 40 01 	lds	r28, 0x0140
    3c2e:	d0 91 41 01 	lds	r29, 0x0141
    3c32:	80 e0       	ldi	r24, 0x00	; 0
    3c34:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
    3c38:	5c 01       	movw	r10, r24
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    3c3a:	88 b8       	out	0x08, r8	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    3c3c:	87 b8       	out	0x07, r8	; 7
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
    3c3e:	c4 b8       	out	0x04, r12	; 4
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP2);
    3c40:	c0 90 40 01 	lds	r12, 0x0140
    3c44:	d0 90 41 01 	lds	r13, 0x0141
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
    3c4e:	4c 01       	movw	r8, r24

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    3c50:	f8 b8       	out	0x08, r15	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    3c52:	f7 b8       	out	0x07, r15	; 7
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
    3c54:	e4 b8       	out	0x04, r14	; 4
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP3);
    3c56:	e0 90 40 01 	lds	r14, 0x0140
    3c5a:	f0 90 41 01 	lds	r15, 0x0141
    3c5e:	82 e0       	ldi	r24, 0x02	; 2
    3c60:	0e 94 a0 1a 	call	0x3540	; 0x3540 <W5msReadADC>
  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
  R_DDR = 1<<(TP1*2);		//Pin 1 to output and over R_L to GND
  sum_rp = ADCconfig.U_AVCC - W5msReadADC(TP1);
    3c64:	cc 0d       	add	r28, r12
    3c66:	dd 1d       	adc	r29, r13
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
  R_DDR = 1<<(TP2*2);		//Pin 2 to output and over R_L to GND
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP2);
    3c68:	ce 0d       	add	r28, r14
    3c6a:	df 1d       	adc	r29, r15
    3c6c:	ca 19       	sub	r28, r10
    3c6e:	db 09       	sbc	r29, r11

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
  R_DDR = 1<<(TP3*2);		//Pin 3 to output and over R_L to GND
  sum_rp += ADCconfig.U_AVCC - W5msReadADC(TP3);
    3c70:	c8 19       	sub	r28, r8
    3c72:	d9 09       	sbc	r29, r9
    3c74:	c8 1b       	sub	r28, r24
    3c76:	d9 0b       	sbc	r29, r25

  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_rp);	//three times the voltage at the 680 Ohm
    3c78:	80 91 40 01 	lds	r24, 0x0140
    3c7c:	90 91 41 01 	lds	r25, 0x0141
    3c80:	6c 01       	movw	r12, r24
    3c82:	cc 0c       	add	r12, r12
    3c84:	dd 1c       	adc	r13, r13
    3c86:	c8 0e       	add	r12, r24
    3c88:	d9 1e       	adc	r13, r25
    3c8a:	c0 1a       	sub	r12, r16
    3c8c:	d1 0a       	sbc	r13, r17
    3c8e:	cc 1a       	sub	r12, r28
    3c90:	dd 0a       	sbc	r13, r29
  pin_rmi = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    3c92:	ee 24       	eor	r14, r14
    3c94:	ff 24       	eor	r15, r15
    3c96:	b8 01       	movw	r22, r16
    3c98:	80 e0       	ldi	r24, 0x00	; 0
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	20 e9       	ldi	r18, 0x90	; 144
    3c9e:	3a e1       	ldi	r19, 0x1A	; 26
    3ca0:	40 e0       	ldi	r20, 0x00	; 0
    3ca2:	50 e0       	ldi	r21, 0x00	; 0
    3ca4:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
    3ca8:	a7 01       	movw	r20, r14
    3caa:	96 01       	movw	r18, r12
    3cac:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
    3cb0:	89 01       	movw	r16, r18
    3cb2:	30 93 48 01 	sts	0x0148, r19
    3cb6:	20 93 47 01 	sts	0x0147, r18
//  adcmv[2] = pin_rm;	// for last output in row 2
  pin_rpl = (unsigned long)((unsigned long)sum_rp * (unsigned long)R_L_VAL) / (unsigned long)u680;
    3cba:	be 01       	movw	r22, r28
    3cbc:	80 e0       	ldi	r24, 0x00	; 0
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	20 e9       	ldi	r18, 0x90	; 144
    3cc2:	3a e1       	ldi	r19, 0x1A	; 26
    3cc4:	40 e0       	ldi	r20, 0x00	; 0
    3cc6:	50 e0       	ldi	r21, 0x00	; 0
    3cc8:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <__mulsi3>
    3ccc:	a7 01       	movw	r20, r14
    3cce:	96 01       	movw	r18, r12
    3cd0:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__udivmodsi4>
    3cd4:	c9 01       	movw	r24, r18
    3cd6:	30 93 43 01 	sts	0x0143, r19
    3cda:	20 93 42 01 	sts	0x0142, r18
  resis680pl = pin_rpl + R_L_VAL;
    3cde:	80 57       	subi	r24, 0x70	; 112
    3ce0:	95 4e       	sbci	r25, 0xE5	; 229
    3ce2:	90 93 09 01 	sts	0x0109, r25
    3ce6:	80 93 08 01 	sts	0x0108, r24
  resis680mi = pin_rmi + R_L_VAL;
    3cea:	00 57       	subi	r16, 0x70	; 112
    3cec:	15 4e       	sbci	r17, 0xE5	; 229
    3cee:	10 93 03 01 	sts	0x0103, r17
    3cf2:	00 93 02 01 	sts	0x0102, r16
#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    3cf6:	89 e1       	ldi	r24, 0x19	; 25
    3cf8:	80 93 3c 01 	sts	0x013C, r24
 } 
    3cfc:	df 91       	pop	r29
    3cfe:	cf 91       	pop	r28
    3d00:	1f 91       	pop	r17
    3d02:	0f 91       	pop	r16
    3d04:	ff 90       	pop	r15
    3d06:	ef 90       	pop	r14
    3d08:	df 90       	pop	r13
    3d0a:	cf 90       	pop	r12
    3d0c:	bf 90       	pop	r11
    3d0e:	af 90       	pop	r10
    3d10:	9f 90       	pop	r9
    3d12:	8f 90       	pop	r8
    3d14:	08 95       	ret

00003d16 <__mulsi3>:
    3d16:	62 9f       	mul	r22, r18
    3d18:	d0 01       	movw	r26, r0
    3d1a:	73 9f       	mul	r23, r19
    3d1c:	f0 01       	movw	r30, r0
    3d1e:	82 9f       	mul	r24, r18
    3d20:	e0 0d       	add	r30, r0
    3d22:	f1 1d       	adc	r31, r1
    3d24:	64 9f       	mul	r22, r20
    3d26:	e0 0d       	add	r30, r0
    3d28:	f1 1d       	adc	r31, r1
    3d2a:	92 9f       	mul	r25, r18
    3d2c:	f0 0d       	add	r31, r0
    3d2e:	83 9f       	mul	r24, r19
    3d30:	f0 0d       	add	r31, r0
    3d32:	74 9f       	mul	r23, r20
    3d34:	f0 0d       	add	r31, r0
    3d36:	65 9f       	mul	r22, r21
    3d38:	f0 0d       	add	r31, r0
    3d3a:	99 27       	eor	r25, r25
    3d3c:	72 9f       	mul	r23, r18
    3d3e:	b0 0d       	add	r27, r0
    3d40:	e1 1d       	adc	r30, r1
    3d42:	f9 1f       	adc	r31, r25
    3d44:	63 9f       	mul	r22, r19
    3d46:	b0 0d       	add	r27, r0
    3d48:	e1 1d       	adc	r30, r1
    3d4a:	f9 1f       	adc	r31, r25
    3d4c:	bd 01       	movw	r22, r26
    3d4e:	cf 01       	movw	r24, r30
    3d50:	11 24       	eor	r1, r1
    3d52:	08 95       	ret

00003d54 <__udivmodqi4>:
    3d54:	99 1b       	sub	r25, r25
    3d56:	79 e0       	ldi	r23, 0x09	; 9
    3d58:	04 c0       	rjmp	.+8      	; 0x3d62 <__udivmodqi4_ep>

00003d5a <__udivmodqi4_loop>:
    3d5a:	99 1f       	adc	r25, r25
    3d5c:	96 17       	cp	r25, r22
    3d5e:	08 f0       	brcs	.+2      	; 0x3d62 <__udivmodqi4_ep>
    3d60:	96 1b       	sub	r25, r22

00003d62 <__udivmodqi4_ep>:
    3d62:	88 1f       	adc	r24, r24
    3d64:	7a 95       	dec	r23
    3d66:	c9 f7       	brne	.-14     	; 0x3d5a <__udivmodqi4_loop>
    3d68:	80 95       	com	r24
    3d6a:	08 95       	ret

00003d6c <__udivmodhi4>:
    3d6c:	aa 1b       	sub	r26, r26
    3d6e:	bb 1b       	sub	r27, r27
    3d70:	51 e1       	ldi	r21, 0x11	; 17
    3d72:	07 c0       	rjmp	.+14     	; 0x3d82 <__udivmodhi4_ep>

00003d74 <__udivmodhi4_loop>:
    3d74:	aa 1f       	adc	r26, r26
    3d76:	bb 1f       	adc	r27, r27
    3d78:	a6 17       	cp	r26, r22
    3d7a:	b7 07       	cpc	r27, r23
    3d7c:	10 f0       	brcs	.+4      	; 0x3d82 <__udivmodhi4_ep>
    3d7e:	a6 1b       	sub	r26, r22
    3d80:	b7 0b       	sbc	r27, r23

00003d82 <__udivmodhi4_ep>:
    3d82:	88 1f       	adc	r24, r24
    3d84:	99 1f       	adc	r25, r25
    3d86:	5a 95       	dec	r21
    3d88:	a9 f7       	brne	.-22     	; 0x3d74 <__udivmodhi4_loop>
    3d8a:	80 95       	com	r24
    3d8c:	90 95       	com	r25
    3d8e:	bc 01       	movw	r22, r24
    3d90:	cd 01       	movw	r24, r26
    3d92:	08 95       	ret

00003d94 <__udivmodsi4>:
    3d94:	a1 e2       	ldi	r26, 0x21	; 33
    3d96:	1a 2e       	mov	r1, r26
    3d98:	aa 1b       	sub	r26, r26
    3d9a:	bb 1b       	sub	r27, r27
    3d9c:	fd 01       	movw	r30, r26
    3d9e:	0d c0       	rjmp	.+26     	; 0x3dba <__udivmodsi4_ep>

00003da0 <__udivmodsi4_loop>:
    3da0:	aa 1f       	adc	r26, r26
    3da2:	bb 1f       	adc	r27, r27
    3da4:	ee 1f       	adc	r30, r30
    3da6:	ff 1f       	adc	r31, r31
    3da8:	a2 17       	cp	r26, r18
    3daa:	b3 07       	cpc	r27, r19
    3dac:	e4 07       	cpc	r30, r20
    3dae:	f5 07       	cpc	r31, r21
    3db0:	20 f0       	brcs	.+8      	; 0x3dba <__udivmodsi4_ep>
    3db2:	a2 1b       	sub	r26, r18
    3db4:	b3 0b       	sbc	r27, r19
    3db6:	e4 0b       	sbc	r30, r20
    3db8:	f5 0b       	sbc	r31, r21

00003dba <__udivmodsi4_ep>:
    3dba:	66 1f       	adc	r22, r22
    3dbc:	77 1f       	adc	r23, r23
    3dbe:	88 1f       	adc	r24, r24
    3dc0:	99 1f       	adc	r25, r25
    3dc2:	1a 94       	dec	r1
    3dc4:	69 f7       	brne	.-38     	; 0x3da0 <__udivmodsi4_loop>
    3dc6:	60 95       	com	r22
    3dc8:	70 95       	com	r23
    3dca:	80 95       	com	r24
    3dcc:	90 95       	com	r25
    3dce:	9b 01       	movw	r18, r22
    3dd0:	ac 01       	movw	r20, r24
    3dd2:	bd 01       	movw	r22, r26
    3dd4:	cf 01       	movw	r24, r30
    3dd6:	08 95       	ret

00003dd8 <__divmodsi4>:
    3dd8:	97 fb       	bst	r25, 7
    3dda:	09 2e       	mov	r0, r25
    3ddc:	05 26       	eor	r0, r21
    3dde:	0e d0       	rcall	.+28     	; 0x3dfc <__divmodsi4_neg1>
    3de0:	57 fd       	sbrc	r21, 7
    3de2:	04 d0       	rcall	.+8      	; 0x3dec <__divmodsi4_neg2>
    3de4:	d7 df       	rcall	.-82     	; 0x3d94 <__udivmodsi4>
    3de6:	0a d0       	rcall	.+20     	; 0x3dfc <__divmodsi4_neg1>
    3de8:	00 1c       	adc	r0, r0
    3dea:	38 f4       	brcc	.+14     	; 0x3dfa <__divmodsi4_exit>

00003dec <__divmodsi4_neg2>:
    3dec:	50 95       	com	r21
    3dee:	40 95       	com	r20
    3df0:	30 95       	com	r19
    3df2:	21 95       	neg	r18
    3df4:	3f 4f       	sbci	r19, 0xFF	; 255
    3df6:	4f 4f       	sbci	r20, 0xFF	; 255
    3df8:	5f 4f       	sbci	r21, 0xFF	; 255

00003dfa <__divmodsi4_exit>:
    3dfa:	08 95       	ret

00003dfc <__divmodsi4_neg1>:
    3dfc:	f6 f7       	brtc	.-4      	; 0x3dfa <__divmodsi4_exit>
    3dfe:	90 95       	com	r25
    3e00:	80 95       	com	r24
    3e02:	70 95       	com	r23
    3e04:	61 95       	neg	r22
    3e06:	7f 4f       	sbci	r23, 0xFF	; 255
    3e08:	8f 4f       	sbci	r24, 0xFF	; 255
    3e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e0c:	08 95       	ret

00003e0e <itoa>:
    3e0e:	fb 01       	movw	r30, r22
    3e10:	9f 01       	movw	r18, r30
    3e12:	e8 94       	clt
    3e14:	42 30       	cpi	r20, 0x02	; 2
    3e16:	c4 f0       	brlt	.+48     	; 0x3e48 <itoa+0x3a>
    3e18:	45 32       	cpi	r20, 0x25	; 37
    3e1a:	b4 f4       	brge	.+44     	; 0x3e48 <itoa+0x3a>
    3e1c:	4a 30       	cpi	r20, 0x0A	; 10
    3e1e:	29 f4       	brne	.+10     	; 0x3e2a <itoa+0x1c>
    3e20:	97 fb       	bst	r25, 7
    3e22:	1e f4       	brtc	.+6      	; 0x3e2a <itoa+0x1c>
    3e24:	90 95       	com	r25
    3e26:	81 95       	neg	r24
    3e28:	9f 4f       	sbci	r25, 0xFF	; 255
    3e2a:	64 2f       	mov	r22, r20
    3e2c:	77 27       	eor	r23, r23
    3e2e:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
    3e32:	80 5d       	subi	r24, 0xD0	; 208
    3e34:	8a 33       	cpi	r24, 0x3A	; 58
    3e36:	0c f0       	brlt	.+2      	; 0x3e3a <itoa+0x2c>
    3e38:	89 5d       	subi	r24, 0xD9	; 217
    3e3a:	81 93       	st	Z+, r24
    3e3c:	cb 01       	movw	r24, r22
    3e3e:	00 97       	sbiw	r24, 0x00	; 0
    3e40:	a1 f7       	brne	.-24     	; 0x3e2a <itoa+0x1c>
    3e42:	16 f4       	brtc	.+4      	; 0x3e48 <itoa+0x3a>
    3e44:	5d e2       	ldi	r21, 0x2D	; 45
    3e46:	51 93       	st	Z+, r21
    3e48:	10 82       	st	Z, r1
    3e4a:	c9 01       	movw	r24, r18
    3e4c:	0c 94 5f 1f 	jmp	0x3ebe	; 0x3ebe <strrev>

00003e50 <utoa>:
    3e50:	fb 01       	movw	r30, r22
    3e52:	9f 01       	movw	r18, r30
    3e54:	42 30       	cpi	r20, 0x02	; 2
    3e56:	74 f0       	brlt	.+28     	; 0x3e74 <utoa+0x24>
    3e58:	45 32       	cpi	r20, 0x25	; 37
    3e5a:	64 f4       	brge	.+24     	; 0x3e74 <utoa+0x24>
    3e5c:	64 2f       	mov	r22, r20
    3e5e:	77 27       	eor	r23, r23
    3e60:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__udivmodhi4>
    3e64:	80 5d       	subi	r24, 0xD0	; 208
    3e66:	8a 33       	cpi	r24, 0x3A	; 58
    3e68:	0c f0       	brlt	.+2      	; 0x3e6c <utoa+0x1c>
    3e6a:	89 5d       	subi	r24, 0xD9	; 217
    3e6c:	81 93       	st	Z+, r24
    3e6e:	cb 01       	movw	r24, r22
    3e70:	00 97       	sbiw	r24, 0x00	; 0
    3e72:	a1 f7       	brne	.-24     	; 0x3e5c <utoa+0xc>
    3e74:	10 82       	st	Z, r1
    3e76:	c9 01       	movw	r24, r18
    3e78:	0c 94 5f 1f 	jmp	0x3ebe	; 0x3ebe <strrev>

00003e7c <__eerd_byte_m168>:
    3e7c:	f9 99       	sbic	0x1f, 1	; 31
    3e7e:	fe cf       	rjmp	.-4      	; 0x3e7c <__eerd_byte_m168>
    3e80:	92 bd       	out	0x22, r25	; 34
    3e82:	81 bd       	out	0x21, r24	; 33
    3e84:	f8 9a       	sbi	0x1f, 0	; 31
    3e86:	99 27       	eor	r25, r25
    3e88:	80 b5       	in	r24, 0x20	; 32
    3e8a:	08 95       	ret

00003e8c <__eerd_word_m168>:
    3e8c:	a8 e1       	ldi	r26, 0x18	; 24
    3e8e:	b0 e0       	ldi	r27, 0x00	; 0
    3e90:	42 e0       	ldi	r20, 0x02	; 2
    3e92:	50 e0       	ldi	r21, 0x00	; 0
    3e94:	0c 94 71 1f 	jmp	0x3ee2	; 0x3ee2 <__eerd_blraw_m168>

00003e98 <__eewr_byte_m168>:
    3e98:	26 2f       	mov	r18, r22

00003e9a <__eewr_r18_m168>:
    3e9a:	f9 99       	sbic	0x1f, 1	; 31
    3e9c:	fe cf       	rjmp	.-4      	; 0x3e9a <__eewr_r18_m168>
    3e9e:	1f ba       	out	0x1f, r1	; 31
    3ea0:	92 bd       	out	0x22, r25	; 34
    3ea2:	81 bd       	out	0x21, r24	; 33
    3ea4:	20 bd       	out	0x20, r18	; 32
    3ea6:	0f b6       	in	r0, 0x3f	; 63
    3ea8:	f8 94       	cli
    3eaa:	fa 9a       	sbi	0x1f, 2	; 31
    3eac:	f9 9a       	sbi	0x1f, 1	; 31
    3eae:	0f be       	out	0x3f, r0	; 63
    3eb0:	01 96       	adiw	r24, 0x01	; 1
    3eb2:	08 95       	ret

00003eb4 <__eewr_word_m168>:
    3eb4:	0e 94 4c 1f 	call	0x3e98	; 0x3e98 <__eewr_byte_m168>
    3eb8:	27 2f       	mov	r18, r23
    3eba:	0c 94 4d 1f 	jmp	0x3e9a	; 0x3e9a <__eewr_r18_m168>

00003ebe <strrev>:
    3ebe:	dc 01       	movw	r26, r24
    3ec0:	fc 01       	movw	r30, r24
    3ec2:	67 2f       	mov	r22, r23
    3ec4:	71 91       	ld	r23, Z+
    3ec6:	77 23       	and	r23, r23
    3ec8:	e1 f7       	brne	.-8      	; 0x3ec2 <strrev+0x4>
    3eca:	32 97       	sbiw	r30, 0x02	; 2
    3ecc:	04 c0       	rjmp	.+8      	; 0x3ed6 <strrev+0x18>
    3ece:	7c 91       	ld	r23, X
    3ed0:	6d 93       	st	X+, r22
    3ed2:	70 83       	st	Z, r23
    3ed4:	62 91       	ld	r22, -Z
    3ed6:	ae 17       	cp	r26, r30
    3ed8:	bf 07       	cpc	r27, r31
    3eda:	c8 f3       	brcs	.-14     	; 0x3ece <strrev+0x10>
    3edc:	08 95       	ret

00003ede <__eerd_block_m168>:
    3ede:	dc 01       	movw	r26, r24
    3ee0:	cb 01       	movw	r24, r22

00003ee2 <__eerd_blraw_m168>:
    3ee2:	fc 01       	movw	r30, r24
    3ee4:	f9 99       	sbic	0x1f, 1	; 31
    3ee6:	fe cf       	rjmp	.-4      	; 0x3ee4 <__eerd_blraw_m168+0x2>
    3ee8:	06 c0       	rjmp	.+12     	; 0x3ef6 <__eerd_blraw_m168+0x14>
    3eea:	f2 bd       	out	0x22, r31	; 34
    3eec:	e1 bd       	out	0x21, r30	; 33
    3eee:	f8 9a       	sbi	0x1f, 0	; 31
    3ef0:	31 96       	adiw	r30, 0x01	; 1
    3ef2:	00 b4       	in	r0, 0x20	; 32
    3ef4:	0d 92       	st	X+, r0
    3ef6:	41 50       	subi	r20, 0x01	; 1
    3ef8:	50 40       	sbci	r21, 0x00	; 0
    3efa:	b8 f7       	brcc	.-18     	; 0x3eea <__eerd_blraw_m168+0x8>
    3efc:	08 95       	ret

00003efe <_exit>:
    3efe:	f8 94       	cli

00003f00 <__stop_program>:
    3f00:	ff cf       	rjmp	.-2      	; 0x3f00 <__stop_program>
